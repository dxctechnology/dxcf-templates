AWSTemplateFormatVersion: 2010-09-09
Description: Utility-DirectoryService Template.
  This creates a MicrosoftAD DirectoryService, and an associated Windows Instance for Directory Management.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - VPCStackName
          - DirectoryFunctionsStackName
          - AMIFunctionsStackName
          - BucketsStackName
          - TopicsStackName
          - CodesStackName
      - Label:
          default: Resource Dependencies
        Parameters:
          - KeyName
      - Label:
          default: System Configuration
        Parameters:
          - CompanyName
          - SystemName
      - Label:
          default: Environment Configuration
        Parameters:
          - AccountName
          - EnvironmentName
          - EnvironmentType
          - OSName
      - Label:
          default: Utility Configuration
        Parameters:
          - UtilityName
          - DirectoryAlias
          - DirectoryEdition
          - DirectoryAdministratorPassword
          - DirectorySeedDataEncryptionKey
          - UseSso
          - LogRetention
      - Label:
          default: Security Configuration
        Parameters:
          - AdministratorNetworks
          - AdministratorNetworkDescriptions
    ParameterLabels:
      VPCStackName:
        default: VPC Stack Name
      DirectoryFunctionsStackName:
        default: DirectoryFunctions Stack Name
      AMIFunctionsStackName:
        default: AMIFunctions Stack Name
      BucketsStackName:
        default: Buckets Stack Name
      TopicsStackName:
        default: Topics Stack Name
      CodesStackName:
        default: Codes Stack Name
      KeyName:
        default: Key Name
      CompanyName:
        default: Company Name
      SystemName:
        default: System Name
      AccountName:
        default: Account Name
      EnvironmentName:
        default: Environment Name
      EnvironmentType:
        default: Environment Type
      OSName:
        default: Operating System Name
      UtilityName:
        default: Utility Name
      DirectoryAlias:
        default: Directory Alias
      DirectoryEdition:
        default: Directory Edition
      DirectoryAdministratorPassword:
        default: Directory Administrator Password
      DirectorySeedDataEncryptionKey:
        default: Directory Seed Data Encryption Key
      UseSso:
        default: Use SSO
      LogRetention:
        default: Log Retention
      AdministratorNetworks:
        default: Administrator Networks
      AdministratorNetworkDescriptions:
        default: Administrator Network Descriptions
Parameters:
  VPCStackName:
    Description: Name of the CloudFormation Stack containing the VPC
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Production-VPC
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  DirectoryFunctionsStackName:
    Description: Name of the CloudFormation Stack containing the Directory Functions
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: DirectoryFunctions
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  AMIFunctionsStackName:
    Description: Name of the CloudFormation Stack containing the AMI Functions
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: AMIFunctions
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  BucketsStackName:
    Description: Name of the CloudFormation Stack containing Buckets
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Buckets
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  TopicsStackName:
    Description: Name of the CloudFormation Stack containing Topics
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Topics
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  CodesStackName:
    Description: Name of the CloudFormation Stack containing the Codes Resources
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Codes
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  KeyName:
    Description: Name of an existing KeyPair to enable the Administrator Password
    Type: AWS::EC2::KeyPair::KeyName
    MaxLength: 32
    Default: administrator
    AllowedPattern: (^$|^[_a-zA-Z0-9]*$)
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  CompanyName:
    Description: Name of the Company associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: DXC
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  SystemName:
    Description: Name of the System associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: Prototype
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  AccountName:
    Description: Name of the Account associated with the Stack
    Type: String
    Default: Production
    AllowedValues:
      - Production
      - Staging
      - UAT
      - QA
      - Testing
      - Development
      - Build
      - Core
      - Recovery
      - Log
      - Identity
      - Management
      - Jumpstart
      - Organization
    ConstraintDescription: must be Production, Staging, UAT, QA, Testing, Development, Build, Core, Recovery, Log, Identity, Management, Jumpstart or Organization.
  EnvironmentName:
    Description: Name of the Environment associated with the Stack
    Type: String
    Default: Production
    AllowedValues:
      - Production
      - Staging
      - UAT
      - QA
      - Testing
      - Development
      - Build
      - Core
      - Recovery
      - Log
      - Identity
      - Management
      - Organization
    ConstraintDescription: must be Production, Staging, UAT, QA, Testing, Development, Build, Core, Recovery, Log, Identity, Management or Organization.
  EnvironmentType:
    Description: Type of the Environment to build. Used to select size-related options in Mappings
    Type: String
    Default: small
    AllowedValues:
      - small
      - medium
      - large
      - xlarge
    ConstraintDescription: must be small, medium, large or xlarge.
  OSName:
    Description: The Operating System to use for Instances
    Type: String
    Default: Windows Server 2012 R2
    AllowedValues:
      - Windows Server 2012 R2
      - Windows Server 2016
    ConstraintDescription: must be "Windows Server 2012 R2" or "Windows Server 2016".
  UtilityName:
    Description: Name of the Utility associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: DirectoryService
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  DirectoryAlias:
    Description: Alias of the Directory Service created by the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: dxcapp
    AllowedPattern: ^[a-zA-Z0-9]*$
    ConstraintDescription: must contain alphanumeric characters.
  DirectoryEdition:
    Description: Type of Directory Service to build
    Type: String
    Default: Standard
    AllowedValues:
      - Standard
      - Enterprise
    ConstraintDescription: must be Standard or Enterprise.
  DirectoryAdministratorPassword:
    Description: Optional password for the Directory Service Admin User (If unspecified, generate a random password)
    Type: String
    NoEcho: true
    Default: ''
    AllowedPattern: (^$|(?=^.{20,64}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])^.*)
    ConstraintDescription: must be 20 to 64 alphanumeric characters, with no symbols and at least one uppercase, lowercase and digit, if specified.
  DirectorySeedDataEncryptionKey:
    Description: Encryption Key used to encrypt sensitive Directory Seed Data used to populate the Directory, mainly User initial passwords
    Type: String
    NoEcho: true
    Default: NotAValidKey2Use
    AllowedPattern: (?=^.{12,24}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])^.*
    ConstraintDescription: must be 12 to 24 alphanumeric characters, with no symbols and at least one uppercase, lowercase and digit.
  UseSso:
    Description: Configure Single Sign-on
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    ConstraintDescription: must be either true or false.
  LogRetention:
    Description: Number of days to retain CloudWatch Log Events
    Type: Number
    Default: 14
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
    ConstraintDescription: must be 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827 or 3653.
  AdministratorNetworks:
    Description: Networks that can administer the Application
    Type: String
    Default: -,-,-,-
    ConstraintDescription: must be a comma-separated list of 4 values, each an IP CIDR range of the form x.x.x.x/x or '-'.
  AdministratorNetworkDescriptions:
    Description: Descriptions of networks that can administer the Application
    Type: String
    Default: -,-,-,-
    ConstraintDescription: must be a comma-separated list of 4 values, each a short text description or '-'.
Mappings:
  RegionNameMap:
    us-east-1:
      Name: Virginia
      Code: ue1
    us-east-2:
      Name: Ohio
      Code: ue2
    us-west-1:
      Name: California
      Code: uw1
    us-west-2:
      Name: Oregon
      Code: uw2
    ap-east-1:
      Name: HongKong
      Code: ae1
    ap-south-1:
      Name: Mumbai
      Code: ad1
    ap-northeast-2:
      Name: Seoul
      Code: an2
    ap-southeast-1:
      Name: Singapore
      Code: as1
    ap-southeast-2:
      Name: Sydney
      Code: as2
    ap-northeast-1:
      Name: Tokyo
      Code: an1
    ca-central-1:
      Name: Canada
      Code: cc1
    eu-central-1:
      Name: Frankfurt
      Code: ec1
    eu-west-1:
      Name: Ireland
      Code: ew1
    eu-west-2:
      Name: London
      Code: ew2
    eu-west-3:
      Name: Paris
      Code: ew3
    eu-north-1:
      Name: Stockholm
      Code: en1
    me-south-1:
      Name: Bahrain
      Code: ms1
    sa-east-1:
      Name: SaoPaulo
      Code: se1
  InstanceTypeMap:
    Management:
      small: t3.small
      medium: t3.medium
      large: m5.large
      xlarge: m5.xlarge
Conditions:
  ConfigureSingleAccount: !Equals [ !Ref AccountName, Jumpstart ]
  ConfigureGlobal: !Equals [ !Ref 'AWS::Region', us-east-1 ]
  GeneratePassword: !Equals [ !Ref DirectoryAdministratorPassword, '' ]
  ConfigurePassword: !Not [ !Condition GeneratePassword ]
  ConfigureAdministratorNetwork0: !Not [ !Equals [ !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork1: !Not [ !Equals [ !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork2: !Not [ !Equals [ !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork3: !Not [ !Equals [ !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: GetPasswordSecretPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${EnvironmentName}-${UtilityName}-AdminPassword-*
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${EnvironmentName}-${UtilityName}-EncryptionKey-*
        - PolicyName: DownloadScriptFromS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${ScriptsBucket}/Modules/*
                    - ScriptsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  - !Sub
                    - arn:aws:s3:::${ScriptsBucket}/Windows/*
                    - ScriptsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  - !Sub
                    - arn:aws:s3:::${ScriptsBucket}/ActiveDirectory/*
                    - ScriptsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  - !Sub
                    - arn:aws:s3:::${ScriptsBucket}/DirectoryService/*
                    - ScriptsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ScriptsBucket
        - PolicyName: DownloadConfigurationFromS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${ConfigurationsBucket}/Windows/*
                    - ConfigurationsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
                  - !Sub
                    - arn:aws:s3:::${ConfigurationsBucket}/ActiveDirectory/*
                    - ConfigurationsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
                  - !Sub
                    - arn:aws:s3:::${ConfigurationsBucket}/DirectoryService/*
                    - ConfigurationsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
  LogGroupName:
    Type: Custom::LogGroupName
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${CodesStackName}-LogGroupNameFunctionArn
      CompanyName: !Ref CompanyName
      SystemName: !Ref SystemName
      ApplicationName: !Ref UtilityName
      EnvironmentName: !If [ ConfigureSingleAccount, !Ref EnvironmentName, !Ref 'AWS::NoValue' ]
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LogGroupName
      RetentionInDays: !Ref LogRetention
  PasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${EnvironmentName}-${UtilityName}-AdminPassword
      Description: !Sub Password for the ${EnvironmentName} Environment ${UtilityName} Utility Admin User
      SecretString: !If [ ConfigurePassword, !Ref DirectoryAdministratorPassword, !Ref 'AWS::NoValue' ]
      GenerateSecretString: !If
        - GeneratePassword
        - PasswordLength: 32
          ExcludePunctuation: true
        - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${UtilityName}-AdminPassword
  EncryptionKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${EnvironmentName}-${UtilityName}-EncryptionKey
      Description: !Sub EncryptionKey used to encrypt Seed Data for the ${EnvironmentName} Environment ${UtilityName} Utility
      SecretString: !Ref DirectorySeedDataEncryptionKey
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${UtilityName}-EncryptionKey
  MicrosoftAD:
    Type: AWS::DirectoryService::MicrosoftAD
    Properties:
      Name: !ImportValue
        Fn::Sub: ${VPCStackName}-VPCDirectoryDomain
      ShortName: !ImportValue
        Fn::Sub: ${VPCStackName}-VPCDirectoryNetBIOSDomain
      CreateAlias: false
      Edition: !Ref DirectoryEdition
      EnableSso: false
      Password: !Sub '{{resolve:secretsmanager:${PasswordSecret}}}'
      VpcSettings:
        VpcId: !ImportValue
          Fn::Sub: ${VPCStackName}-VPC
        SubnetIds:
          - !ImportValue
            Fn::Sub: ${VPCStackName}-IdentitySubnetA
          - !ImportValue
            Fn::Sub: ${VPCStackName}-IdentitySubnetB
    DependsOn: PasswordSecret
  Alias:
    Type: Custom::DirectoryAlias
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${DirectoryFunctionsStackName}-DirectoryAliasFunctionArn
      DirectoryId: !Ref MicrosoftAD
      DirectoryAlias: !Ref DirectoryAlias
      EnableSso: !Ref UseSso
  ConditionalForwarder:
    Type: Custom::DirectoryConditionalForwarder
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${DirectoryFunctionsStackName}-DirectoryConditionalForwarderFunctionArn
      DirectoryId: !Ref MicrosoftAD
      RemoteDomainName: !ImportValue
        Fn::Sub: ${VPCStackName}-VPCPrivateDomain
      VpcCidrBlock: !ImportValue
        Fn::Sub: ${VPCStackName}-VPCNetwork
# This is not working, indicating it's not a function, could be version mismatch, as this works on node command line
#  LogSubscription:
#    Type: Custom::DirectoryLogSubscription
#    Properties:
#      ServiceToken: !ImportValue
#        Fn::Sub: ${DirectoryFunctionsStackName}-DirectoryLogSubscriptionFunctionArn
#      DirectoryId: !Ref MicrosoftAD
#      LogGroup: !Ref LogGroup
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !ImportValue
        Fn::Sub: ${VPCStackName}-VPCPrivateDomain
      DomainNameServers:
      - !Select [ 0, !GetAtt MicrosoftAD.DnsIpAddresses ]
      - !Select [ 1, !GetAtt MicrosoftAD.DnsIpAddresses ]
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${UtilityName}-DirectoryDHCPOptions
    DependsOn: MicrosoftAD
  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      DhcpOptionsId: !Ref DHCPOptions
  AdministratorSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${EnvironmentName}-${UtilityName}-AdministratorSecurityGroup
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${UtilityName}-AdministratorSecurityGroup
  ManagementInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${EnvironmentName}-${UtilityName}-ManagementInstanceSecurityGroup
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
          Description: Global (ICMP Echo Reply)
        - IpProtocol: icmp
          FromPort: 3
          ToPort: 3
          CidrIp: 0.0.0.0/0
          Description: Global (ICMP Destination Unreachable)
        - IpProtocol: icmp
          FromPort: 8
          ToPort: 8
          CidrIp: 0.0.0.0/0
          Description: Global (ICMP Echo)
        - IpProtocol: icmp
          FromPort: 11
          ToPort: 11
          CidrIp: 0.0.0.0/0
          Description: Global (ICMP Time Exceeded)
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          SourceSecurityGroupId: !Ref AdministratorSecurityGroup
          Description: !Sub ${EnvironmentName}-${UtilityName}-AdministratorSecurityGroup (RDP)
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: 3389
            ToPort: 3389
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (RDP)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: 3389
            ToPort: 3389
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (RDP)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: 3389
            ToPort: 3389
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (RDP)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: 3389
            ToPort: 3389
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (RDP)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${UtilityName}-ManagementInstanceSecurityGroup
  HostName:
    Type: Custom::HostName
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${CodesStackName}-HostNameFunctionArn
      CompanyName: !Ref CompanyName
      LocationName: !Ref AWS::Region
      EnvironmentName: !Ref EnvironmentName
      ApplicationName: !Ref UtilityName
      InstanceNumber: 01
  WindowsImage:
    Type: Custom::WindowsImageId
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${AMIFunctionsStackName}-WindowsImageFunctionArn
      Region: !Ref AWS::Region
      OSName: !Ref OSName
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref Role
  ManagementInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Credentials:
          type: S3
          roleName: !Ref Role
          buckets:
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ScriptsBucket
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
      AWS::CloudFormation::Init:
        configSets:
          All:
            - InstallCloudFormationModule
            - RegisterCloudFormationSignal
            - ConfigureOS
            - ConfigureCFN
            - InstallSSMAgent
            - InstallCloudWatchAgent
            - ConfigureCloudWatchAgent
            - ConfigureHostName
            - JoinDomain
            - InstallManagementTools
            - ConfigureADGroups
            - ConfigureADUsers
            - ConfigureRemoteDesktopUsers
            - ConfigurePowerShellProfile
            - ConfigureWindowsTaskBar
            - SignalCloudFormation
        InstallCloudFormationModule:
          files:
            C:\Windows\system32\WindowsPowerShell\v1.0\Modules\CloudFormation\CloudFormation.psm1:
              source: !Sub
                - https://${ScriptsBucket}.${s3}.amazonaws.com/Modules/CloudFormation.psm1
                - ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
        RegisterCloudFormationSignal:
          commands:
            01-register-signal:
              command: !Sub 'powershell.exe -Command "Register-CloudFormationSignal
                -Stack ''${AWS::StackName}''
                -Resource ''ManagementInstance''
                -Region ''${AWS::Region}''"'
              waitAfterCompletion: 0
        ConfigureOS:
          commands:
            01-disable-windows-firewall:
              command: powershell.exe -Command "Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False"
              waitAfterCompletion: 0
            02-set-execution-policy:
              command: powershell.exe -Command "Set-ExecutionPolicy RemoteSigned -Force"
              waitAfterCompletion: 0
        ConfigureCFN:
          files:
            c:\cfn\cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Instance.Metadata.AWS::CloudFormation::Init
                action=cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource ManagementInstance --region ${AWS::Region}
          services:
            windows:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - c:\cfn\cfn-hup.conf
                  - c:\cfn\hooks.d\cfn-auto-reloader.conf
        InstallSSMAgent:
          files:
            c:\cfn\temp\AmazonSSMAgentSetup.exe:
              source: https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/windows_amd64/AmazonSSMAgentSetup.exe
          commands:
            01-install-ssm-agent:
              command: c:\cfn\temp\AmazonSSMAgentSetup.exe /install /passive /quiet
              ignoreErrors: false
        InstallCloudWatchAgent:
          sources:
            c:\cfn\temp\AmazonCloudWatchAgent: https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/AmazonCloudWatchAgent.zip
          commands:
            01-install-cloudwatch-agent:
              command: powershell.exe -Command ".\install.ps1"
              cwd: c:\cfn\temp\AmazonCloudWatchAgent
              ignoreErrors: false
        ConfigureCloudWatchAgent:
          files:
            C:\ProgramData\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent.json:
              content: !Sub |
                {
                  "agent" : {
                    "metrics_collection_interval" : 60,
                    "logfile" : "C:\\Program Files\\Amazon\\CloudWatchAgent\\Logs\\amazon-cloudwatch-agent.log",
                    "debug" : false
                  },
                  "metrics" : {
                    "namespace" : "${SystemName}/${EnvironmentName}-${UtilityName}",
                    "metrics_collected" : {
                      "Memory" : {
                        "measurement" : [
                          { "name" : "% Committed Bytes In Use", "rename" : "MemoryCommittedPercent", "unit" : "Percent" },
                          { "name" : "Pages/sec", "rename" : "MemoryPageOps", "unit" : "Count/Second" }
                        ]
                      },
                      "LogicalDisk" : {
                        "resources" : [
                          "C:",
                          "D:"
                        ],
                        "measurement" : [
                          { "name" : "% Free Space", "rename" : "DiskFreePercent", "unit" : "Percent" },
                          { "name" : "Free Megabytes", "rename" : "DiskFreeMegabytes", "unit" : "Megabytes" },
                          { "name" : "Disk Bytes/sec", "rename" : "DiskBytesPerSecond", "unit" : "Bytes/Second" },
                          { "name" : "Avg. Disk Queue Length", "rename" : "DiskQueueLength", "unit" : "Count" }
                        ]
                      }
                    },
                    "append_dimensions" : {
                      "InstanceId" : "${!aws:InstanceId}",
                      "AutoScalingGroupName" : "${!aws:AutoScalingGroupName}"
                    },
                    "aggregation_dimensions" : [
                      [ "InstanceId" ],
                      [ "AutoScalingGroupName" ],
                      []
                    ]
                  },
                  "logs" : {
                    "logs_collected" : {
                      "windows_events" : {
                        "collect_list" : [
                          {
                            "event_name" : "Application",
                            "event_levels" : [ "ERROR", "WARNING", "INFORMATION" ],
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Management/{instance_id}/ApplicationEventLog",
                            "event_format" : "text"
                          },
                          {
                            "event_name" : "System",
                            "event_levels" : [ "ERROR", "WARNING", "INFORMATION" ],
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Management/{instance_id}/SystemEventLog",
                            "event_format" : "text"
                          },
                          {
                            "event_name" : "Security",
                            "event_levels" : [ "ERROR", "WARNING", "INFORMATION" ],
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Management/{instance_id}/SecurityEventLog",
                            "event_format" : "text"
                          }
                        ]
                      },
                      "files" : {
                        "collect_list" : [
                          {
                            "file_path" : "C:\\Program Files\\Amazon\\CloudWatchAgent\\Logs\\amazon-cloudwatch-agent.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Management/{instance_id}/amazon-cloudwatch-agent.log",
                            "timezone" : "UTC"
                          },
                          {
                            "file_path" : "C:\\Program Files\\Amazon\\Ec2ConfigService\\Logs\\EC2ConfigLog.txt",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Management/{instance_id}/EC2ConfigLog.txt",
                            "timezone" : "UTC"
                          },
                          {
                            "file_path" : "C:\\cfn\\log\\cfn-init.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Management/{instance_id}/cfn-init.log",
                            "timestamp_format" : "%Y-%m-%d %H:%M:%S",
                            "timezone" : "Local"
                          },
                          {
                            "file_path" : "C:\\cfn\\log\\cfn-init-cmd.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Management/{instance_id}/cfn-init-cmd.log",
                            "timestamp_format" : "%Y-%m-%d %H:%M:%S",
                            "timezone" : "Local"
                          },
                          {
                            "file_path" : "C:\\cfn\\log\\cfn-hup.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Management/{instance_id}/cfn-hup.log",
                            "timestamp_format" : "%Y-%m-%d %H:%M:%S",
                            "timezone" : "Local"
                          },
                          {
                            "file_path" : "C:\\inetpub\\logs\\LogFiles\\W3SVC1\\*.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Management/{instance_id}/IISLogs",
                            "timezone" : "UTC"
                          }
                        ]
                      }
                    }
                  }
                }
          commands:
            01-start-cloudwatch-agent:
              command: powershell.exe -Command ".\amazon-cloudwatch-agent-ctl.ps1 -a fetch-config -m ec2 -c file:C:\ProgramData\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent.json -s"
              cwd: C:\Program Files\Amazon\AmazonCloudWatchAgent
              ignoreErrors: false
          services:
            windows:
              AmazonCloudWatchAgent:
                enabled: true
                ensureRunning: true
                files:
                  - C:\ProgramData\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent.json
        ConfigureHostName:
          commands:
            01-configure-hostname:
              command: !Sub powershell.exe -Command "Rename-Computer -NewName ${HostName} -Restart"
              waitAfterCompletion: forever
        JoinDomain:
          files:
            C:\cfn\scripts\Join-Domain.ps1:
              source: !Sub
                - https://${ScriptsBucket}.${s3}.amazonaws.com/Windows/Join-Domain.ps1
                - ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
          commands:
            01-join-domain:
              command: !Sub
                - powershell.exe -Command "C:\cfn\scripts\Join-Domain.ps1
                  -DomainName ${VPCDirectoryDomain}
                  -PasswordSecretId ${EnvironmentName}-${UtilityName}-AdminPassword"
                - VPCDirectoryDomain: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCDirectoryDomain
              ignoreErrors: false
              waitAfterCompletion: forever
        InstallManagementTools:
          commands:
            01-install-rsat-ad-tools:
              command: powershell.exe -Command "Install-WindowsFeature RSAT-AD-Tools -IncludeAllSubFeature"
              waitAfterCompletion: 0
            02-install-rsat-dns-server:
              command: powershell.exe -Command "Install-WindowsFeature RSAT-DNS-Server -IncludeAllSubFeature"
              waitAfterCompletion: 0
        ConfigureADGroups:
          files:
            C:\cfn\scripts\Configure-ADGroups.ps1:
              source: !Sub
                - https://${ScriptsBucket}.${s3}.amazonaws.com/ActiveDirectory/Configure-ADGroups.ps1
                - ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
            C:\cfn\conf\StandardGroups.csv:
              source: !Sub
                - https://${ConfigurationsBucket}.${s3}.amazonaws.com/DirectoryService/StandardGroups.csv
                - ConfigurationsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
            C:\cfn\conf\CustomGroups.csv:
              source: !Sub
                - https://${ConfigurationsBucket}.${s3}.amazonaws.com/DirectoryService/CustomGroups.csv
                - ConfigurationsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
          commands:
            01-configure-standard-adgroups:
              command: !Sub
                - powershell.exe -Command "C:\cfn\scripts\Configure-ADGroups.ps1
                  -DomainName ${VPCDirectoryDomain}
                  -PasswordSecretId ${EnvironmentName}-${UtilityName}-AdminPassword
                  -GroupsPath C:\cfn\conf\StandardGroups.csv
                  -DirectoryService"
                - VPCDirectoryDomain: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCDirectoryDomain
              waitAfterCompletion: 0
            02-configure-custom-adgroups:
              command: !Sub
                - powershell.exe -Command "C:\cfn\scripts\Configure-ADGroups.ps1
                  -DomainName ${VPCDirectoryDomain}
                  -PasswordSecretId ${EnvironmentName}-${UtilityName}-AdminPassword
                  -GroupsPath C:\cfn\conf\CustomGroups.csv
                  -DirectoryService"
                - VPCDirectoryDomain: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCDirectoryDomain
              waitAfterCompletion: 0
        ConfigureADUsers:
          files:
            C:\cfn\scripts\Configure-ADUsers.ps1:
              source: !Sub
                - https://${ScriptsBucket}.${s3}.amazonaws.com/ActiveDirectory/Configure-ADUsers.ps1
                - ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
            C:\cfn\conf\StandardUsers.csv:
              source: !Sub
                - https://${ConfigurationsBucket}.${s3}.amazonaws.com/DirectoryService/StandardUsers.csv
                - ConfigurationsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
            C:\cfn\conf\CustomUsers.csv:
              source: !Sub
                - https://${ConfigurationsBucket}.${s3}.amazonaws.com/DirectoryService/CustomUsers.csv
                - ConfigurationsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
          commands:
            01-configure-standard-adusers:
              command: !Sub
                - powershell.exe -Command "C:\cfn\scripts\Configure-ADUsers.ps1
                  -DomainName ${VPCDirectoryDomain}
                  -PasswordSecretId ${EnvironmentName}-${UtilityName}-AdminPassword
                  -EncryptionKeySecretId ${EnvironmentName}-${UtilityName}-EncryptionKey
                  -UsersPath C:\cfn\conf\StandardUsers.csv
                  -DirectoryService"
                - VPCDirectoryDomain: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCDirectoryDomain
              waitAfterCompletion: 0
            02-configure-custom-adusers:
              command: !Sub
                - powershell.exe -Command "C:\cfn\scripts\Configure-ADUsers.ps1
                  -DomainName ${VPCDirectoryDomain}
                  -PasswordSecretId ${EnvironmentName}-${UtilityName}-AdminPassword
                  -EncryptionKeySecretId ${EnvironmentName}-${UtilityName}-EncryptionKey
                  -UsersPath C:\cfn\conf\CustomUsers.csv
                  -DirectoryService"
                - VPCDirectoryDomain: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCDirectoryDomain
              waitAfterCompletion: 0
        ConfigureRemoteDesktopUsers:
          files:
            C:\cfn\scripts\Configure-RemoteDesktopUsers.ps1:
              source: !Sub
                - https://${ScriptsBucket}.${s3}.amazonaws.com/Windows/Configure-RemoteDesktopUsers.ps1
                - ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
            C:\cfn\conf\StandardRemoteDesktopUsers.csv:
              source: !Sub
                - https://${ConfigurationsBucket}.${s3}.amazonaws.com/DirectoryService/StandardRemoteDesktopUsers.csv
                - ConfigurationsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
            C:\cfn\conf\CustomRemoteDesktopUsers.csv:
              source: !Sub
                - https://${ConfigurationsBucket}.${s3}.amazonaws.com/DirectoryService/CustomRemoteDesktopUsers.csv
                - ConfigurationsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
          commands:
            01-configure-standard-remotedesktopusers:
              command: powershell.exe -Command "C:\cfn\scripts\Configure-RemoteDesktopUsers.ps1
                -RemoteDesktopUsers C:\cfn\conf\StandardRemoteDesktopUsers.csv"
              ignoreErrors: false
              waitAfterCompletion: 0
            02-configure-custom-remotedesktopusers:
              command: powershell.exe -Command "C:\cfn\scripts\Configure-RemoteDesktopUsers.ps1
                -RemoteDesktopUsers C:\cfn\conf\CustomRemoteDesktopUsers.csv"
              ignoreErrors: false
              waitAfterCompletion: 0
        ConfigurePowerShellProfile:
          files:
            C:\cfn\scripts\Configure-UserPowerShellProfile.ps1:
              source: !Sub
                - https://${ScriptsBucket}.${s3}.amazonaws.com/Windows/Configure-UserPowerShellProfile.ps1
                - ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
          commands:
            01-configure-userpowershellprofile:
              command: !Sub powershell.exe -Command "C:\cfn\scripts\Configure-UserPowerShellProfile.ps1
                -UserName Admin"
              waitAfterCompletion: 0
        ConfigureWindowsTaskBar:
          files:
            C:\cfn\scripts\Configure-WindowsTaskBar.ps1:
              source: !Sub
                - https://${ScriptsBucket}.${s3}.amazonaws.com/Windows/Configure-WindowsTaskBar.ps1
                - ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
          commands:
            01-configure-windowstaskbar:
              command: powershell.exe -Command "C:\cfn\scripts\Configure-WindowsTaskBar.ps1"
              ignoreErrors: true
              waitAfterCompletion: 0
        SignalCloudFormation:
          commands:
            01-signal-success:
              command: powershell.exe -Command "Send-CloudFormationSuccess"
              waitAfterCompletion: 0
    Properties:
      ImageId: !Ref WindowsImage
      InstanceType: !FindInMap [ InstanceTypeMap, Management, !Ref EnvironmentType ]
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyName
      Monitoring: true
      NetworkInterfaces:
        - Description: !Sub ${EnvironmentName}-${UtilityName}-NetworkInterface-eth0
          DeviceIndex: 0
          SubnetId: !ImportValue
            Fn::Sub: ${VPCStackName}-IdentitySubnetA
          GroupSet:
            - !Ref ManagementInstanceSecurityGroup
          DeleteOnTermination: true
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 32
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${UtilityName}-ManagementInstance
#        - Key: HostName
#          Value: !Ref HostName
      UserData:
        Fn::Base64: !Sub |
          <script>
          cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource ManagementInstance --region ${AWS::Region}
          </script>
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
    DependsOn: VPCDHCPOptionsAssociation
  # Do not use the HostName Tag on any Instances along with explicitly defined HostNameRecordSets as you see here
  # If a HostName tag exists, the PrivateRecordSet Function will attempt to manage Private DNS Records, resulting in a conflict
  PrivateHostNameRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PrivateHostedZone
      Comment: !Sub Private DNS HostName for ${UtilityName} ManagementInstance
      Name: !Sub
        - ${HostName}.${VPCPrivateDomain}.
        - VPCPrivateDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPrivateDomain
      Type: A
      TTL: 900
      ResourceRecords:
        - !GetAtt ManagementInstance.PrivateIp
  PrivateServiceNameRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PrivateHostedZone
      Comment: !Sub Private DNS ServiceName for ${UtilityName} ManagementInstance
      Name: !Sub
        - directory-management.${VPCPrivateDomain}.
        - VPCPrivateDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPrivateDomain
      Type: CNAME
      TTL: 900
      ResourceRecords:
        - !Sub
          - ${HostName}.${VPCPrivateDomain}
          - VPCPrivateDomain: !ImportValue
              Fn::Sub: ${VPCStackName}-VPCPrivateDomain
Outputs:
  Directory:
    Description: The Directory
    Value: !Ref MicrosoftAD
    Export:
      Name: !Sub ${AWS::StackName}-Directory
  DirectoryName:
    Description: The Directory Name (DNS)
    Value: !ImportValue
      Fn::Sub: ${VPCStackName}-VPCDirectoryDomain
    Export:
      Name: !Sub ${AWS::StackName}-DirectoryName
  DirectoryShortName:
    Description: The Directory Short Name (NetBIOS)
    Value: !ImportValue
      Fn::Sub: ${VPCStackName}-VPCDirectoryNetBIOSDomain
    Export:
      Name: !Sub ${AWS::StackName}-DirectoryShortName
  DirectoryAlias:
    Description: The Directory Alias
    Value: !GetAtt MicrosoftAD.Alias
    Export:
      Name: !Sub ${AWS::StackName}-DirectoryAlias
  AdministratorSecurityGroup:
    Description: The Administrator SecurityGroup
    Value: !Ref AdministratorSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-AdministratorSecurityGroup
  ManagementInstanceSecurityGroup:
    Description: The ManagementInstance SecurityGroup
    Value: !Ref ManagementInstanceSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-ManagementInstanceSecurityGroup
  PrivateHostName:
    Description: The Private HostName
    Value: !Sub
      - ${HostName}.${VPCPrivateDomain}
      - VPCPrivateDomain: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPrivateDomain
  PrivateServiceName:
    Description: The Private ServiceName
    Value: !Sub
      - directory-management.${VPCPrivateDomain}
      - VPCPrivateDomain: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPrivateDomain
