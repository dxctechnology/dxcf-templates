AWSTemplateFormatVersion: 2010-09-09
Description: Utility-OpenVPNAS Template.
  This adds OpenVPN Access Server Remote-User VPN capacity to a VPC. OpenVPN Access Server is the supported version of OpenVPN, available as a set of
  Marketplace AMIs. This Template allows section of the OpenVPN AccessServer 2 (free), 10, 25 or 50-user Marketplace AMIs. This template currently is not HA,
  due to limitations on what can be configured within the OpenVPNAS Marketplace AMI.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - DirectoryStackName
          - VPCStackName
          - MarketplaceAMIFunctionsStackName
          - BucketsStackName
          - TopicsStackName
          - CodesStackName
      - Label:
          default: Resource Dependencies
        Parameters:
          - KeyName
      - Label:
          default: System Configuration
        Parameters:
          - CompanyName
          - SystemName
      - Label:
          default: Environment Configuration
        Parameters:
          - AccountName
          - EnvironmentName
          - EnvironmentType
      - Label:
          default: Utility Configuration
        Parameters:
          - UtilityName
          - UtilityDomain
          - UtilityVersion
          - UtilityLicense
          - UtilityAdministratorUserName
          - UtilityAdministratorPassword
          - UtilityLDAPBindCN
          - UtilityLDAPBindPassword
          - RestoreVersion
          - LogRetention
      - Label:
          default: Directory Configuration
        Parameters:
          - DirectoryAdministratorUserName
          - DirectoryAdministratorPassword
      - Label:
          default: Security Configuration
        Parameters:
          - UserNetworks
          - UserNetworkDescriptions
          - AdministratorNetworks
          - AdministratorNetworkDescriptions
    ParameterLabels:
      DirectoryStackName:
        default: Directory Stack Name
      VPCStackName:
        default: VPC Stack Name
      MarketplaceAMIFunctionsStackName:
        default: MarketplaceAMIFunctions Stack Name
      BucketsStackName:
        default: Buckets Stack Name
      TopicsStackName:
        default: Topics Stack Name
      CodesStackName:
        default: Codes Stack Name
      KeyName:
        default: Key Name
      CompanyName:
        default: Company Name
      SystemName:
        default: System Name
      AccountName:
        default: Account Name
      EnvironmentName:
        default: Environment Name
      EnvironmentType:
        default: Environment Type
      UtilityName:
        default: Utility Name
      UtilityDomain:
        default: Utility Domain
      UtilityVersion:
        default: Utility Version
      UtilityLicense:
        default: Utility License
      UtilityAdministratorUserName:
        default: Utility Administrator UserName
      UtilityAdministratorPassword:
        default: Utility Administrator Password
      UtilityLDAPBindCN:
        default: Utility LDAP Bind Common Name
      UtilityLDAPBindPassword:
        default: Utility LDAP Bind Password
      RestoreVersion:
        default: Restore Version
      LogRetention:
        default: Log Retention
      DirectoryAdministratorUserName:
        default: Directory Administrator User Name
      DirectoryAdministratorPassword:
        default: Directory Administrator Password
      UserNetworks:
        default: User Networks
      UserNetworkDescriptions:
        default: User Network Descriptions
      AdministratorNetworks:
        default: Administrator Networks
      AdministratorNetworkDescriptions:
        default: Administrator Network Descriptions
Parameters:
  DirectoryStackName:
    Description: Name of the CloudFormation Stack containing the Directory Management Workstation (DirectoryService) or DomainControllers (ActiveDirectory)
    Type: String
    MaxLength: 64
    Default: ''
    AllowedPattern: (^$|^[A-Z][a-zA-Z0-9]*-(ActiveDirectory|DirectoryService)$)
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  VPCStackName:
    Description: Name of the CloudFormation Stack containing the VPC
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Production-VPC
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  MarketplaceAMIFunctionsStackName:
    Description: Name of the CloudFormation Stack containing the Marketplace AMI Functions
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: MarketplaceAMIFunctions
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  BucketsStackName:
    Description: Name of the CloudFormation Stack containing Buckets
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Buckets
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  TopicsStackName:
    Description: Name of the CloudFormation Stack containing Topics
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Topics
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  CodesStackName:
    Description: Name of the CloudFormation Stack containing the Codes Resources
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Codes
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  KeyName:
    Description: Name of an existing KeyPair to enable SSH access to the Instances
    Type: AWS::EC2::KeyPair::KeyName
    MaxLength: 32
    Default: administrator
    AllowedPattern: (^$|^[_a-zA-Z0-9]*$)
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  CompanyName:
    Description: Name of the Company associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: DXC
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  SystemName:
    Description: Name of the System associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: Prototype
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  AccountName:
    Description: Name of the Account associated with the Stack
    Type: String
    Default: Production
    AllowedValues:
      - Production
      - Staging
      - UAT
      - QA
      - Testing
      - Development
      - Build
      - Core
      - Recovery
      - Log
      - Identity
      - Management
      - Jumpstart
      - Organization
    ConstraintDescription: must be Production, Staging, UAT, QA, Testing, Development, Build, Core, Recovery, Log, Identity, Management, Jumpstart or Organization.
  EnvironmentName:
    Description: Name of the Environment associated with the Stack
    Type: String
    Default: Production
    AllowedValues:
      - Production
      - Staging
      - UAT
      - QA
      - Testing
      - Development
      - Build
      - Core
      - Recovery
      - Log
      - Identity
      - Management
      - Organization
    ConstraintDescription: must be Production, Staging, UAT, QA, Testing, Development, Build, Core, Recovery, Log, Identity, Management or Organization.
  EnvironmentType:
    Description: Type of the Environment to build. Used to select size-related options in Mappings
    Type: String
    Default: micro
    AllowedValues:
      - micro
      - small
      - medium
      - large
      - xlarge
    ConstraintDescription: must be micro, small, medium, large or xlarge.
  UtilityName:
    Description: Name of the Utility associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: OpenVPNAS
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  UtilityDomain:
    Description: DNS Name of the Utility associated with the Stack
    Type: String
    MaxLength: 16
    Default: vpn
    AllowedPattern: ^[a-z][-a-z0-9]*$
    ConstraintDescription: must begin with a lower case letter and contain only lower case letters, numbers and dashes.
  UtilityVersion:
    Description: OpenVPN Access Server Version. Used to select a specific OpenVPN Access Server version if non-blank
    Type: String
    Default: ''
    AllowedPattern: (^$|^[2-9]\.[0-9]\.[0-9]$)
    ConstraintDescription: must be a version of the form x.y.z.
  UtilityLicense:
    Description: OpenVPN Access Server License. Used to select the OpenVPN Access Server AMI, which limits the number of Users
    Type: String
    Default: OpenVPNAS2
    AllowedValues:
      - OpenVPNAS2
      - OpenVPNAS5
      - OpenVPNAS10
      - OpenVPNAS25
      - OpenVPNAS50
      - OpenVPNAS100
    ConstraintDescription: must be OpenVPNAS2, OpenVPNAS5, OpenVPNAS10, OpenVPNAS25, OpenVPNAS50 or OpenVPNAS100.
  UtilityAdministratorUserName:
    Description: OpenVPN Administrator User Name
    Type: String
    Default: openvpn
    MinLength: 6
    MaxLength: 32
    AllowedValues:
      - openvpn
    ConstraintDescription: must be openvpn.
  UtilityAdministratorPassword:
    Description: OpenVPN Administrator Password
    Type: String
    NoEcho: true
    MinLength: 16
    MaxLength: 32
    AllowedPattern: ^[-a-zA-Z0-9]*$
    ConstraintDescription: must contain alphanumeric characters and dashes.
  UtilityLDAPBindCN:
    Description: LDAP Bind Common Name
    Type: String
    Default: OpenVPN Server
    MinLength: 6
    MaxLength: 32
    AllowedValues:
      - OpenVPN Server
    ConstraintDescription:  must be OpenVPN Server.
  UtilityLDAPBindPassword:
    Description: LDAP Bind Common Name Password
    Type: String
    NoEcho: true
    MinLength: 16
    MaxLength: 32
    AllowedPattern: ^[-a-zA-Z0-9]*$
    ConstraintDescription: must contain alphanumeric characters and dashes.
  RestoreVersion:
    Description: Version of OpenVPNAS Backup to restore (if non-blank)
    Type: String
    MaxLength: 32
    Default: ''
    AllowedPattern: (^$|^[-a-zA-Z0-9]*$)
    ConstraintDescription: must contain alphanumeric characters and dashes, or be blank.
  LogRetention:
    Description: Number of days to retain CloudWatch Log Events
    Type: Number
    Default: 14
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
    ConstraintDescription: must be 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827 or 3653.
  DirectoryAdministratorUserName:
    Description: Directory Administrator User Name, must be able to join this computer to the Domain
    Type: String
    Default: Admin
    MinLength: 4
    MaxLength: 32
    AllowedValues:
      - Admin
    ConstraintDescription: must be Admin.
  DirectoryAdministratorPassword:
    Description: Directory Administrator Password (Optional - if blank, do not attempt to join the domain)
    Type: String
    NoEcho: true
    MaxLength: 32
    AllowedPattern: (^$|^[-a-zA-Z0-9]{12,32}$)
    ConstraintDescription: must contain alphanumeric characters and dashes.
  UserNetworks:
    Description: Networks that can use the Utility
    Type: String
    Default: 0.0.0.0/0,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 8 values, each an IP CIDR range of the form x.x.x.x/x or '-'.
  UserNetworkDescriptions:
    Description: Descriptions of networks that can use the Utility
    Type: String
    Default: Anywhere,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 8 values, each a short text description or '-'.
  AdministratorNetworks:
    Description: Networks that can administer the Utility
    Type: String
    Default: -,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 8 values, each an IP CIDR range of the form x.x.x.x/x or '-'.
  AdministratorNetworkDescriptions:
    Description: Descriptions of networks that can administer the Utility
    Type: String
    Default: -,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 8 values, each a short text description or '-'.
Mappings:
  RegionNameMap:
    us-east-1:
      Name: Virginia
      Code: ue1
    us-east-2:
      Name: Ohio
      Code: ue2
    us-west-1:
      Name: California
      Code: uw1
    us-west-2:
      Name: Oregon
      Code: uw2
    ap-east-1:
      Name: HongKong
      Code: ae1
    ap-south-1:
      Name: Mumbai
      Code: ad1
    ap-northeast-2:
      Name: Seoul
      Code: an2
    ap-southeast-1:
      Name: Singapore
      Code: as1
    ap-southeast-2:
      Name: Sydney
      Code: as2
    ap-northeast-1:
      Name: Tokyo
      Code: an1
    ca-central-1:
      Name: Canada
      Code: cc1
    eu-central-1:
      Name: Frankfurt
      Code: ec1
    eu-west-1:
      Name: Ireland
      Code: ew1
    eu-west-2:
      Name: London
      Code: ew2
    eu-west-3:
      Name: Paris
      Code: ew3
    eu-north-1:
      Name: Stockholm
      Code: en1
    me-south-1:
      Name: Bahrain
      Code: ms1
    sa-east-1:
      Name: SaoPaulo
      Code: se1
  InstanceTypeMap:
    OpenVPNAS:
      micro: t2.micro
      small: t2.small
      medium: t2.medium
      large: c4.large
      xlarge: c4.xlarge
Conditions:
  ConfigureSingleAccount: !Equals [ !Ref AccountName, Jumpstart ]
  ConfigureGlobal: !Equals [ !Ref 'AWS::Region', us-east-1 ]
  ConfigureDirectoryIntegration: !Not [ !Equals [ !Ref DirectoryStackName, '' ]]
  ConfigureActiveDirectoryIntegration: !Equals [ !Select [ 1, !Split [ '-', !Ref DirectoryStackName ]], 'ActiveDirectory' ]
  ConfigureKey: !Not [ !Equals [ !Ref KeyName, '' ]]
  ConfigureSSMAgent: !Not [ !Equals [ !Ref UtilityVersion, '2.6.1' ]]
  ConfigureRestore: !Not [ !Equals [ !Ref RestoreVersion, '' ]]
  ConfigureDirectoryJoin: !Not [ !Equals [ !Ref DirectoryAdministratorPassword, '' ]]
  ConfigureUserNetwork0: !Not [ !Equals [ !Select [ 0, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork1: !Not [ !Equals [ !Select [ 1, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork2: !Not [ !Equals [ !Select [ 2, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork3: !Not [ !Equals [ !Select [ 3, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork4: !Not [ !Equals [ !Select [ 4, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork5: !Not [ !Equals [ !Select [ 5, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork6: !Not [ !Equals [ !Select [ 6, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork7: !Not [ !Equals [ !Select [ 7, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureAdministratorNetwork0: !Not [ !Equals [ !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork1: !Not [ !Equals [ !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork2: !Not [ !Equals [ !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork3: !Not [ !Equals [ !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork4: !Not [ !Equals [ !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork5: !Not [ !Equals [ !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork6: !Not [ !Equals [ !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork7: !Not [ !Equals [ !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: DownloadScriptFromS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${ScriptsBucket}/Linux/*
                    - ScriptsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  - !Sub
                    - arn:aws:s3:::${ScriptsBucket}/OpenVPNAS/*
                    - ScriptsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ScriptsBucket
        - PolicyName: DownloadConfigurationFromS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${ConfigurationsBucket}/Linux/*
                    - ConfigurationsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
                  - !Sub
                    - arn:aws:s3:::${ConfigurationsBucket}/OpenVPNAS/*
                    - ConfigurationsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
        - PolicyName: BackupInS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub
                    - arn:aws:s3:::${BackupsBucket}/OpenVPNAS
                    - BackupsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-BackupsBucket
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${BackupsBucket}/OpenVPNAS/*
                    - BackupsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-BackupsBucket
  LogGroupName:
    Type: Custom::LogGroupName
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${CodesStackName}-LogGroupNameFunctionArn
      CompanyName: !Ref CompanyName
      SystemName: !Ref SystemName
      ApplicationName: !Ref UtilityName
      EnvironmentName: !If
        - ConfigureSingleAccount
        - !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
        - !Ref 'AWS::NoValue'
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LogGroupName
      RetentionInDays: !Ref LogRetention
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub
        - ${VPCName}-${UtilityName}-InstanceSecurityGroup
        - VPCName: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCNetwork
          Description: VPC (ICMP)
        - !If
          - ConfigureUserNetwork0
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 0, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 0, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-TCP)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork0
          - IpProtocol: udp
            FromPort: 1194
            ToPort: 1194
            CidrIp: !Select [ 0, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-UDP)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork1
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 1, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork1
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 1, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-TCP)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork1
          - IpProtocol: udp
            FromPort: 1194
            ToPort: 1194
            CidrIp: !Select [ 1, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-UDP)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork2
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 2, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork2
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 2, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-TCP)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork2
          - IpProtocol: udp
            FromPort: 1194
            ToPort: 1194
            CidrIp: !Select [ 2, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-UDP)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork3
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 3, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork3
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 3, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-TCP)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork3
          - IpProtocol: udp
            FromPort: 1194
            ToPort: 1194
            CidrIp: !Select [ 3, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-UDP)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork4
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 4, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork4
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 4, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-TCP)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork4
          - IpProtocol: udp
            FromPort: 1194
            ToPort: 1194
            CidrIp: !Select [ 4, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-UDP)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork5
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 5, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork5
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 5, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-TCP)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork5
          - IpProtocol: udp
            FromPort: 1194
            ToPort: 1194
            CidrIp: !Select [ 5, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-UDP)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork6
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 6, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork6
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 6, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-TCP)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork6
          - IpProtocol: udp
            FromPort: 1194
            ToPort: 1194
            CidrIp: !Select [ 6, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-UDP)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork7
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 7, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork7
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 7, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-TCP)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork7
          - IpProtocol: udp
            FromPort: 1194
            ToPort: 1194
            CidrIp: !Select [ 7, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-UDP)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: 943
            ToPort: 943
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Console)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-TCP)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: udp
            FromPort: 1194
            ToPort: 1194
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-UDP)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: 943
            ToPort: 943
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Console)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-TCP)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: udp
            FromPort: 1194
            ToPort: 1194
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-UDP)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: 943
            ToPort: 943
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Console)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-TCP)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: udp
            FromPort: 1194
            ToPort: 1194
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-UDP)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: 943
            ToPort: 943
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Console)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-TCP)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: udp
            FromPort: 1194
            ToPort: 1194
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-UDP)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: tcp
            FromPort: 943
            ToPort: 943
            CidrIp: !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Console)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-TCP)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: udp
            FromPort: 1194
            ToPort: 1194
            CidrIp: !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-UDP)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: tcp
            FromPort: 943
            ToPort: 943
            CidrIp: !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Console)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-TCP)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: udp
            FromPort: 1194
            ToPort: 1194
            CidrIp: !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-UDP)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: tcp
            FromPort: 943
            ToPort: 943
            CidrIp: !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Console)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-TCP)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: udp
            FromPort: 1194
            ToPort: 1194
            CidrIp: !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-UDP)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: tcp
            FromPort: 943
            ToPort: 943
            CidrIp: !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Console)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-TCP)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: udp
            FromPort: 1194
            ToPort: 1194
            CidrIp: !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (VPN-UDP)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub
            - ${VPCName}-${UtilityName}-InstanceSecurityGroup
            - VPCName: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
  HostName:
    Type: Custom::HostName
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${IdentifierFunctionsStackName}-HostNameFunctionArn
      CompanyName: !Ref CompanyName
      LocationName: !Ref AWS::Region
      EnvironmentName: !ImportValue
        Fn::Sub: ${VPCStackName}-VPCName
      ApplicationName: !Ref UtilityName
      InstanceNumber: 01
  OpenVPNASImage:
    Type: Custom::OpenVPNASImage
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${MarketplaceAMIFunctionsStackName}-OpenVPNASImageFunctionArn
      Region: !Ref AWS::Region
      License: !Ref UtilityLicense
      Version: !Ref UtilityVersion
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref Role
  Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Credentials:
          type: S3
          roleName: !Ref Role
          buckets:
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ScriptsBucket
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
      AWS::CloudFormation::Init:
        configSets:
          All:
            - UpgradeOS
            - ConfigureOS
            - ConfigureCFN
            - !If [ ConfigureSSMAgent, InstallSSMAgent, 'AWS::NoValue' ]
            - InstallCloudWatchAgent
            - ConfigureCloudWatchAgent
            - ConfigureHostName
            - !If [ ConfigureRestore, RestoreOpenVPNAS, ConfigureOpenVPNAS ]
            - ConfigureOpenVPNASBackup
        UpgradeOS:
          commands:
            01-apt-update:
              command: apt-get update -y
              ignoreErrors: false
            02-apt-upgrade:
              command: apt-get upgrade -y
              ignoreErrors: false
        ConfigureOS:
          files:
            /etc/profile.d/local.sh:
              content: |
                alias lsa='ls -lAF'
                alias ip4='ip addr | grep " inet "'
              mode: '000644'
              owner: root
              group: root
        ConfigureCFN:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --configsets All --stack ${AWS::StackName} --resource Instance --region ${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /lib/systemd/system/cfn-hup.service:
              content: !Sub |
                [Unit]
                Description=Amazon CloudFormation HUP Daemon

                [Service]
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always

                [Install]
                WantedBy=multi-user.target
          commands:
            01-enable-cfn-hup:
              command: systemctl enable cfn-hup.service
            02-start-cfn-hup:
              command: systemctl start cfn-hup.service
        # The need for this is going away, no longer needed as of 2.6.1, so we need to remove this in a few months
        InstallSSMAgent:
          files:
            /var/tmp/amazon-ssm-agent.deb:
              source: https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/debian_amd64/amazon-ssm-agent.deb
          commands:
            01-install-ssm-agent:
              command: echo apt install -y /var/tmp/amazon-ssm-agent.deb
              ignoreErrors: false
        InstallCloudWatchAgent:
          sources:
            /var/tmp: https://s3.amazonaws.com/amazoncloudwatch-agent/linux/amd64/latest/AmazonCloudWatchAgent.zip
          commands:
            01-install-cloudwatch-agent:
              command: apt install -y /var/tmp/amazon-cloudwatch-agent.deb
              ignoreErrors: false
        ConfigureCloudWatchAgent:
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: !Sub
                - |
                  {
                    "agent" : {
                      "metrics_collection_interval" : 60,
                      "logfile" : "/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log",
                      "debug" : false
                    },
                    "metrics" : {
                      "namespace" : "${SystemName}/${VPCName}-${UtilityName}",
                      "metrics_collected" : {
                        "mem" : {
                          "measurement" : [
                            { "name" : "mem_used_percent", "rename" : "MemoryUsedPercent" }
                          ]
                        },
                        "swap" : {
                          "measurement" : [
                            { "name" : "swap_used_percent", "rename" : "SwapUsedPercent" }
                          ]
                        },
                        "disk" : {
                          "resources" : [
                            "*"
                          ],
                          "measurement" : [
                            { "name" : "used_percent", "rename" : "DiskUsedPercent" }
                          ],
                          "ignore_file_system_types": [
                            "rootfs",
                            "sysfs",
                            "tmpfs",
                            "devtmpfs"
                          ]
                        }
                      },
                      "append_dimensions" : {
                        "InstanceId" : "${!aws:InstanceId}",
                        "AutoScalingGroupName" : "${!aws:AutoScalingGroupName}"
                      },
                      "aggregation_dimensions" : [
                        [ "InstanceId" ],
                        [ "InstanceId", "path" ],
                        [ "AutoScalingGroupName" ]
                      ]
                    },
                    "logs" : {
                      "logs_collected" : {
                        "files" : {
                          "collect_list" : [
                            {
                              "file_path" : "/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "VPN/{instance_id}/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log"
                            },
                            {
                              "file_path" : "/var/log/cloud-init.log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "VPN/{instance_id}/var/log/cloud-init.log",
                              "timestamp_format" : "%b %d %H:%M:%S"
                            },
                            {
                              "file_path" : "/var/log/cloud-init-output.log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "VPN/{instance_id}/var/log/cloud-init-output.log"
                            },
                            {
                              "file_path" : "/var/log/cfn-init.log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "VPN/{instance_id}/var/log/cfn-init.log",
                              "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                            },
                            {
                              "file_path" : "/var/log/cfn-init-cmd.log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "VPN/{instance_id}/var/log/cfn-init-cmd.log",
                              "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                            },
                            {
                              "file_path" : "/var/log/cfn-hup.log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "VPN/{instance_id}/var/log/cfn-hup.log",
                              "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                            },
                            {
                              "file_path" : "/var/log/syslog",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "VPN/{instance_id}/var/log/syslog",
                              "timestamp_format" : "%b %d %H:%M:%S"
                            },
                            {
                              "file_path" : "/var/log/auth.log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "VPN/{instance_id}/var/log/auth.log",
                              "timestamp_format" : "%b %d %H:%M:%S"
                            },
                            {
                              "file_path" : "/var/log/dpkg.log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "VPN/{instance_id}/var/log/dpkg.log"
                            },
                            {
                              "file_path" : "/var/log/apt/term.log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "VPN/{instance_id}/var/log/apt/term.log"
                            },
                            {
                              "file_path" : "/var/log/openvpnas.log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "VPN/{instance_id}/var/log/openvpnas.log"
                            }
                          ]
                        }
                      }
                    }
                  }
                - VPCName: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCName
              mode: '000644'
              owner: root
              group: root
          commands:
            01-enable-amazon-cloudwatch-agent:
              command: systemctl enable amazon-cloudwatch-agent.service
            02-start-amazon-cloudwatch-agent:
              command: systemctl start amazon-cloudwatch-agent.service
        ConfigureHostName:
          files:
            /root/bin/configure-hostname:
              source: !Sub
                - https://${ScriptsBucket}.${s3}.amazonaws.com/Linux/configure-hostname
                - ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
          commands:
            01-configure-hostname:
              command: !Sub
                - /root/bin/configure-hostname -n -h ${HostName} -d ${VPCPrivateDomain}
                - VPCPrivateDomain: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCPrivateDomain
              ignoreErrors: false
        ConfigureOpenVPNAS:
          files:
            /root/bin/configure-openvpnas:
              source: !Sub
                - https://${ScriptsBucket}.${s3}.amazonaws.com/OpenVPNAS/configure-openvpnas
                - ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
            /root/conf/standard-groups.dat:
              source: !Sub
                - https://${ConfigurationsBucket}.${s3}.amazonaws.com/OpenVPNAS/${VPCName}-StandardGroups.dat
                - ConfigurationsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
                  VPCName: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCName
              authentication: S3Credentials
              mode: '000600'
              owner: root
              group: root
            /root/conf/custom-groups.dat:
              source: !Sub
                - https://${ConfigurationsBucket}.${s3}.amazonaws.com/OpenVPNAS/${VPCName}-CustomGroups.dat
                - ConfigurationsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
                  VPCName: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCName
              authentication: S3Credentials
              mode: '000600'
              owner: root
              group: root
            /root/conf/standard-users.dat:
              source: !Sub
                - https://${ConfigurationsBucket}.${s3}.amazonaws.com/OpenVPNAS/${VPCName}-StandardUsers.dat
                - ConfigurationsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
                  VPCName: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCName
              authentication: S3Credentials
              mode: '000600'
              owner: root
              group: root
            /root/conf/custom-users.dat:
              source: !Sub
                - https://${ConfigurationsBucket}.${s3}.amazonaws.com/OpenVPNAS/${VPCName}-CustomUsers.dat
                - ConfigurationsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
                  VPCName: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCName
              authentication: S3Credentials
              mode: '000600'
              owner: root
              group: root
          commands:
            01-configure-openvpnas:
              command: !Sub
                - /root/bin/configure-openvpnas -n -a local
                  -h ${UtilityDomain} -d ${VPCPublicDomain}
                  -u ${UtilityAdministratorUserName} -p ${UtilityAdministratorPassword}
                  -B ${UtilityLDAPBindCN} -P ${UtilityLDAPBindPassword}
                - VPCPublicDomain: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCPublicDomain
              ignoreErrors: false
        RestoreOpenVPNAS:
          files:
            /root/bin/restore-openvpnas:
              source: !Sub
                - https://${ScriptsBucket}.${s3}.amazonaws.com/OpenVPNAS/restore-openvpnas
                - ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
          commands:
            01-restore-openvpnas:
              command: !Sub
                - /root/bin/restore-openvpnas -n -b ${BackupsBucket} -f OpenVPNAS -S ${HostName} -V ${RestoreVersion}
                - BackupsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-BackupsBucket
              ignoreErrors: false
        ConfigureOpenVPNASBackup:
          files:
            /root/bin/backup-openvpnas:
              source: !Sub
                - https://${ScriptsBucket}.${s3}.amazonaws.com/OpenVPNAS/backup-openvpnas
                - ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
            /etc/cron.d/backup-openvpnas:
              content: !Sub
                - |
                  */15 * * * * root /root/bin/backup-openvpnas -b ${BackupsBucket} -f OpenVPNAS -S ${HostName}
                - BackupsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-BackupsBucket
              mode: '000700'
              owner: root
              group: root
    Properties:
      ImageId: !Ref OpenVPNASImage
      InstanceType: !FindInMap [ InstanceTypeMap, OpenVPNAS, !Ref EnvironmentType ]
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !If [ ConfigureKey, !Ref KeyName, !Ref 'AWS::NoValue' ]
      Monitoring: true
      NetworkInterfaces:
        - Description: !Sub
            - ${VPCName}-${UtilityName}-NetworkInterface-eth0
            - VPCName: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
          DeviceIndex: 0
          SubnetId: !ImportValue
            Fn::Sub: ${VPCStackName}-Public1SubnetA
          GroupSet:
            - !Ref InstanceSecurityGroup
            - !If
                - ConfigureDirectoryIntegration
                - !ImportValue
                    Fn::Sub: ${DirectoryStackName}-AdministratorSecurityGroup
                - !Ref 'AWS::NoValue'
            - !If
                - ConfigureActiveDirectoryIntegration
                - !ImportValue
                    Fn::Sub: ${DirectoryStackName}-DomainMemberSecurityGroup
                - !Ref 'AWS::NoValue'
          DeleteOnTermination: true
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: 8
            DeleteOnTermination: true
        - DeviceName: /dev/sdb
          Ebs:
            VolumeType: gp2
            VolumeSize: 8
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${VPCName}-${UtilityName}-Instance
            - VPCName: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
        - Key: HostName
          Value: !Ref HostName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > >(tee /var/log/user-data.log | logger -t user-data) 2>&1

          # Install missing AWS tools and make them run from a consistent location
          apt-get update
          apt-get install -y python-pip
          pip install awscli
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          mkdir -p /opt/aws/bin
          ln -s /usr/local/bin/cfn-hup /opt/aws/bin/cfn-hup
          ln -s /usr/local/bin/cfn-init /opt/aws/bin/cfn-init
          ln -s /usr/local/bin/cfn-signal /opt/aws/bin/cfn-signal
          ln -s /usr/local/bin/cfn-elect-cmd-leader /opt/aws/bin/cfn-elect-cmd-leader
          ln -s /usr/local/bin/cfn-get-metadata /opt/aws/bin/cfn-get-metadata
          ln -s /usr/local/bin/cfn-send-cmd-event /opt/aws/bin/cfn-send-cmd-event
          ln -s /usr/local/bin/cfn-send-cmd-result /opt/aws/bin/cfn-send-cmd-result

          /opt/aws/bin/cfn-init --verbose --configsets All --stack ${AWS::StackName} --resource Instance --region ${AWS::Region}
          /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource Instance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref Instance
  PrivateHostNameRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PrivateHostedZone
      Comment: !Sub Private DNS HostName for ${UtilityName} Instance
      Name: !Sub
        - ${HostName}.${VPCPrivateDomain}.
        - VPCPrivateDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPrivateDomain
      Type: A
      TTL: 900
      ResourceRecords:
        - !GetAtt Instance.PrivateIp
  PrivateServiceNameRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PrivateHostedZone
      Comment: !Sub Private DNS ServiceName for ${UtilityName}
      Name: !Sub
        - ${UtilityDomain}.${VPCPrivateDomain}.
        - VPCPrivateDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPrivateDomain
      Type: CNAME
      TTL: 900
      ResourceRecords:
        - !Sub
          - ${HostName}.${VPCPrivateDomain}
          - VPCPrivateDomain: !ImportValue
              Fn::Sub: ${VPCStackName}-VPCPrivateDomain
  PublicHostNameRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PublicHostedZone
      Comment: !Sub Public DNS HostName for ${UtilityName} Instance
      Name: !Sub
        - ${HostName}.${VPCPublicDomain}.
        - VPCPublicDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPublicDomain
      Type: A
      TTL: 900
      ResourceRecords:
        - !Ref EIP
  PublicServiceNameRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PublicHostedZone
      Comment: !Sub Public DNS ServiceName for ${UtilityName}
      Name: !Sub
        - ${UtilityDomain}.${VPCPublicDomain}.
        - VPCPublicDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPublicDomain
      Type: CNAME
      TTL: 900
      ResourceRecords:
        - !Sub
          - ${HostName}.${VPCPublicDomain}
          - VPCPublicDomain: !ImportValue
              Fn::Sub: ${VPCStackName}-VPCPublicDomain
  CPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: The average CPU Utilization is greater than 90% over 3 consecutive minutes
      AlarmActions:
        - !ImportValue
          Fn::Sub: ${TopicsStackName}-AlarmsTopic
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 90
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref Instance
  MemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: The used memory is greater than 90% over 3 consecutive minutes
      AlarmActions:
        - !ImportValue
          Fn::Sub: ${TopicsStackName}-AlarmsTopic
      Namespace: !Sub
        - ${SystemName}/${VPCName}-${UtilityName}
        - VPCName: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
      MetricName: MemoryUsedPercent
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 90
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref Instance
  Disk1Alarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: The disk / percent used is more than than 90% over 3 consecutive minutes
      AlarmActions:
        - !ImportValue
          Fn::Sub: ${TopicsStackName}-AlarmsTopic
      Namespace: !Sub
        - ${SystemName}/${VPCName}-${UtilityName}
        - VPCName: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
      MetricName: DiskUsedPercent
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 90
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref Instance
        - Name: path
          Value: /
  Disk2Alarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: The disk /usr/local/openvpn_as/etc percent used is more than than 90% over 3 consecutive minutes
      AlarmActions:
        - !ImportValue
          Fn::Sub: ${TopicsStackName}-AlarmsTopic
      Namespace: !Sub
        - ${SystemName}/${VPCName}-${UtilityName}
        - VPCName: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
      MetricName: DiskUsedPercent
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 90
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref Instance
        - Name: path
          Value: /usr/local/openvpn_as/etc
  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub
        - ${VPCName}-${UtilityName}-${RegionName}
        - VPCName: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
          RegionName: !FindInMap [ RegionNameMap, !Ref 'AWS::Region', Name ]
      DashboardBody: !Sub
        - |
          {
            "widgets" : [ {
              "type" : "text",
              "x" : 0,
              "y" : 0,
              "width" : 24,
              "height" : 1,
              "properties" : {
                "markdown" : "# ${VPCName}-${UtilityName}"
              }
            },
            {
              "type" : "text",
              "x" : 0,
              "y" : 1,
              "width" : 24,
              "height" : 1,
              "properties" : {
                "markdown" : "## Instance"
              }
            },
            {
              "type" : "text",
              "x" : 0,
              "y" : 2,
              "width" : 24,
              "height" : 1,
              "properties" : {
                "markdown" : "### Graphs"
              }
            },
            {
              "type" : "metric",
              "x" : 0,
              "y" : 3,
              "width" : 6,
              "height" : 9,
              "properties" : {
                "title" : "Instance: CPU",
                "view" : "timeSeries",
                "stacked" : false,
                "period" : 60,
                "region" : "${AWS::Region}",
                "metrics" : [
                  [ "AWS/EC2", "CPUUtilization", "InstanceId", "${Instance}", { "label" : "CPU Utilization" } ],
                  [ "AWS/EC2", "CPUSurplusCreditBalance", "InstanceId", "${Instance}", { "label" : "CPU Surplus Credit Balance", "yAxis" : "right" } ]
                ],
                "yAxis" : {
                  "left" : { "min" : 0, "max" : 100 }
                }
              }
            },
            {
              "type" : "metric",
              "x" : 6,
              "y" : 3,
              "width" : 6,
              "height" : 9,
              "properties" : {
                "title" : "Instance: Memory",
                "view" : "timeSeries",
                "stacked" : false,
                "period" : 60,
                "region" : "${AWS::Region}",
                "metrics" : [
                  [ "${SystemName}/${VPCName}-${UtilityName}", "MemoryUsedPercent", "InstanceId", "${Instance}", { "label" : "Memory Used %" } ],
                  [ "${SystemName}/${VPCName}-${UtilityName}", "SwapUsedPercent", "InstanceId", "${Instance}", { "label" : "Swap Used %" } ]
                ],
                "yAxis" : {
                  "left" : { "min" : 0, "max" : 100 }
                }
              }
            },
            {
              "type" : "metric",
              "x" : 12,
              "y" : 3,
              "width" : 6,
              "height" : 9,
              "properties" : {
                "title" : "Instance: Disk",
                "view" : "timeSeries",
                "stacked" : false,
                "period" : 60,
                "region" : "${AWS::Region}",
                "metrics" : [
                  [ "${SystemName}/${VPCName}-${UtilityName}", "DiskUsedPercent", "InstanceId", "${Instance}", "path", "/", { "label" : "Disk Used % (/)" } ],
                  [ "${SystemName}/${VPCName}-${UtilityName}", "DiskUsedPercent", "InstanceId", "${Instance}", "path", "/var/www", { "label" : "Disk Used % (/var/www)" } ]
                ],
                "yAxis" : {
                  "left" : { "min" : 0, "max" : 100 }
                }
              }
            },
            {
              "type" : "metric",
              "x" : 18,
              "y" : 3,
              "width" : 6,
              "height" : 9,
              "properties" : {
                "title" : "Instance: Network",
                "view" : "timeSeries",
                "stacked" : false,
                "period" : 60,
                "region" : "${AWS::Region}",
                "metrics" : [
                  [ "AWS/EC2", "NetworkOut", "InstanceId", "${Instance}", { "label" : "Network Out" } ],
                  [ "AWS/EC2", "NetworkIn", "InstanceId", "${Instance}", { "label" : "Network In" } ]
                ]
              }
            },
            {
              "type" : "text",
              "x" : 0,
              "y" : 12,
              "width" : 24,
              "height" : 1,
              "properties" : {
                "markdown" : "### Alarms"
              }
            },
            {
              "type" : "metric",
              "x" : 0,
              "y" : 13,
              "width" : 3,
              "height" : 6,
              "properties" : {
                "title" : "CPU Alarm",
                "view" : "timeSeries",
                "stacked" : false,
                "annotations" : {
                  "alarms" : [ "${CPUAlarm.Arn}" ]
                }
              }
            },
            {
              "type" : "metric",
              "x" : 3,
              "y" : 13,
              "width" : 3,
              "height" : 6,
              "properties" : {
                "title" : "Memory Alarm",
                "view" : "timeSeries",
                "stacked" : false,
                "annotations" : {
                  "alarms" : [ "${MemoryAlarm.Arn}" ]
                }
              }
            },
            {
              "type" : "metric",
              "x" : 6,
              "y" : 13,
              "width" : 3,
              "height" : 6,
              "properties" : {
                "title" : "Disk (/) Alarm",
                "view" : "timeSeries",
                "stacked" : false,
                "annotations" : {
                  "alarms" : [ "${Disk1Alarm.Arn}" ]
                }
              }
            },
            {
              "type" : "metric",
              "x" : 9,
              "y" : 13,
              "width" : 3,
              "height" : 6,
              "properties" : {
                "title" : "Disk (/usr/local/openvpn_as/etc) Alarm",
                "view" : "timeSeries",
                "stacked" : false,
                "annotations" : {
                  "alarms" : [ "${Disk2Alarm.Arn}" ]
                }
              }
            } ]
          }
        - VPCName: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
Outputs:
  InstanceSecurityGroup:
    Description: The Instance SecurityGroup
    Value: !Ref InstanceSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-InstanceSecurityGroup
  EIP:
    Description: The Public Address of the OpenVPN Instance
    Value: !Ref EIP
  PublicHostName:
    Description: The Public DNS HostName of the OpenVPN Instance
    Value: !Sub
      - ${HostName}.${VPCPublicDomain}
      - VPCPublicDomain: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPublicDomain
  PublicServiceName:
    Description: The Public DNS ServiceName of the OpenVPN Instance
    Value: !Sub
      - ${UtilityDomain}.${VPCPublicDomain}
      - VPCPublicDomain: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPublicDomain
  UserWebsiteURL:
    Description: The User Website URL
    Value: !Sub
      - https://${UtilityDomain}.${VPCPublicDomain}/
      - VPCPublicDomain: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPublicDomain
  AdministratorWebsiteURL:
    Description: The Administration Website URL
    Value: !Sub
      - https://${UtilityDomain}.${VPCPublicDomain}:943/admin/
      - VPCPublicDomain: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPublicDomain
