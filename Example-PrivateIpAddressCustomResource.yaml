AWSTemplateFormatVersion: 2010-09-09
Description: Example-PrivateIpAddressCustomResource Template.
  This demonstrates how to dynamically get a PrivateIpAddress at a relative offset within a VPC Subnet.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: VPC Configuration
        Parameters:
          - EnvironmentName
          - Network
          - Offset
    ParameterLabels:
      EnvironmentName:
        default: Environment Name
      Network:
        default: Network
      Offset:
        default: Offset
Parameters:
  EnvironmentName:
    Description: Name of the Environment
    Type: String
    Default: Production
    AllowedValues:
      - Production
      - Staging
      - UAT
      - Testing
      - Development
      - Build
      - Core
      - Recovery
      - Log
      - Identity
      - Management
      - Organization
    ConstraintDescription: must be Production, Staging, UAT, Testing, Development, Build, Core, Recovery, Log, Identity, Management or Organization.
  Network:
    Description: VPC Network
    Type: String
    Default: 172.21.0.0/21
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-7]))$
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/16-27.
  Offset:
    Description: Offset of IP Address within Subnet
    Type: String
    Default: 4
    AllowedPattern: ^(0|[1-9][0-9]*)$
    ConstraintDescription: must be a positive integer.
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref Network
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPC
        - Key: Environment
          Value: !Ref EnvironmentName
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt VPC.CidrBlock, 32, 4 ]]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnetA
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 16, !Cidr [ !GetAtt VPC.CidrBlock, 32, 4 ]]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnetB
  PrivateIpAddressA:
    Type: Custom::PrivateIpAddress
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:PrivateIpAddress
      SubnetId: !Ref PublicSubnetA
      Offset: !Ref Offset
  PrivateIpAddressB:
    Type: Custom::PrivateIpAddress
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:PrivateIpAddress
      SubnetId: !Ref PublicSubnetB
      Offset: !Ref Offset
Outputs:
  PrivateIpAddressA:
    Description: The PrivateIpAddressA Address
    Value: !Ref PrivateIpAddressA
  PrivateIpAddressB:
    Description: The PrivateIpAddressB Address
    Value: !Ref PrivateIpAddressB
