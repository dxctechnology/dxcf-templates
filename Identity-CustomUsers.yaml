AWSTemplateFormatVersion: 2010-09-09
Description: Identity-CustomUsers Template.
  This creates Custom IAM Users. Any Users specific to an implementation of this Framework should go here, including all human Users.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - CustomGroupsStackName
          - GroupsStackName
          - CustomManagedPoliciesStackName
          - ManagedPoliciesStackName
          - BaselineStackName
      - Label:
          default: User Configuration
        Parameters:
          - ApplicationAdministratorPassword
          - TableauAdministratorPassword
          - MCrawfordPassword
          - VMatukumalliPassword
          - SRamalingamPassword
          - RRoslonPassword
          - SBachhuPassword
          - RKalakotlaPassword
          - AMohammedPassword
          - DLondonPassword
          - ASchickPassword
      - Label:
          default: Systems Manager Configuration
        Parameters:
          - SaveGeneratedPasswords
      - Label:
          default: Topic Configuration
        Parameters:
          - TopicPrefix
      - Label:
          default: Subscription Configuration
        Parameters:
          - PasswordsTopicPhoneEndpoint
    ParameterLabels:
      CustomGroupsStackName:
        default: Custom Groups Stack Name
      GroupsStackName:
        default: Groups Stack Name
      CustomManagedPoliciesStackName:
        default: Custom Managed Policies Stack Name
      ManagedPoliciesStackName:
        default: Managed Policies Stack Name
      BaselineStackName:
        default: Baseline Stack Name
      ApplicationAdministratorPassword:
        default: ApplicationAdministrator Password
      TableauAdministratorPassword:
        default: TableauAdministrator Password
      MCrawfordPassword:
        default: MCrawford Password
      VMatukumalliPassword:
        default: VMatukumalli Password
      SRamalingamPassword:
        default: SRamalingam Password
      RRoslonPassword:
        default: RRoslon Password
      SBachhuPassword:
        default: SBachhu Password
      RKalakotla:
        default: RKalakotla Password
      AMohammedPassword:
        default: AMohammed Password
      DLondonPassword:
        default: DLondon Password
      ASchickPassword:
        default: ASchick Password
      SaveGeneratedPasswords:
        default: User Password
      TopicPrefix:
        default: Topic Prefix
      PasswordsTopicPhoneEndpoint:
        default: Passwords Topic Phone Endpoint
Parameters:
  CustomGroupsStackName:
    Description: Name of the CloudFormation Stack containing Custom Groups
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: CustomGroups
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  GroupsStackName:
    Description: Name of the CloudFormation Stack containing Groups
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Groups
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  CustomManagedPoliciesStackName:
    Description: Name of the CloudFormation Stack containing Custom ManagedPolicies
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: CustomManagedPolicies
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  ManagedPoliciesStackName:
    Description: Name of the CloudFormation Stack containing ManagedPolicies
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: ManagedPolicies
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  BaselineStackName:
    Description: Name of the CloudFormation Stack containing the Baseline Resources
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Baseline
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  ApplicationAdministratorPassword:
    Description: Optional password for the applicationadministrator User
    Type: String
    NoEcho: true
    Default: ''
    AllowedPattern: (^$|(?=^.{16,64}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])^.*)
    ConstraintDescription: must be 16 to 64 alphanumeric characters, with no symbols and at least one uppercase, lowercase and digit, if specified.
  TableauAdministratorPassword:
    Description: Optional password for the tableauadministrator User
    Type: String
    NoEcho: true
    Default: ''
    AllowedPattern: (^$|(?=^.{16,64}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])^.*)
    ConstraintDescription: must be 16 to 64 alphanumeric characters, with no symbols and at least one uppercase, lowercase and digit, if specified.
  MCrawfordPassword:
    Description: Optional password for the mcrawford User
    Type: String
    NoEcho: true
    Default: ''
    AllowedPattern: (^$|(?=^.{16,64}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])^.*)
    ConstraintDescription: must be 16 to 64 alphanumeric characters, with no symbols and at least one uppercase, lowercase and digit, if specified.
  VMatukumalliPassword:
    Description: Optional password for the vmatukumalli User
    Type: String
    NoEcho: true
    Default: ''
    AllowedPattern: (^$|(?=^.{16,64}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])^.*)
    ConstraintDescription: must be 16 to 64 alphanumeric characters, with no symbols and at least one uppercase, lowercase and digit, if specified.
  SRamalingamPassword:
    Description: Optional password for the sramalingam User
    Type: String
    NoEcho: true
    Default: ''
    AllowedPattern: (^$|(?=^.{16,64}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])^.*)
    ConstraintDescription: must be 16 to 64 alphanumeric characters, with no symbols and at least one uppercase, lowercase and digit, if specified.
  RRoslonPassword:
    Description: Optional password for the rroslon User
    Type: String
    NoEcho: true
    Default: ''
    AllowedPattern: (^$|(?=^.{16,64}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])^.*)
    ConstraintDescription: must be 16 to 64 alphanumeric characters, with no symbols and at least one uppercase, lowercase and digit, if specified.
  SBachhuPassword:
    Description: Optional password for the sbachhu User
    Type: String
    NoEcho: true
    Default: ''
    AllowedPattern: (^$|(?=^.{16,64}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])^.*)
    ConstraintDescription: must be 16 to 64 alphanumeric characters, with no symbols and at least one uppercase, lowercase and digit, if specified.
  RKalakotlaPassword:
    Description: Optional password for the rkalakotla User
    Type: String
    NoEcho: true
    Default: ''
    AllowedPattern: (^$|(?=^.{16,64}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])^.*)
    ConstraintDescription: must be 16 to 64 alphanumeric characters, with no symbols and at least one uppercase, lowercase and digit, if specified.
  AMohammedPassword:
    Description: Optional password for the amohammed User
    Type: String
    NoEcho: true
    Default: ''
    AllowedPattern: (^$|(?=^.{16,64}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])^.*)
    ConstraintDescription: must be 16 to 64 alphanumeric characters, with no symbols and at least one uppercase, lowercase and digit, if specified.
  DLondonPassword:
    Description: Optional password for the dlondon User
    Type: String
    NoEcho: true
    Default: ''
    AllowedPattern: (^$|(?=^.{16,64}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])^.*)
    ConstraintDescription: must be 16 to 64 alphanumeric characters, with no symbols and at least one uppercase, lowercase and digit, if specified.
  ASchickPassword:
    Description: Optional password for the aschick User
    Type: String
    NoEcho: true
    Default: ''
    AllowedPattern: (^$|(?=^.{16,64}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])^.*)
    ConstraintDescription: must be 16 to 64 alphanumeric characters, with no symbols and at least one uppercase, lowercase and digit, if specified.
  SaveGeneratedPasswords:
    Description: Seve generated initial passwords in the Systems Manager Parameter Store as Secure Strings
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    ConstraintDescription: must be either true or false.
  TopicPrefix:
    Description: Optional Prefix for Topic Display Name
    Type: String
    Default: ''
    AllowedPattern: (^$|^[A-Z][A-Z0-9]{1,4}$)
    ConstraintDescription: must begin with an upper-case letter and consist of 1 to 4 additional upper-case letters or digits, if specified.
  PasswordsTopicPhoneEndpoint:
    Description: Phone Endpoint for Passwords Topics. If specified, generated passwords will be sent
    Type: String
    Default: ''
    AllowedPattern: (^$|^\+\d{11,12}$)
    ConstraintDescription: must be a valid phone number.
Rules:
  ValidateRegion:
    Assertions:
      - Assert: !Equals [ !Ref 'AWS::Region', us-east-1 ]
        AssertDescription: This Template can only be used in Region us-east-1.
Conditions:
  ConfigureSecureParameters: !Equals [ !Ref SaveGeneratedPasswords, true ]
  ConfigureTopicPrefix: !Not [ !Equals [ !Ref TopicPrefix, '' ]]
  ConfigureNotifications: !Not [ !Equals [ !Ref PasswordsTopicPhoneEndpoint, '' ]]
  GenerateApplicationAdministratorPassword: !Equals [ !Ref ApplicationAdministratorPassword, '' ]
  SaveApplicationAdministratorPassword: !And [ !Condition GenerateApplicationAdministratorPassword, !Condition ConfigureSecureParameters ]
  SendApplicationAdministratorPassword: !And [ !Condition GenerateApplicationAdministratorPassword, !Condition ConfigureNotifications ]
  GenerateTableauAdministratorPassword: !Equals [ !Ref TableauAdministratorPassword, '' ]
  SaveTableauAdministratorPassword: !And [ !Condition GenerateTableauAdministratorPassword, !Condition ConfigureSecureParameters ]
  SendTableauAdministratorPassword: !And [ !Condition GenerateTableauAdministratorPassword, !Condition ConfigureNotifications ]
  GenerateMCrawfordPassword: !Equals [ !Ref MCrawfordPassword, '' ]
  SaveMCrawfordPassword: !And [ !Condition GenerateMCrawfordPassword, !Condition ConfigureSecureParameters ]
  SendMCrawfordPassword: !And [ !Condition GenerateMCrawfordPassword, !Condition ConfigureNotifications ]
  GenerateVMatukumalliPassword: !Equals [ !Ref VMatukumalliPassword, '' ]
  SaveVMatukumalliPassword: !And [ !Condition GenerateVMatukumalliPassword, !Condition ConfigureSecureParameters ]
  SendVMatukumalliPassword: !And [ !Condition GenerateVMatukumalliPassword, !Condition ConfigureNotifications ]
  GenerateSRamalingamPassword: !Equals [ !Ref SRamalingamPassword, '' ]
  SaveSRamalingamPassword: !And [ !Condition GenerateSRamalingamPassword, !Condition ConfigureSecureParameters ]
  SendSRamalingamPassword: !And [ !Condition GenerateSRamalingamPassword, !Condition ConfigureNotifications ]
  GenerateRRoslonPassword: !Equals [ !Ref RRoslonPassword, '' ]
  SaveRRoslonPassword: !And [ !Condition GenerateRRoslonPassword, !Condition ConfigureSecureParameters ]
  SendRRoslonPassword: !And [ !Condition GenerateRRoslonPassword, !Condition ConfigureNotifications ]
  GenerateSBachhuPassword: !Equals [ !Ref SBachhuPassword, '' ]
  SaveSBachhuPassword: !And [ !Condition GenerateSBachhuPassword, !Condition ConfigureSecureParameters ]
  SendSBachhuPassword: !And [ !Condition GenerateSBachhuPassword, !Condition ConfigureNotifications ]
  GenerateRKalakotlaPassword: !Equals [ !Ref RKalakotlaPassword, '' ]
  SaveRKalakotlaPassword: !And [ !Condition GenerateRKalakotlaPassword, !Condition ConfigureSecureParameters ]
  SendRKalakotlaPassword: !And [ !Condition GenerateRKalakotlaPassword, !Condition ConfigureNotifications ]
  GenerateAMohammedPassword: !Equals [ !Ref AMohammedPassword, '' ]
  SaveAMohammedPassword: !And [ !Condition GenerateAMohammedPassword, !Condition ConfigureSecureParameters ]
  SendAMohammedPassword: !And [ !Condition GenerateAMohammedPassword, !Condition ConfigureNotifications ]
  GenerateDLondonPassword: !Equals [ !Ref DLondonPassword, '' ]
  SaveDLondonPassword: !And [ !Condition GenerateDLondonPassword, !Condition ConfigureSecureParameters ]
  SendDLondonPassword: !And [ !Condition GenerateDLondonPassword, !Condition ConfigureNotifications ]
  GenerateASchickPassword: !Equals [ !Ref ASchickPassword, '' ]
  SaveASchickPassword: !And [ !Condition GenerateASchickPassword, !Condition ConfigureSecureParameters ]
  SendASchickPassword: !And [ !Condition GenerateASchickPassword, !Condition ConfigureNotifications ]

Resources:
  PasswordsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !If
        - ConfigureTopicPrefix
        - !Sub ${TopicPrefix} User Passwords
        - User Passwords
    Condition: ConfigureNotifications
  PasswordsTopicPhoneSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref PasswordsTopic
      Protocol: sms
      Endpoint: !Ref PasswordsTopicPhoneEndpoint
    Condition: ConfigureNotifications
  ApplicationAdministratorRandomPassword:
    Type: Custom::RandomPassword
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-RandomPasswordFunctionArn
      ExcludePunctuation: true
    Condition: GenerateApplicationAdministratorPassword
  ApplicationAdministratorUser:
    Type: AWS::IAM::User
    Properties:
      UserName: applicationadministrator
      Path: /
      LoginProfile:
        Password: !If [ GenerateApplicationAdministratorPassword, !GetAtt ApplicationAdministratorRandomPassword.Password, !Ref ApplicationAdministratorPassword ]
        PasswordResetRequired: !If [ GenerateApplicationAdministratorPassword, true, !Ref 'AWS::NoValue' ]
      Groups:
        - !ImportValue
          Fn::Sub: ${CustomGroupsStackName}-ApplicationAdministratorsGroup
  ApplicationAdministratorPasswordSecureParameter:
    Type: Custom::SecureParameter
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-SecureParameterFunctionArn
      Name: ApplicationAdministratorPassword
      Value: !If [ GenerateApplicationAdministratorPassword, !GetAtt ApplicationAdministratorRandomPassword.Password, !Ref 'AWS::NoValue' ]
      AllowedPattern: ^[a-zA-Z0-9]{16,64}$
      Description: Temporary password for the applicationadministrator User
    Condition: SaveApplicationAdministratorPassword
  ApplicationAdministratorPasswordMessage:
    Type: Custom::Message
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-MessageFunctionArn
      TopicArn: !If [ ConfigureNotifications, !Ref PasswordsTopic, !Ref 'AWS::NoValue' ]
      Message: !If [ GenerateApplicationAdministratorPassword, !Sub 'Temporary password for the applicationadministrator User: ${ApplicationAdministratorRandomPassword.Password}', !Ref 'AWS::NoValue' ]
    Condition: SendApplicationAdministratorPassword
  TableauAdministratorRandomPassword:
    Type: Custom::RandomPassword
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-RandomPasswordFunctionArn
      ExcludePunctuation: true
    Condition: GenerateTableauAdministratorPassword
  TableauAdministratorUser:
    Type: AWS::IAM::User
    Properties:
      UserName: tableauadministrator
      Path: /
      LoginProfile:
        Password: !If [ GenerateTableauAdministratorPassword, !GetAtt TableauAdministratorRandomPassword.Password, !Ref TableauAdministratorPassword ]
        PasswordResetRequired: !If [ GenerateTableauAdministratorPassword, true, !Ref 'AWS::NoValue' ]
      Groups:
        - !ImportValue
          Fn::Sub: ${CustomGroupsStackName}-TableauAdministratorsGroup
  TableauAdministratorPasswordSecureParameter:
    Type: Custom::SecureParameter
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-SecureParameterFunctionArn
      Name: TableauAdministratorPassword
      Value: !If [ GenerateTableauAdministratorPassword, !GetAtt TableauAdministratorRandomPassword.Password, !Ref 'AWS::NoValue' ]
      AllowedPattern: ^[a-zA-Z0-9]{16,64}$
      Description: Temporary password for the tableauadministrator User
    Condition: SaveTableauAdministratorPassword
  TableauAdministratorPasswordMessage:
    Type: Custom::Message
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-MessageFunctionArn
      TopicArn: !If [ ConfigureNotifications, !Ref PasswordsTopic, !Ref 'AWS::NoValue' ]
      Message: !If [ GenerateTableauAdministratorPassword, !Sub 'Temporary password for the tableauadministrator User: ${TableauAdministratorRandomPassword.Password}', !Ref 'AWS::NoValue' ]
    Condition: SendTableauAdministratorPassword
  MCrawfordRandomPassword:
    Type: Custom::RandomPassword
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-RandomPasswordFunctionArn
      ExcludePunctuation: true
    Condition: GenerateMCrawfordPassword
  MCrawfordUser:
    Type: AWS::IAM::User
    Properties:
      UserName: mcrawford
      Path: /
      LoginProfile:
        Password: !If [ GenerateMCrawfordPassword, !GetAtt MCrawfordRandomPassword.Password, !Ref MCrawfordPassword ]
        PasswordResetRequired: !If [ GenerateMCrawfordPassword, true, !Ref 'AWS::NoValue' ]
      Groups:
        - !ImportValue
          Fn::Sub: ${GroupsStackName}-AdministratorsGroup
        - !ImportValue
          Fn::Sub: ${GroupsStackName}-BastionAdministratorsGroup
  MCrawfordPasswordSecureParameter:
    Type: Custom::SecureParameter
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-SecureParameterFunctionArn
      Name: MCrawfordPassword
      Value: !If [ GenerateMCrawfordPassword, !GetAtt MCrawfordRandomPassword.Password, !Ref 'AWS::NoValue' ]
      AllowedPattern: ^[a-zA-Z0-9]{16,64}$
      Description: Temporary password for the mcrawford User
    Condition: SaveMCrawfordPassword
  MCrawfordPasswordMessage:
    Type: Custom::Message
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-MessageFunctionArn
      TopicArn: !If [ ConfigureNotifications, !Ref PasswordsTopic, !Ref 'AWS::NoValue' ]
      Message: !If [ GenerateMCrawfordPassword, !Sub 'Temporary password for the mcrawford User: ${MCrawfordRandomPassword.Password}', !Ref 'AWS::NoValue' ]
    Condition: SendMCrawfordPassword
  VMatukumalliRandomPassword:
    Type: Custom::RandomPassword
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-RandomPasswordFunctionArn
      ExcludePunctuation: true
    Condition: GenerateVMatukumalliPassword
  VMatukumalliUser:
    Type: AWS::IAM::User
    Properties:
      UserName: vmatukumalli
      Path: /
      LoginProfile:
        Password: !If [ GenerateVMatukumalliPassword, !GetAtt VMatukumalliRandomPassword.Password, !Ref VMatukumalliPassword ]
        PasswordResetRequired: !If [ GenerateVMatukumalliPassword, true, !Ref 'AWS::NoValue' ]
      Groups:
        - !ImportValue
          Fn::Sub: ${GroupsStackName}-AdministratorsGroup
        - !ImportValue
          Fn::Sub: ${GroupsStackName}-BastionAdministratorsGroup
  VMatukumalliPasswordSecureParameter:
    Type: Custom::SecureParameter
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-SecureParameterFunctionArn
      Name: VMatukumalliPassword
      Value: !If [ GenerateVMatukumalliPassword, !GetAtt VMatukumalliRandomPassword.Password, !Ref 'AWS::NoValue' ]
      AllowedPattern: ^[a-zA-Z0-9]{16,64}$
      Description: Temporary password for the vmatukumalli User
    Condition: SaveVMatukumalliPassword
  VMatukumalliPasswordMessage:
    Type: Custom::Message
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-MessageFunctionArn
      TopicArn: !If [ ConfigureNotifications, !Ref PasswordsTopic, !Ref 'AWS::NoValue' ]
      Message: !If [ GenerateVMatukumalliPassword, !Sub 'Temporary password for the vmatukumalli User: ${VMatukumalliRandomPassword.Password}', !Ref 'AWS::NoValue' ]
    Condition: SendVMatukumalliPassword
  SRamalingamRandomPassword:
    Type: Custom::RandomPassword
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-RandomPasswordFunctionArn
      ExcludePunctuation: true
    Condition: GenerateSRamalingamPassword
  SRamalingamUser:
    Type: AWS::IAM::User
    Properties:
      UserName: sramalingam
      Path: /
      LoginProfile:
        Password: !If [ GenerateSRamalingamPassword, !GetAtt SRamalingamRandomPassword.Password, !Ref SRamalingamPassword ]
        PasswordResetRequired: !If [ GenerateSRamalingamPassword, true, !Ref 'AWS::NoValue' ]
      Groups:
        - !ImportValue
          Fn::Sub: ${GroupsStackName}-AdministratorsGroup
        - !ImportValue
          Fn::Sub: ${GroupsStackName}-BastionAdministratorsGroup
  SRamalingamPasswordSecureParameter:
    Type: Custom::SecureParameter
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-SecureParameterFunctionArn
      Name: SRamalingamPassword
      Value: !If [ GenerateSRamalingamPassword, !GetAtt SRamalingamRandomPassword.Password, !Ref 'AWS::NoValue' ]
      AllowedPattern: ^[a-zA-Z0-9]{16,64}$
      Description: Temporary password for the sramalingam User
    Condition: SaveSRamalingamPassword
  SRamalingamPasswordMessage:
    Type: Custom::Message
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-MessageFunctionArn
      TopicArn: !If [ ConfigureNotifications, !Ref PasswordsTopic, !Ref 'AWS::NoValue' ]
      Message: !If [ GenerateSRamalingamPassword, !Sub 'Temporary password for the sramalingam User: ${SRamalingamRandomPassword.Password}', !Ref 'AWS::NoValue' ]
    Condition: SendSRamalingamPassword
  RRoslonRandomPassword:
    Type: Custom::RandomPassword
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-RandomPasswordFunctionArn
      ExcludePunctuation: true
    Condition: GenerateRRoslonPassword
  RRoslonUser:
    Type: AWS::IAM::User
    Properties:
      UserName: rroslon
      Path: /
      LoginProfile:
        Password: !If [ GenerateRRoslonPassword, !GetAtt RRoslonRandomPassword.Password, !Ref RRoslonPassword ]
        PasswordResetRequired: !If [ GenerateRRoslonPassword, true, !Ref 'AWS::NoValue' ]
      Groups:
        - !ImportValue
          Fn::Sub: ${GroupsStackName}-AdministratorsGroup
        - !ImportValue
          Fn::Sub: ${GroupsStackName}-BastionAdministratorsGroup
  RRoslonPasswordSecureParameter:
    Type: Custom::SecureParameter
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-SecureParameterFunctionArn
      Name: RRoslonPassword
      Value: !If [ GenerateRRoslonPassword, !GetAtt RRoslonRandomPassword.Password, !Ref 'AWS::NoValue' ]
      AllowedPattern: ^[a-zA-Z0-9]{16,64}$
      Description: Temporary password for the rroslon User
    Condition: SaveRRoslonPassword
  RRoslonPasswordMessage:
    Type: Custom::Message
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-MessageFunctionArn
      TopicArn: !If [ ConfigureNotifications, !Ref PasswordsTopic, !Ref 'AWS::NoValue' ]
      Message: !If [ GenerateRRoslonPassword, !Sub 'Temporary password for the rroslon User: ${RRoslonRandomPassword.Password}', !Ref 'AWS::NoValue' ]
    Condition: SendRRoslonPassword
  SBachhuRandomPassword:
    Type: Custom::RandomPassword
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-RandomPasswordFunctionArn
      ExcludePunctuation: true
    Condition: GenerateSBachhuPassword
  SBachhuUser:
    Type: AWS::IAM::User
    Properties:
      UserName: sbachhu
      Path: /
      LoginProfile:
        Password: !If [ GenerateSBachhuPassword, !GetAtt SBachhuRandomPassword.Password, !Ref SBachhuPassword ]
        PasswordResetRequired: !If [ GenerateSBachhuPassword, true, !Ref 'AWS::NoValue' ]
      Groups:
        - !ImportValue
          Fn::Sub: ${GroupsStackName}-AdministratorsGroup
        - !ImportValue
          Fn::Sub: ${GroupsStackName}-BastionAdministratorsGroup
  SBachhuPasswordSecureParameter:
    Type: Custom::SecureParameter
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-SecureParameterFunctionArn
      Name: SBachhuPassword
      Value: !If [ GenerateSBachhuPassword, !GetAtt SBachhuRandomPassword.Password, !Ref 'AWS::NoValue' ]
      AllowedPattern: ^[a-zA-Z0-9]{16,64}$
      Description: Temporary password for the sbachhu User
    Condition: SaveSBachhuPassword
  SBachhuPasswordMessage:
    Type: Custom::Message
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-MessageFunctionArn
      TopicArn: !If [ ConfigureNotifications, !Ref PasswordsTopic, !Ref 'AWS::NoValue' ]
      Message: !If [ GenerateSBachhuPassword, !Sub 'Temporary password for the sbachhu User: ${SBachhuRandomPassword.Password}', !Ref 'AWS::NoValue' ]
    Condition: SendSBachhuPassword
  RKalakotlaRandomPassword:
    Type: Custom::RandomPassword
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-RandomPasswordFunctionArn
      ExcludePunctuation: true
    Condition: GenerateRKalakotlaPassword
  RKalakotlaUser:
    Type: AWS::IAM::User
    Properties:
      UserName: rkalakotla
      Path: /
      LoginProfile:
        Password: !If [ GenerateRKalakotlaPassword, !GetAtt RKalakotlaRandomPassword.Password, !Ref RKalakotlaPassword ]
        PasswordResetRequired: !If [ GenerateRKalakotlaPassword, true, !Ref 'AWS::NoValue' ]
      Groups:
        - !ImportValue
          Fn::Sub: ${GroupsStackName}-AdministratorsGroup
        - !ImportValue
          Fn::Sub: ${GroupsStackName}-BastionAdministratorsGroup
  RKalakotlaPasswordSecureParameter:
    Type: Custom::SecureParameter
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-SecureParameterFunctionArn
      Name: RKalakotlaPassword
      Value: !If [ GenerateRKalakotlaPassword, !GetAtt RKalakotlaRandomPassword.Password, !Ref 'AWS::NoValue' ]
      AllowedPattern: ^[a-zA-Z0-9]{16,64}$
      Description: Temporary password for the rkalakotla User
    Condition: SaveRKalakotlaPassword
  RKalakotlaPasswordMessage:
    Type: Custom::Message
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-MessageFunctionArn
      TopicArn: !If [ ConfigureNotifications, !Ref PasswordsTopic, !Ref 'AWS::NoValue' ]
      Message: !If [ GenerateRKalakotlaPassword, !Sub 'Temporary password for the rkalakotla User: ${RKalakotlaRandomPassword.Password}', !Ref 'AWS::NoValue' ]
    Condition: SendRKalakotlaPassword
  AMohammedRandomPassword:
    Type: Custom::RandomPassword
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-RandomPasswordFunctionArn
      ExcludePunctuation: true
    Condition: GenerateAMohammedPassword
  AMohammedUser:
    Type: AWS::IAM::User
    Properties:
      UserName: amohammed
      Path: /
      LoginProfile:
        Password: !If [ GenerateAMohammedPassword, !GetAtt AMohammedRandomPassword.Password, !Ref AMohammedPassword ]
        PasswordResetRequired: !If [ GenerateAMohammedPassword, true, !Ref 'AWS::NoValue' ]
      Groups:
        - !ImportValue
          Fn::Sub: ${GroupsStackName}-AdministratorsGroup
        - !ImportValue
          Fn::Sub: ${GroupsStackName}-BastionAdministratorsGroup
  AMohammedPasswordSecureParameter:
    Type: Custom::SecureParameter
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-SecureParameterFunctionArn
      Name: AMohammedPassword
      Value: !If [ GenerateAMohammedPassword, !GetAtt AMohammedRandomPassword.Password, !Ref 'AWS::NoValue' ]
      AllowedPattern: ^[a-zA-Z0-9]{16,64}$
      Description: Temporary password for the amohammed User
    Condition: SaveAMohammedPassword
  AMohammedPasswordMessage:
    Type: Custom::Message
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-MessageFunctionArn
      TopicArn: !If [ ConfigureNotifications, !Ref PasswordsTopic, !Ref 'AWS::NoValue' ]
      Message: !If [ GenerateAMohammedPassword, !Sub 'Temporary password for the amohammed User: ${AMohammedRandomPassword.Password}', !Ref 'AWS::NoValue' ]
    Condition: SendAMohammedPassword
  DLondonRandomPassword:
    Type: Custom::RandomPassword
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-RandomPasswordFunctionArn
      ExcludePunctuation: true
    Condition: GenerateDLondonPassword
  DLondonUser:
    Type: AWS::IAM::User
    Properties:
      UserName: dlondon
      Path: /
      LoginProfile:
        Password: !If [ GenerateDLondonPassword, !GetAtt DLondonRandomPassword.Password, !Ref DLondonPassword ]
        PasswordResetRequired: !If [ GenerateDLondonPassword, true, !Ref 'AWS::NoValue' ]
      Groups:
        - !ImportValue
          Fn::Sub: ${GroupsStackName}-ManagersGroup
        - !ImportValue
          Fn::Sub: ${GroupsStackName}-BastionUsersGroup
  DLondonPasswordSecureParameter:
    Type: Custom::SecureParameter
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-SecureParameterFunctionArn
      Name: DLondonPassword
      Value: !If [ GenerateDLondonPassword, !GetAtt DLondonRandomPassword.Password, !Ref 'AWS::NoValue' ]
      AllowedPattern: ^[a-zA-Z0-9]{16,64}$
      Description: Temporary password for the dlondon User
    Condition: SaveDLondonPassword
  DLondonPasswordMessage:
    Type: Custom::Message
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-MessageFunctionArn
      TopicArn: !If [ ConfigureNotifications, !Ref PasswordsTopic, !Ref 'AWS::NoValue' ]
      Message: !If [ GenerateDLondonPassword, !Sub 'Temporary password for the dlondon User: ${DLondonRandomPassword.Password}', !Ref 'AWS::NoValue' ]
    Condition: SendDLondonPassword
  ASchickRandomPassword:
    Type: Custom::RandomPassword
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-RandomPasswordFunctionArn
      ExcludePunctuation: true
    Condition: GenerateASchickPassword
  ASchickUser:
    Type: AWS::IAM::User
    Properties:
      UserName: aschick
      Path: /
      LoginProfile:
        Password: !If [ GenerateASchickPassword, !GetAtt ASchickRandomPassword.Password, !Ref ASchickPassword ]
        PasswordResetRequired: !If [ GenerateASchickPassword, true, !Ref 'AWS::NoValue' ]
      Groups:
        - !ImportValue
          Fn::Sub: ${GroupsStackName}-UsersGroup
        - !ImportValue
          Fn::Sub: ${GroupsStackName}-BastionUsersGroup
  ASchickPasswordSecureParameter:
    Type: Custom::SecureParameter
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-SecureParameterFunctionArn
      Name: ASchickPassword
      Value: !If [ GenerateASchickPassword, !GetAtt ASchickRandomPassword.Password, !Ref 'AWS::NoValue' ]
      AllowedPattern: ^[a-zA-Z0-9]{16,64}$
      Description: Temporary password for the aschick User
    Condition: SaveASchickPassword
  ASchickPasswordMessage:
    Type: Custom::Message
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-MessageFunctionArn
      TopicArn: !If [ ConfigureNotifications, !Ref PasswordsTopic, !Ref 'AWS::NoValue' ]
      Message: !If [ GenerateASchickPassword, !Sub 'Temporary password for the aschick User: ${ASchickRandomPassword.Password}', !Ref 'AWS::NoValue' ]
    Condition: SendASchickPassword
