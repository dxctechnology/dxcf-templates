AWSTemplateFormatVersion: 2010-09-09
Description: Common-CloudWatchEventFunctions Template.
  This creates CloudWatch Event driven Lambda Functions.
  Initially, this contains only a function intended to dynamically created Private Route53 HostNames, based on Tags.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - LayersStackName
          - BucketsStackName
          - TopicsStackName
      - Label:
          default: Function Configuration
        Parameters:
          - PrivateRecordSetFunctionKey
          - PrivateRecordSetFunctionObjectVersion
          - PrivateRecordSetLogRetention
          - PrivateRecordSetPrune
          - PrivateRecordSetTest
    ParameterLabels:
      LayersStackName:
        default: Layers Stack Name
      BucketsStackName:
        default: Buckets Stack Name
      TopicsStackName:
        default: Topics Stack Name
      PrivateRecordSetFunctionKey:
        default: PrivateRecordSet Function S3 Key
      PrivateRecordSetFunctionObjectVersion:
        default: PrivateRecordSet Function S3 Object Version
      PrivateRecordSetLogRetention:
        default: PrivateRecordSet Log Retention
      PrivateRecordSetPrune:
        default: PrivateRecordSet Prune
      PrivateRecordSetTest:
        default: PrivateRecordSet Test
Parameters:
  LayersStackName:
    Description: Name of the CloudFormation Stack containing Layers
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Layers
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  BucketsStackName:
    Description: Name of the CloudFormation Stack containing Buckets
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Buckets
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  TopicsStackName:
    Description: Name of the CloudFormation Stack containing Topics
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Topics
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  PrivateRecordSetFunctionKey:
    Description: Key of Object within the S3 Bucket containing the PrivateRecordSet Lambda Function zipfile
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: PrivateRecordSet.zip
    AllowedPattern: ^[-_.a-zA-Z0-9]*\.zip$
    ConstraintDescription: must be a valid zipfilename, not containing slashes.
  PrivateRecordSetFunctionObjectVersion:
    Description: Version of Object within the S3 Bucket containing the PrivateRecordSet Lambda Function zipfile
    Type: String
    MaxLength: 32
    Default: ''
    ConstraintDescription: must be a valid S3 Object Version.
  PrivateRecordSetLogRetention:
    Description: Number of days to retain CloudWatch Log Events for the PrivateRecordSet Lambda Function
    Type: Number
    Default: 3
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
    ConstraintDescription: 'must be: 1, 3, 5, 7, 14, 30, 60 or 90.'
  PrivateRecordSetPrune:
    Description: Enable RecordSet Pruning for the PrivateRecordSet Lambda Function
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    ConstraintDescription: must be either true or false.
  PrivateRecordSetTest:
    Description: Enable Test Mode for the PrivateRecordSet Lambda Function
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    ConstraintDescription: must be either true or false.
Conditions:
  ConfigurePrivateRecordSetFunctionObjectVersion: !Not [ !Equals [ !Ref PrivateRecordSetFunctionObjectVersion, '' ]]
Resources:
  PrivateRecordSetRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DescribeInstancesPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                Resource: '*'
        - PolicyName: ManageResourceRecordSetsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowGetHostedZoneInfo
                Effect: Allow
                Action:
                  - route53:ListHostedZonesByName
                  - route53:GetHostedZone
                  - route53:ListResourceRecordSets
                  - route53:GetChange
                Resource: '*'
              - Sid: AllowChangeResourceRecordSets
                Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                Resource: '*'
  PrivateRecordSetLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/PrivateRecordSet
      RetentionInDays: !Ref PrivateRecordSetLogRetention
  PrivateRecordSetFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: PrivateRecordSet
      Description: A Lambda function that manages Domain Name RecordSets in a Route53 Private HostedZone.
      Role: !GetAtt PrivateRecordSetRole.Arn
      Runtime: nodejs10.x
      Timeout: 120 # Confirmation can take 30 to 60 seconds
      Handler: PrivateRecordSet.handler
      Code:
        S3Bucket: !ImportValue
          Fn::Sub: ${BucketsStackName}-FunctionsBucket
        S3Key: !Ref PrivateRecordSetFunctionKey
        S3ObjectVersion: !If [ ConfigurePrivateRecordSetFunctionObjectVersion, !Ref PrivateRecordSetFunctionObjectVersion, !Ref 'AWS::NoValue' ]
      Environment:
        Variables:
          PRUNE: !Ref PrivateRecordSetPrune
          TEST: !Ref PrivateRecordSetTest
  PrivateRecordSetRule:
    Type: AWS::Events::Rule
    Properties:
      Name: PrivateRecordSetRule
      Description: Rule to manage Domain Names in a Private HostedZone on Instance Start and Terminate Events.
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - EC2 Instance State-change Notification
        detail:
          state:
            - running
            - stopped
            - terminated
      State: ENABLED
      Targets:
        - Id: PrivateRecordSetFunction
          Arn: !GetAtt PrivateRecordSetFunction.Arn
  PrivateRecordSetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PrivateRecordSetFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt PrivateRecordSetRule.Arn
  PrivateRecordSetErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: The number of ERRORs is greater than 5 over 1 minute
      AlarmActions:
        - !ImportValue
          Fn::Sub: ${TopicsStackName}-AlarmsTopic
      Namespace: AWS/Lambda
      MetricName: Errors
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
Outputs:
  PrivateRecordSetFunctionArn:
    Description: The PrivateRecordSet Lambda Function ARN
    Value: !GetAtt PrivateRecordSetFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-PrivateRecordSetFunctionArn
