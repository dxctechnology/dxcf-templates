AWSTemplateFormatVersion: 2010-09-09
Description: Baseline-Codes Template.
  This creates the DXC Framework Codes Table, then loads it with code data.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - BaselineStackName
      - Label:
          default: Table Configuration
        Parameters:
          - TableName
      - Label:
          default: Function Configuration
        Parameters:
          - CodesLoaderLogRetention
          - AliasNameLogRetention
          - LogGroupNameLogRetention
          - HostNameLogRetention
    ParameterLabels:
      BaselineStackName:
        default: Baseline Stack Name
      TableName:
        default: Table Name
      CodesLoaderLogRetention:
        default: CodesLoader Log Retention
      AliasNameLogRetention:
        default: AliasName Log Retention
      LogGroupNameLogRetention:
        default: LogGroupName Log Retention
      HostNameLogRetention:
        default: HostName Log Retention
Parameters:
  BaselineStackName:
    Description: Name of the CloudFormation Stack containing Baseline Resources
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Baseline
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  TableName:
    Description: Name of the DynamoDB Codes Table
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: Codes
    AllowedPattern: ^Codes$
    ConstraintDescription: must be Codes.
  CodesLoaderLogRetention:
    Description: Number of days to retain CloudWatch Log Events for the CodesLoader Lambda Function
    Type: Number
    Default: 3
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
    ConstraintDescription: must be 1, 3, 5, 7, 14, 30, 60 or 90.
  AliasNameLogRetention:
    Description: Number of days to retain CloudWatch Log Events for the AliasName Lambda Function
    Type: Number
    Default: 3
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
    ConstraintDescription: must be 1, 3, 5, 7, 14, 30, 60 or 90.
  LogGroupNameLogRetention:
    Description: Number of days to retain CloudWatch Log Events for the LogGroupName Lambda Function
    Type: Number
    Default: 3
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
    ConstraintDescription: must be 1, 3, 5, 7, 14, 30, 60 or 90.
  HostNameLogRetention:
    Description: Number of days to retain CloudWatch Log Events for the HostName Lambda Function
    Type: Number
    Default: 3
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
    ConstraintDescription: must be 1, 3, 5, 7, 14, 30, 60 or 90.
Resources:
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Type
          AttributeType: S
        - AttributeName: Name
          AttributeType: S
        - AttributeName: Code
          AttributeType: S
      KeySchema:
        - AttributeName: Type
          KeyType: HASH
        - AttributeName: Name
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: TypeCode
          KeySchema:
            - AttributeName: Type
              KeyType: HASH
            - AttributeName: Code
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
  CodesLoaderRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ManageDynamoDBCodesTable
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowList
                Effect: Allow
                Action:
                  - dynamodb:List*
                Resource: '*'
              - Sid: AllowItemManagement
                Effect: Allow
                Action:
                  - dynamodb:DescribeTable
                  - dynamodb:Get*
                  - dynamodb:Delete*
                  - dynamodb:Update*
                  - dynamodb:PutItem
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}
  CodesLoaderLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/CodesLoader
      RetentionInDays: !Ref CodesLoaderLogRetention
  CodesLoaderFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CodesLoader
      Description: A Lambda function which loads data into the DynamoDB Codes Table, used to construct Identifiers used by the DXC Framework.
      Role: !GetAtt CodesLoaderRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Layers:
        - !ImportValue
            Fn::Sub: ${BaselineStackName}-BaselineLayerVersionArn
      Handler: index.handler
      Code:
        ZipFile: |
          const response = require('cfn-response-promise');

          const AWS = require('aws-sdk');
          AWS.config.apiVersions = {
            dynamodb: '2011-12-05'
          };

          const dynamodb = new AWS.DynamoDB();

          exports.handler = async (event, context) => {
            console.info(`Request body:\n${JSON.stringify(event)}`);

            const tableName = event.ResourceProperties.TableName || 'Codes';

            const codes = event.ResourceProperties.Codes;
            if (! codes) {
              const responseData = {Error: `Codes missing`};
              console.error(`Error: ${responseData.Error}`);
              response.send(event, context, response.FAILED, responseData);
              return;
            }
            console.info(`Companies:\n${JSON.stringify(codes.filter(c => c.Type == 'Company'))}`);
            console.info(`Locations:\n${JSON.stringify(codes.filter(c => c.Type == 'Location'))}`);
            console.info(`Environments:\n${JSON.stringify(codes.filter(c => c.Type == 'Environment'))}`);
            console.info(`Systems:\n${JSON.stringify(codes.filter(c => c.Type == 'System'))}`);
            console.info(`Applications:\n${JSON.stringify(codes.filter(c => c.Type == 'Application'))}`);
            console.info(`Components:\n${JSON.stringify(codes.filter(c => c.Type == 'Component'))}`);

            switch (event.RequestType) {
              case 'Create':
              case 'Update':
                try {
                  console.info('Calling putItem() for all Codes...');
                  const putPromises = [];
                  for (const code of codes) {
                    const params = {
                      TableName: tableName,
                      Item: { 'Type': { S: code.Type },
                              'Name': { S: code.Name },
                              'Code': { S: code.Code }}
                    };
                    putPromises.push(dynamodb.putItem(params).promise());
                  }

                  console.info(`- Waiting for all PutItem calls to finish...`);
                  const results = await Promise.all(putPromises);
                  console.info(`Codes ${(event.RequestType =='Create') ? 'created' : 'updated'}`);
                  await response.send(event, context, response.SUCCESS);
                }
                catch (err) {
                  const responseData = {Error: `PutItem call(s) failed`};
                  console.error(`Error: ${responseData.Error}:\n${err}`);
                  await response.send(event, context, response.FAILED, responseData);
                }
                break;

              case 'Delete':
                await response.send(event, context, response.SUCCESS);
                break;
            }
          };
  CodesLoader:
    Type: Custom::CodesLoader
    Properties:
      ServiceToken: !GetAtt CodesLoaderFunction.Arn
      TableName: !Ref TableName
      Codes:
        - Type: Company
          Name: Demo
          Code: demo
        - Type: Company
          Name: DXC
          Code: dxc
        - Type: Company
          Name: MJCConsulting
          Code: mjc
        - Type: Location
          Name: us-east-1
          Code: ue1
        - Type: Location
          Name: us-east-2
          Code: ue2
        - Type: Location
          Name: us-west-1
          Code: uw1
        - Type: Location
          Name: us-west-2
          Code: uw2
        - Type: Location
          Name: ca-central-1
          Code: cc1
        - Type: Location
          Name: eu-west-1
          Code: ew1
        - Type: Location
          Name: eu-central-1
          Code: ec1
        - Type: Location
          Name: eu-west-2
          Code: ew2
        - Type: Location
          Name: eu-west-3
          Code: ew3
        - Type: Location
          Name: eu-north-1
          Code: en1
        - Type: Location
          Name: ap-southeast-1
          Code: as1
        - Type: Location
          Name: ap-southeast-2
          Code: as2
        - Type: Location
          Name: ap-northeast-2
          Code: an2
        - Type: Location
          Name: ap-northeast-1
          Code: an1
        - Type: Location
          Name: ap-south-1
          Code: ad1
        - Type: Location
          Name: sa-east-1
          Code: se1
        - Type: Location
          Name: Atlanta
          Code: atl
        - Type: Location
          Name: Boston
          Code: bos
        - Type: Location
          Name: Charlotte
          Code: clt
        - Type: Location
          Name: Chicago
          Code: chi
        - Type: Location
          Name: ColoradoSprings
          Code: cos
        - Type: Location
          Name: Dallas
          Code: dfw
        - Type: Location
          Name: Denver
          Code: den
        - Type: Location
          Name: Houston
          Code: hou
        - Type: Location
          Name: KansasCity
          Code: mkc
        - Type: Location
          Name: LasVegas
          Code: las
        - Type: Location
          Name: LosAngeles
          Code: lax
        - Type: Location
          Name: Miami
          Code: mia
        - Type: Location
          Name: Minneapolis
          Code: msp
        - Type: Location
          Name: NewYork
          Code: nyc
        - Type: Location
          Name: Phoenix
          Code: phx
        - Type: Location
          Name: Portland
          Code: pdx
        - Type: Location
          Name: Raleigh
          Code: rdu
        - Type: Location
          Name: SanFrancisco
          Code: sfo
        - Type: Location
          Name: SanJose
          Code: sjc
        - Type: Location
          Name: SantaBarbara
          Code: sba
        - Type: Location
          Name: Seattle
          Code: sea
        - Type: Location
          Name: Tulsa
          Code: tul
        - Type: Location
          Name: Washington
          Code: was
        - Type: Environment
          Name: Audit
          Code: a
        - Type: Environment
          Name: Build
          Code: b
        - Type: Environment
          Name: Core
          Code: c
        - Type: Environment
          Name: Development
          Code: d
        - Type: Environment
          Name: Example
          Code: e
        - Type: Environment
          Name: Identity
          Code: i
        - Type: Environment
          Name: Log
          Code: l
        - Type: Environment
          Name: Management
          Code: m
        - Type: Environment
          Name: Production
          Code: p
        - Type: Environment
          Name: QA
          Code: q
        - Type: Environment
          Name: Recovery
          Code: r
        - Type: Environment
          Name: Staging
          Code: s
        - Type: Environment
          Name: Testing
          Code: t
        - Type: Environment
          Name: UAT
          Code: u
        - Type: System
          Name: Prototype
          Code: proto
        - Type: System
          Name: Analytics
          Code: anal
        - Type: System
          Name: DAP
          Code: dap
        - Type: Application
          Name: Acunetix
          Code: acu
        - Type: Application
          Name: ActiveDirectory
          Code: ad
        - Type: Application
          Name: DirectoryService
          Code: adm
        - Type: Application
          Name: AutoSys
          Code: as
        - Type: Application
          Name: LinuxBastion
          Code: bl
        - Type: Application
          Name: LinuxBastions
          Code: bl
        - Type: Application
          Name: WindowsBastion
          Code: bw
        - Type: Application
          Name: WindowsBastions
          Code: bw
        - Type: Application
          Name: CentralDatabase
          Code: cdb
        - Type: Application
          Name: DeepSecurity
          Code: ds
        - Type: Application
          Name: DataTransfer
          Code: dt
        - Type: Application
          Name: Duo
          Code: duo
        - Type: Application
          Name: Engine
          Code: eng
        - Type: Application
          Name: FederatedSecurity
          Code: fs
        - Type: Application
          Name: SFTP
          Code: ftp
        - Type: Application
          Name: GitHubEnterprise
          Code: git
        - Type: Application
          Name: Hadoop
          Code: had
        - Type: Application
          Name: LegalSolutionsSuite
          Code: lss
        - Type: Application
          Name: LinuxWebServer
          Code: lws
        - Type: Application
          Name: LinuxWebServers
          Code: lwsm
        - Type: Application
          Name: LinuxWebServersNested
          Code: lwsmn
        - Type: Application
          Name: LinuxWebServerNested
          Code: lwsn
        - Type: Application
          Name: Magento
          Code: mag
        - Type: Application
          Name: MongoDB
          Code: mdb
        - Type: Application
          Name: Nessus
          Code: nes
        - Type: Application
          Name: Octopus
          Code: oct
        - Type: Application
          Name: PAX
          Code: pax
        - Type: Application
          Name: RiskMasterAccelerator
          Code: rma
        - Type: Application
          Name: RabbitMQ
          Code: rmq
        - Type: Application
          Name: RStudio
          Code: rs
        - Type: Application
          Name: ServiceDeskPlus
          Code: sdp
        - Type: Application
          Name: SiteScope
          Code: ss
        - Type: Application
          Name: Tableau
          Code: tab
        - Type: Application
          Name: Talend
          Code: tal
        - Type: Application
          Name: TikiWiki
          Code: tw
        - Type: Application
          Name: Vertica
          Code: v
        - Type: Application
          Name: Vormetric
          Code: vor
        - Type: Application
          Name: OpenVPN
          Code: vpn
        - Type: Application
          Name: OpenVPNAS
          Code: vpn
        - Type: Application
          Name: WebSphereMQ
          Code: wmq
        - Type: Application
          Name: WindowsWebServer
          Code: wws
        - Type: Application
          Name: WindowsWebServers
          Code: wwsm
        - Type: Application
          Name: WindowsWebServersNested
          Code: wwsmn
        - Type: Application
          Name: WindowsWebServerNested
          Code: wwsn
        - Type: Component
          Name: Ambari
          Code: a
        - Type: Component
          Name: AccessGateway
          Code: ag
        - Type: Component
          Name: AccessServer
          Code: as
        - Type: Component
          Name: Calculation
          Code: c
        - Type: Component
          Name: Data
          Code: d
        - Type: Component
          Name: Deploy
          Code: d
        - Type: Component
          Name: Database
          Code: db
        - Type: Component
          Name: AuroraDatabase
          Code: dba
        - Type: Component
          Name: MySQLDatabase
          Code: dbm
        - Type: Component
          Name: OracleDatabase
          Code: dbo
        - Type: Component
          Name: PostgreSQLDatabase
          Code: dbp
        - Type: Component
          Name: SQLServerDatabase
          Code: dbs
        - Type: Component
          Name: DomainController
          Code: dc
        - Type: Component
          Name: DataStaging
          Code: ds
        - Type: Component
          Name: DataSecurityManager
          Code: dsm
        - Type: Component
          Name: Enterprise
          Code: e
        - Type: Component
          Name: Executor
          Code: e
        - Type: Component
          Name: SFTP
          Code: ft
        - Type: Component
          Name: Logging
          Code: l
        - Type: Component
          Name: LoadBalancer
          Code: lb
        - Type: Component
          Name: Manager
          Code: m
        - Type: Component
          Name: Master
          Code: m
        - Type: Component
          Name: Monitoring
          Code: m
        - Type: Component
          Name: ManagementConsole
          Code: mc
        - Type: Component
          Name: ManagementWorkstation
          Code: mc
        - Type: Component
          Name: Professional
          Code: p
        - Type: Component
          Name: Publishing
          Code: p
        - Type: Component
          Name: PolicyServer
          Code: ps
        - Type: Component
          Name: Queue
          Code: q
        - Type: Component
          Name: Server
          Code: s
        - Type: Component
          Name: SC
          Code: sc
        - Type: Component
          Name: SecurityServer
          Code: ss
        - Type: Component
          Name: TokenizationServer
          Code: ts
        - Type: Component
          Name: Update
          Code: u
        - Type: Component
          Name: Web
          Code: w
        - Type: Component
          Name: Worker
          Code: w
    DependsOn: Table
  IdentifierRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ReadDynamoDBCodesTable
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowGetItem
                Effect: Allow
                Action:
                  - dynamodb:Get*
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Codes
  AliasNameLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/AliasName
      RetentionInDays: !Ref AliasNameLogRetention
  AliasNameFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AliasName
      Description: A Lambda function which creates an AliasName that conforms to DXC Framework Naming Conventions.
      Role: !GetAtt IdentifierRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Layers:
        - !ImportValue
            Fn::Sub: ${BaselineStackName}-BaselineLayerVersionArn
      Handler: index.handler
      Code:
        ZipFile: |
          const response = require('cfn-response-promise');

          const AWS = require('aws-sdk');
          AWS.config.apiVersions = {
            dynamodb: '2012-08-10'
          };

          const dynamodb = new AWS.DynamoDB();

          const tableName = 'Codes';

          const getCode = async (type, name) => {
            console.log(`- Calling: GetItem for Type ${type}, Name ${name}...`);
            const params = {
              TableName: tableName,
              Key: { Type: { S: type }, Name: { S: name }},
              AttributesToGet: [ 'Code' ]
            };
            const data = await dynamodb.getItem(params).promise();
            if (data.Item && data.Item.Code) {
              return data.Item.Code.S;
            }
            else {
              throw new Error(`Code for Name ${name} of Type ${type} not found`);
            }
          };

          exports.handler = async (event, context) => {
            console.info(`Request body:\n${JSON.stringify(event)}`);

            switch (event.RequestType) {
              case 'Create':
              case 'Update':
                try {
                  const companyName = event.ResourceProperties.CompanyName;
                  const companySegment = (companyName) ? `/${await getCode('Company', companyName)}` : '';

                  const systemName = event.ResourceProperties.SystemName;
                  const systemSegment = (systemName) ? `/${await getCode('System', systemName)}` : '';

                  const serviceName = event.ResourceProperties.ServiceName;
                  const serviceSegment = (serviceName) ? `/${serviceName}` : '';

                  const applicationName = event.ResourceProperties.ApplicationName;
                  const applicationSegment = (applicationName) ? `/${applicationName}` : '';

                  const environmentName = event.ResourceProperties.EnvironmentName;
                  const environmentSegment = (environmentName) ? `/${environmentName}` : '';

                  const aliasname = `${companySegment}${systemSegment}${serviceSegment}${applicationSegment}${environmentSegment}`.substring(1);
                  console.info('AliasName: ' + aliasname);
                  await response.send(event, context, response.SUCCESS, null, aliasname);
                }
                catch (err) {
                  const responseData = {Error: `Could not create AliasName`};
                  console.error(`Error: ${responseData.Error}:\n${err}`);
                  await response.send(event, context, response.FAILED, responseData);
                }
                break;

              case 'Delete':
                await response.send(event, context, response.SUCCESS);
                break;
            }
          };
  LogGroupNameLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/LogGroupName
      RetentionInDays: !Ref LogGroupNameLogRetention
  LogGroupNameFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LogGroupName
      Description: A Lambda function which creates a LogGroupName that conforms to DXC Framework Naming Conventions.
      Role: !GetAtt IdentifierRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Layers:
        - !ImportValue
            Fn::Sub: ${BaselineStackName}-BaselineLayerVersionArn
      Handler: index.handler
      Code:
        ZipFile: |
          const response = require('cfn-response-promise');

          const AWS = require('aws-sdk');
          AWS.config.apiVersions = {
            dynamodb: '2012-08-10'
          };

          const dynamodb = new AWS.DynamoDB();

          const tableName = 'Codes';

          const getCode = async (type, name) => {
            console.log(`- Calling: GetItem for Type ${type}, Name ${name}...`);
            const params = {
              TableName: tableName,
              Key: { Type: { S: type }, Name: { S: name }},
              AttributesToGet: [ 'Code' ]
            };
            const data = await dynamodb.getItem(params).promise();
            if (data.Item && data.Item.Code) {
              return data.Item.Code.S;
            }
            else {
              throw new Error(`Code for Name ${name} of Type ${type} not found`);
            }
          };

          exports.handler = async (event, context) => {
            console.info(`Request body:\n${JSON.stringify(event)}`);

            switch (event.RequestType) {
              case 'Create':
              case 'Update':
                try {
                  const companyName = event.ResourceProperties.CompanyName;
                  const companySegment = (companyName) ? `/${await getCode('Company', companyName)}` : '';

                  const systemName = event.ResourceProperties.SystemName;
                  const systemSegment = (systemName) ? `/${await getCode('System', systemName)}` : '';

                  const applicationName = event.ResourceProperties.ApplicationName;
                  const applicationSegment = (applicationName) ? `/${applicationName}` : '';

                  const environmentName = event.ResourceProperties.EnvironmentName;
                  const environmentSegment = (environmentName) ? `/${environmentName}` : '';

                  const loggroupname = `${companySegment}${systemSegment}${applicationSegment}${environmentSegment}`;
                  console.info('LogGroupName: ' + loggroupname);
                  await response.send(event, context, response.SUCCESS, null, loggroupname);
                }
                catch (err) {
                  const responseData = {Error: `Could not create LogGroupName`};
                  console.error(`Error: ${responseData.Error}:\n${err}`);
                  await response.send(event, context, response.FAILED, responseData);
                }
                break;

              case 'Delete':
                await response.send(event, context, response.SUCCESS);
                break;
            }
          };
  HostNameLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/HostName
      RetentionInDays: !Ref HostNameLogRetention
  HostNameFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: HostName
      Description: A Lambda function which creates a HostName that conforms to DXC Framework Naming Conventions.
      Role: !GetAtt IdentifierRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Layers:
        - !ImportValue
            Fn::Sub: ${BaselineStackName}-BaselineLayerVersionArn
      Handler: index.handler
      Code:
        ZipFile: |
          const response = require('cfn-response-promise');

          const AWS = require('aws-sdk');
          AWS.config.apiVersions = {
            dynamodb: '2012-08-10'
          };

          const dynamodb = new AWS.DynamoDB();

          const tableName = 'Codes';

          const getCode = async (type, name) => {
            console.log(`- Calling: GetItem for Type ${type}, Name ${name}...`);
            const params = {
              TableName: tableName,
              Key: { Type: { S: type }, Name: { S: name }},
              AttributesToGet: [ 'Code' ]
            };
            const data = await dynamodb.getItem(params).promise();
            if (data.Item && data.Item.Code) {
              return data.Item.Code.S;
            }
            else {
              throw new Error(`Code for Name ${name} of Type ${type} not found`);
            }
          };

          exports.handler = async (event, context) => {
            console.info(`Request body:\n${JSON.stringify(event)}`);

            switch (event.RequestType) {
              case 'Create':
              case 'Update':
                try {
                  const companyName = event.ResourceProperties.CompanyName;
                  const companyCode = (companyName) ? await getCode('Company', companyName) : '';

                  const locationName = event.ResourceProperties.LocationName || process.env.AWS_REGION;
                  const locationCode = (locationName) ? await getCode('Location', locationName) : '';

                  const environmentName = event.ResourceProperties.EnvironmentName;
                  const environmentCode = (environmentName) ? await getCode('Environment', environmentName) : '';

                  const systemName = event.ResourceProperties.SystemName;
                  const systemCode = (systemName) ? await getCode('System', systemName) : '';

                  const applicationName = event.ResourceProperties.ApplicationName;
                  const applicationCode = (applicationName) ? await getCode('Application', applicationName) : '';

                  const componentName = event.ResourceProperties.ComponentName;
                  const componentCode = (componentName) ? await getCode('Component', componentName) : '';

                  let instanceNumber = event.ResourceProperties.InstanceNumber || '';
                  if (instanceNumber) {
                    if (/^(0?[1-9]|[1-9][0-9])$/.test(instanceNumber)) {
                      instanceNumber = instanceNumber.padStart(2, '0');
                    }
                    else {
                      throw new Error(`InstanceNumber invalid`);
                    }
                  }

                  const zoneCode = event.ResourceProperties.ZoneCode || '';
                  if (zoneCode && ! /^[a-f]$/.test(zoneCode)) {
                    throw new Error(`ZoneCode invalid`);
                  }

                  const hostname = `${companyCode}${locationCode}${environmentCode}${systemCode}${applicationCode}${componentCode}${instanceNumber}${zoneCode}`;
                  console.info('HostName: ' + hostname);
                  await response.send(event, context, response.SUCCESS, null, hostname);
                }
                catch (err) {
                  const responseData = {Error: `Could not create HostName`};
                  console.error(`Error: ${responseData.Error}:\n${err}`);
                  await response.send(event, context, response.FAILED, responseData);
                }
                break;

              case 'Delete':
                await response.send(event, context, response.SUCCESS);
                break;
            }
          };
Outputs:
  Table:
    Description: The DynamoDB Table
    Value: !Ref Table
    Export:
      Name: !Sub ${AWS::StackName}-Table
  CodesLoaderFunctionArn:
    Description: The CodesLoader Lambda Function ARN
    Value: !GetAtt CodesLoaderFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-CodesLoaderFunctionArn
  AliasNameFunctionArn:
    Description: The AliasName Lambda Function ARN
    Value: !GetAtt AliasNameFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-AliasNameFunctionArn
  LogGroupNameFunctionArn:
    Description: The LogGroupName Lambda Function ARN
    Value: !GetAtt LogGroupNameFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-LogGroupNameFunctionArn
  HostNameFunctionArn:
    Description: The HostName Lambda Function ARN
    Value: !GetAtt HostNameFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-HostNameFunctionArn
