AWSTemplateFormatVersion: 2010-09-09
Description: Example-WordPress Template.
  This is an example of an Application which uses a separate Database Component.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - WordPressDatabaseStackName
          - WindowsBastionsStackName
          - VPNStackName
          - VPCStackName
          - AMIFunctionsStackName
          - BucketsStackName
          - TopicsStackName
          - KeysStackName
          - CodesStackName
      - Label:
          default: Resource Dependencies
        Parameters:
          - KeyPairName
      - Label:
          default: System Configuration
        Parameters:
          - CompanyName
          - SystemName
      - Label:
          default: Environment Configuration
        Parameters:
          - AccountName
          - EnvironmentName
          - EnvironmentType
      - Label:
          default: WordPress Application Dependencies Configuration
        Parameters:
          - WordPressProductKey
      - Label:
          default: WordPress Application Configuration
        Parameters:
          - WordPressApplicationName
          - WordPressServiceName
          - WordPressAdministratorUserName
          - WordPressAdministratorPassword
          - WordPressAdministratorEmail
          - LogRetention
          - Schedule
      - Label:
          default: Security Configuration
        Parameters:
          - UserNetworks
          - UserNetworkDescriptions
          - AdministratorNetworks
          - AdministratorNetworkDescriptions
    ParameterLabels:
      WordPressDatabaseStackName:
        default: WordPress-Database Stack Name
      WindowsBastionsStackName:
        default: WindowsBastions Stack Name
      VPNStackName:
        default: VPN Stack Name
      VPCStackName:
        default: VPC Stack Name
      AMIFunctionsStackName:
        default: AMIFunctions Stack Name
      BucketsStackName:
        default: Buckets Stack Name
      TopicsStackName:
        default: Topics Stack Name
      KeysStackName:
        default: Keys Stack Name
      CodesStackName:
        default: Codes Stack Name
      KeyPairName:
        default: KeyPair Name
      CompanyName:
        default: Company Name
      SystemName:
        default: System Name
      AccountName:
        default: Account Name
      EnvironmentName:
        default: Environment Name
      EnvironmentType:
        default: Environment Type
      WordPressProductKey:
        default: WordPress Product S3 Key
      WordPressApplicationName:
        default: WordPress Application Name
      WordPressServiceName:
        default: WordPress DNS Service Name
      WordPressAdministratorUserName:
        default: WordPress Administrator User Name
      WordPressAdministratorPassword:
        default: WordPress Administrator Password
      WordPressAdministratorEmail:
        default: WordPress Administrator Email Address
      LogRetention:
        default: Log Retention
      Schedule:
        default: Schedule
      UserNetworks:
        default: User Networks
      UserNetworkDescriptions:
        default: User Network Descriptions
      AdministratorNetworks:
        default: Administrator Networks
      AdministratorNetworkDescriptions:
        default: Administrator Network Descriptions
Parameters:
  WordPressDatabaseStackName:
    Description: Name of the CloudFormation Stack containing the WordPress Database
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Production-WordPress-Database
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  WindowsBastionsStackName:
    Description: Name of the CloudFormation Stack containing the Windows Bastions
    Type: String
    MaxLength: 64
    Default: ''
    AllowedPattern: (^$|^[A-Z][-a-zA-Z0-9]*$)
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  VPNStackName:
    Description: Name of the CloudFormation Stack containing the VPN Instances
    Type: String
    MaxLength: 64
    Default: ''
    AllowedPattern: (^$|^[A-Z][-a-zA-Z0-9]*$)
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  VPCStackName:
    Description: Name of the CloudFormation Stack containing the VPC
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Production-VPC
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  AMIFunctionsStackName:
    Description: Name of the CloudFormation Stack containing the AMI Functions
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: AMIFunctions
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  BucketsStackName:
    Description: Name of the CloudFormation Stack containing Buckets
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Buckets
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  TopicsStackName:
    Description: Name of the CloudFormation Stack containing Topics
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Topics
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  KeysStackName:
    Description: Name of the CloudFormation Stack containing Keys
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Keys
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  CodesStackName:
    Description: Name of the CloudFormation Stack containing the Codes Resources
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Codes
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  KeyPairName:
    Description: Name of an existing KeyPair to enable SSH access to the Instance
    Type: AWS::EC2::KeyPair::KeyName
    MaxLength: 32
    Default: example
    AllowedPattern: ^[_a-zA-Z0-9]*$
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  CompanyName:
    Description: Name of the Company associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: DXC
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  SystemName:
    Description: Name of the System associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: Prototype
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  AccountName:
    Description: Name of the Account associated with the Stack
    Type: String
    Default: Production
    AllowedValues:
      - Production
      - Staging
      - UAT
      - QA
      - Testing
      - Development
      - Build
      - Core
      - Recovery
      - Log
      - Management
      - Jumpstart
      - Organization
    ConstraintDescription: must be Production, Staging, UAT, QA, Testing, Development, Build, Core, Recovery, Log, Management, Jumpstart or Organization.
  EnvironmentName:
    Description: Name of the Environment associated with the Stack
    Type: String
    Default: Production
    AllowedValues:
      - Production
      - Staging
      - UAT
      - QA
      - Testing
      - Development
      - Build
      - Core
      - Recovery
      - Log
      - Identity
      - Management
      - Organization
    ConstraintDescription: must be Production, Staging, UAT, QA, Testing, Development, Build, Core, Recovery, Log, Identity, Management or Organization.
  EnvironmentType:
    Description: Type of the Environment to build. Used to select size-related options in Mappings
    Type: String
    Default: small
    AllowedValues:
      - micro
      - small
      - medium
      - large
      - xlarge
    ConstraintDescription: must be micro, small, medium, large or xlarge.
  WordPressProductKey:
    Description: Optional key of Object within the S3 Bucket containing the WordPress installer
    Type: String
    Default: ''
    AllowedPattern: (^$|^(?:Linux|WordPress)\/[-_.a-zA-Z0-9]*\.(?:zip|tgz|tar\.gz)$)
    ConstraintDescription: must be a valid filename, within the Linux or WordPress folders, if specified.
  WordPressApplicationName:
    Description: Name of the WordPress Application
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: WordPress
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  WordPressServiceName:
    Description: DNS Service Name of the WordPress Application
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: wordpress
    AllowedPattern: ^[a-z][-a-z0-9]*$
    ConstraintDescription: must begin with a lower case letter and contain only lower case letters, numbers and dashes.
  WordPressAdministratorUserName:
    Description: Name of the WordPress Administrator
    Type: String
    MinLength: 2
    MaxLength: 63
    Default: admin
    AllowedPattern: ^[a-z][a-z0-9]*$
    ConstraintDescription: must begin with a lower case letter and contain lower case alphanumeric characters.
  WordPressAdministratorPassword:
    Description: Optional password for the WordPress Administrator (If unspecified, generate a random password)
    Type: String
    NoEcho: true
    Default: ''
    AllowedPattern: (^$|(?=^.{20,32}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])^.*$)
    ConstraintDescription: must be 20 to 32 character random string format with at least one uppercase, lowercase and digit, if specified.
  WordPressAdministratorEmail:
    Description: Optional email address of the Administrator (If unspecified, do not configure an email address)
    Type: String
    Default: ''
    AllowedPattern: (^$|[^\s@]+@[^\s@]+\.[^\s@]+$)
    ConstraintDescription: must be a valid email address, if specified.
  LogRetention:
    Description: Number of days to retain CloudWatch Log Events
    Type: Number
    Default: 14
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
    ConstraintDescription: must be 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827 or 3653.
  Schedule:
    Description: Optional Schedule Tag
    Type: String
    Default: ''
    AllowedPattern: (^$|^(([01][0-9]|2[0-3]):[0-5][0-9]-|-([01][0-9]|2[0-3]):[0-5][0-9]|([01][0-9]|2[0-3]):[0-5][0-9]-([01][0-9]|2[0-3]):[0-5][0-9])( ([A-Z][_A-Za-z0-9]*\/[A-Z][_+A-Za-z0-9]*))?$)
    ConstraintDescription: See Scheduler Lambda Function description for Tag format.
  UserNetworks:
    Description: Networks that can use the Application
    Type: String
    Default: -,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 8 values, each an IP CIDR range of the form x.x.x.x/x or '-'.
  UserNetworkDescriptions:
    Description: Descriptions of networks that can use the Application
    Type: String
    Default: -,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 8 values, each a short text description or '-'.
  AdministratorNetworks:
    Description: Networks that can administer the Application
    Type: String
    Default: -,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 8 values, each an IP CIDR range of the form x.x.x.x/x or '-'.
  AdministratorNetworkDescriptions:
    Description: Descriptions of networks that can administer the Application
    Type: String
    Default: -,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 8 values, each a short text description or '-'.
Mappings:
  RegionNameMap:
    us-east-1:
      Name: Virginia
      Code: ue1
    us-east-2:
      Name: Ohio
      Code: ue2
    us-west-1:
      Name: California
      Code: uw1
    us-west-2:
      Name: Oregon
      Code: uw2
    ap-east-1:
      Name: HongKong
      Code: ae1
    ap-south-1:
      Name: Mumbai
      Code: ad1
    ap-northeast-2:
      Name: Seoul
      Code: an2
    ap-southeast-1:
      Name: Singapore
      Code: as1
    ap-southeast-2:
      Name: Sydney
      Code: as2
    ap-northeast-1:
      Name: Tokyo
      Code: an1
    ca-central-1:
      Name: Canada
      Code: cc1
    eu-central-1:
      Name: Frankfurt
      Code: ec1
    eu-west-1:
      Name: Ireland
      Code: ew1
    eu-west-2:
      Name: London
      Code: ew2
    eu-west-3:
      Name: Paris
      Code: ew3
    eu-north-1:
      Name: Stockholm
      Code: en1
    me-south-1:
      Name: Bahrain
      Code: ms1
    sa-east-1:
      Name: SaoPaulo
      Code: se1
  InstanceTypeMap:
    WordPress:
      micro: t3.micro
      small: t3.small
      medium: t3.medium
      large: t3.large
      xlarge: t3.xlarge
Conditions:
  ConfigureAccountEnvironment: !Or [ !Not [ !Equals [ !Ref AccountName, !Ref EnvironmentName ]], !Equals [ !Ref AccountName, Jumpstart ]]
  ConfigureGlobal: !Equals [ !Ref 'AWS::Region', us-east-1 ]
  ConfigureKeyPair: !Not [ !Equals [ !Ref KeyPairName, '' ]]
  ConfigureWindowsBastionsIntegration: !Not [ !Equals [ !Ref WindowsBastionsStackName, '' ]]
  ConfigureVPNIntegration: !Not [ !Equals [ !Ref VPNStackName, '' ]]
  InstallWordPress: !Not [ !Equals [ !Ref WordPressProductKey, '' ]]
  ConfigureAdministratorPassword: !Not [ !Equals [ !Ref WordPressAdministratorPassword, '' ]]
  GenerateAdministratorPassword: !Not [ !Condition ConfigureAdministratorPassword ]
  ConfigureAdministratorEmail: !Not [ !Equals [ !Ref WordPressAdministratorEmail, '' ]]
  ConfigureSchedule: !Not [ !Equals [ !Ref Schedule, '' ]]
  ConfigureUserNetwork0: !Not [ !Equals [ !Select [ 0, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork1: !Not [ !Equals [ !Select [ 1, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork2: !Not [ !Equals [ !Select [ 2, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork3: !Not [ !Equals [ !Select [ 3, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork4: !Not [ !Equals [ !Select [ 4, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork5: !Not [ !Equals [ !Select [ 5, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork6: !Not [ !Equals [ !Select [ 6, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork7: !Not [ !Equals [ !Select [ 7, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureAdministratorNetwork0: !Not [ !Equals [ !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork1: !Not [ !Equals [ !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork2: !Not [ !Equals [ !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork3: !Not [ !Equals [ !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork4: !Not [ !Equals [ !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork5: !Not [ !Equals [ !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork6: !Not [ !Equals [ !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork7: !Not [ !Equals [ !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: GetSecretPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${EnvironmentName}-${WordPressApplicationName}-Administrator-*
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${EnvironmentName}-${WordPressApplicationName}-Database-MasterUser-*
        - PolicyName: DownloadScriptFromS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${ScriptsBucket}/Linux/*
                    - ScriptsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  - !Sub
                    - arn:aws:s3:::${ScriptsBucket}/WordPress/*
                    - ScriptsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ScriptsBucket
        - PolicyName: DownloadConfigurationFromS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${ConfigurationsBucket}/Linux/*
                    - ConfigurationsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
                  - !Sub
                    - arn:aws:s3:::${ConfigurationsBucket}/WordPress/*
                    - ConfigurationsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
        - PolicyName: DownloadProductFromS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${ProductsBucket}/Linux/*
                    - ProductsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ProductsBucket
                  - !Sub
                    - arn:aws:s3:::${ProductsBucket}/WordPress/*
                    - ProductsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ProductsBucket
  AdministratorSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${EnvironmentName}-${WordPressApplicationName}-Administrator
      Description: !Sub Username and Password for the ${EnvironmentName} Environment ${WordPressApplicationName} Administrator
      SecretString: !If [ ConfigureAdministratorPassword, !Sub '{"username": "${WordPressAdministratorUserName}", "password": "${WordPressAdministratorPassword}"}', !Ref 'AWS::NoValue' ]
      GenerateSecretString: !If
        - GenerateAdministratorPassword
        - SecretStringTemplate: !Sub '{"username": "${WordPressAdministratorUserName}"}'
          GenerateStringKey: password
          PasswordLength: 32
          ExcludePunctuation: true
        - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${WordPressApplicationName}-Administrator
  LogGroupName:
    Type: Custom::LogGroupName
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${CodesStackName}-LogGroupNameFunctionArn
      CompanyName: !Ref CompanyName
      SystemName: !Ref SystemName
      ApplicationName: !Ref WordPressApplicationName
      EnvironmentName: !If [ ConfigureAccountEnvironment, !Ref EnvironmentName, !Ref 'AWS::NoValue' ]
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LogGroupName
      RetentionInDays: !Ref LogRetention
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${EnvironmentName}-${WordPressApplicationName}-InstanceSecurityGroup
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCNetwork
          Description: VPC (ICMP)
        - !If
          - ConfigureWindowsBastionsIntegration
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            SourceSecurityGroupId: !ImportValue
              Fn::Sub: ${WindowsBastionsStackName}-InstanceSecurityGroup
            Description: !Sub ${WindowsBastionsStackName}-InstanceSecurityGroup (HTTP)
          - !Ref AWS::NoValue
        - !If
          - ConfigureWindowsBastionsIntegration
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            SourceSecurityGroupId: !ImportValue
              Fn::Sub: ${WindowsBastionsStackName}-InstanceSecurityGroup
            Description: !Sub ${WindowsBastionsStackName}-InstanceSecurityGroup (HTTPS)
          - !Ref AWS::NoValue
        - !If
          - ConfigureWindowsBastionsIntegration
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            SourceSecurityGroupId: !ImportValue
              Fn::Sub: ${WindowsBastionsStackName}-InstanceSecurityGroup
            Description: !Sub ${WindowsBastionsStackName}-InstanceSecurityGroup (SSH)
          - !Ref AWS::NoValue
        - !If
          - ConfigureVPNIntegration
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            SourceSecurityGroupId: !ImportValue
              Fn::Sub: ${VPNStackName}-InstanceSecurityGroup
            Description: !Sub ${VPNStackName}-InstanceSecurityGroup (HTTP)
          - !Ref AWS::NoValue
        - !If
          - ConfigureVPNIntegration
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            SourceSecurityGroupId: !ImportValue
              Fn::Sub: ${VPNStackName}-InstanceSecurityGroup
            Description: !Sub ${VPNStackName}-InstanceSecurityGroup (HTTPS)
          - !Ref AWS::NoValue
        - !If
          - ConfigureVPNIntegration
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            SourceSecurityGroupId: !ImportValue
              Fn::Sub: ${VPNStackName}-InstanceSecurityGroup
            Description: !Sub ${VPNStackName}-InstanceSecurityGroup (SSH)
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork0
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 0, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 0, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork1
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 1, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork1
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 1, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork2
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 2, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork2
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 2, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork3
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 3, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork3
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 3, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork4
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 4, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork4
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 4, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork5
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 5, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork5
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 5, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork6
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 6, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork6
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 6, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork7
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 7, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork7
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 7, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${WordPressApplicationName}-InstanceSecurityGroup
  AmazonLinux2Image:
    Type: Custom::AmazonLinux2Image
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${AMIFunctionsStackName}-AmazonLinux2ImageFunctionArn
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref Role
  HostName:
    Type: Custom::HostName
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${CodesStackName}-HostNameFunctionArn
      CompanyName: !Ref CompanyName
      LocationName: !Ref AWS::Region
      EnvironmentName: !Ref EnvironmentName
      ApplicationName: !Ref WordPressApplicationName
      InstanceNumber: 01
      ZoneCode: a
  Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Credentials:
          type: S3
          roleName: !Ref Role
          buckets:
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ScriptsBucket
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ProductsBucket
      AWS::CloudFormation::Init:
        configSets:
          All:
            - UpdateOS
            - ConfigureOSUpdates
            - ConfigureOS
            - ConfigureCFN
            - InstallSSMAgent
            - InstallCloudWatchAgent
            - ConfigureCloudWatchAgent
            - ConfigureHostName
            - InstallApache
            - InstallLAMP
            - ConfigureLAMPTestPage
            - !If [ InstallWordPress, InstallWordPress, !Ref 'AWS::NoValue' ]
            - !If [ InstallWordPress, ConfigureWordPress, !Ref 'AWS::NoValue' ]
        UpdateOS:
          commands:
            01-yum-update:
              command: yum update -y
              ignoreErrors: false
        ConfigureOSUpdates:
          packages:
            yum:
              yum-cron: []
          files:
            /etc/yum/yum-cron.conf:
              content: |
                [commands]
                update_cmd = security
                update_messages = yes
                download_updates = yes
                apply_updates = yes
                random_sleep = 10
              mode: '000644'
              owner: root
              group: root
        ConfigureOS:
          packages:
            yum:
              git: []
          files:
            /etc/profile.d/local.sh:
              content: |
                alias lsa='ls -lAF'
                alias ip4='ip addr | grep " inet "'
              mode: '000644'
              owner: root
              group: root
        ConfigureCFN:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --configsets All --stack ${AWS::StackName} --resource Instance --region ${AWS::Region}
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        InstallSSMAgent:
          packages:
            rpm:
              amazon-ssm-agent:
                - https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
        InstallCloudWatchAgent:
          sources:
            /var/tmp: https://s3.amazonaws.com/amazoncloudwatch-agent/linux/amd64/latest/AmazonCloudWatchAgent.zip
          commands:
            01-install-cloudwatch-agent:
              command: yum install -y /var/tmp/amazon-cloudwatch-agent.rpm
              ignoreErrors: false
        ConfigureCloudWatchAgent:
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: !Sub |
                {
                  "agent" : {
                    "metrics_collection_interval" : 60,
                    "logfile" : "/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log",
                    "debug" : false
                  },
                  "metrics" : {
                    "namespace" : "${SystemName}/${EnvironmentName}-${WordPressApplicationName}",
                    "metrics_collected" : {
                      "mem" : {
                        "measurement" : [
                          { "name" : "mem_used_percent", "rename" : "MemoryUsedPercent" }
                        ]
                      },
                      "swap" : {
                        "measurement" : [
                          { "name" : "swap_used_percent", "rename" : "SwapUsedPercent" }
                        ]
                      },
                      "disk" : {
                        "resources" : [
                          "*"
                        ],
                        "measurement" : [
                          { "name" : "used_percent", "rename" : "DiskUsedPercent" }
                        ],
                        "ignore_file_system_types": [
                          "rootfs",
                          "sysfs",
                          "tmpfs",
                          "devtmpfs"
                        ]
                      }
                    },
                    "append_dimensions" : {
                      "InstanceId" : "${!aws:InstanceId}",
                      "AutoScalingGroupName" : "${!aws:AutoScalingGroupName}"
                    },
                    "aggregation_dimensions" : [
                      [ "InstanceId" ],
                      [ "InstanceId", "path" ],
                      [ "AutoScalingGroupName" ]
                    ]
                  },
                  "logs" : {
                    "logs_collected" : {
                      "files" : {
                        "collect_list" : [
                          {
                            "file_path" : "/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "WordPress/{instance_id}/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log"
                          },
                          {
                            "file_path" : "/var/log/cloud-init.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "WordPress/{instance_id}/var/log/cloud-init.log",
                            "timestamp_format" : "%b %d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/cloud-init-output.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "WordPress/{instance_id}/var/log/cloud-init-output.log"
                          },
                          {
                            "file_path" : "/var/log/cfn-init.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "WordPress/{instance_id}/var/log/cfn-init.log",
                            "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/cfn-init-cmd.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "WordPress/{instance_id}/var/log/cfn-init-cmd.log",
                            "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/cfn-hup.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "WordPress/{instance_id}/var/log/cfn-hup.log",
                            "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/messages",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "WordPress/{instance_id}/var/log/messages",
                            "timestamp_format" : "%b %d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/secure",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "WordPress/{instance_id}/var/log/secure",
                            "timestamp_format" : "%b %d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/cron",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "WordPress/{instance_id}/var/log/cron",
                            "timestamp_format" : "%b %d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/dmesg",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "WordPress/{instance_id}/var/log/dmesg"
                          },
                          {
                            "file_path" : "/var/log/yum.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "WordPress/{instance_id}/var/log/yum.log"
                          },
                          {
                            "file_path" : "/var/log/httpd/access_log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "WordPress/{instance_id}/var/log/httpd/access_log"
                          },
                          {
                            "file_path" : "/var/log/httpd/error_log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "WordPress/{instance_id}/var/log/httpd/error_log"
                          }
                        ]
                      }
                    }
                  }
                }
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              amazon-cloudwatch-agent:
                enabled: true
                ensureRunning: true
                files:
                  - /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
        ConfigureHostName:
          files:
            /root/bin/configure-hostname:
              source: !Sub
                - https://${ScriptsBucket}.${s3}.amazonaws.com/Linux/configure-hostname
                - ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
          commands:
            01-configure-hostname:
              command: !Sub
                - /root/bin/configure-hostname -n -h ${HostName} -d ${VPCPrivateDomain}
                - VPCPrivateDomain: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCPrivateDomain
              ignoreErrors: false
        InstallApache:
          packages:
            yum:
              httpd: []
          commands:
            01-enable-ssi:
              command: sed -i -e 's/\(^    Options Indexes FollowSymLinks$\)/\1 Includes\n    XBitHack on/' /etc/httpd/conf/httpd.conf
              ignoreErrors: false
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/httpd/conf/httpd.conf
        InstallLAMP:
          commands:
            01-install-lamp:
              command: amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
              ignoreErrors: false
            01-restart-apache:
              command: systemctl restart httpd
              ignoreErrors: false
        ConfigureLAMPTestPage:
          files:
            /var/www/html/info.php:
              content: !Sub |
                <?php
                phpinfo();
              mode: '000400'
              owner: root
              group: root
        InstallWordPress:
          sources:
            /var/tmp: !Sub
              - https://${ProductsBucket}.${s3}.amazonaws.com/${WordPressProductKey}
              - ProductsBucket: !ImportValue
                  Fn::Sub: ${BucketsStackName}-ProductsBucket
                s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
          commands:
            01-move-wordpress-docroot:
              command: mv /var/tmp/wordpress/* /var/www/html
              ignoreErrors: false
            02-delete-wordpress-dir:
              command: rmdir /var/tmp/wordpress
              ignoreErrors: false
            03-reset-ownership:
              command: chown -R root:root /var/www
              ignoreErrors: false
        ConfigureWordPress:
          files:
            /root/bin/configure-wordpress:
              source: !Sub
                - https://${ScriptsBucket}.${s3}.amazonaws.com/WordPress/configure-wordpress
                - ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
          commands:
            01-configure-wordpress:
              command: !Sub
                - /root/bin/configure-wordpress -n
                  -t "${CompanyName} ${SystemName} ${EnvironmentName} ${WordPressApplicationName}"
                  -h ${WordPressServiceName}.${VPCPrivateDomain} -s ${AdministratorSecret}${AdministratorEmail}
                  -H ${DBInstanceHostName} -D ${DatabaseName} -S ${MasterUserSecret}
                - VPCPrivateDomain: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCPrivateDomain
                  AdministratorSecret: !Sub ${EnvironmentName}-${WordPressApplicationName}-Administrator
                  AdministratorEmail: !If [ ConfigureAdministratorEmail, !Sub ' -e ${WordPressAdministratorEmail}', '' ]
                  DBInstanceHostName: !ImportValue
                    Fn::Sub: ${WordPressDatabaseStackName}-PrivateDBInstanceHostName
                  DatabaseName: !ImportValue
                    Fn::Sub: ${WordPressDatabaseStackName}-DatabaseName
                  MasterUserSecret: !ImportValue
                    Fn::Sub: ${WordPressDatabaseStackName}-MasterUserSecret
              ignoreErrors: true
    Properties:
      ImageId: !Ref AmazonLinux2Image
      InstanceType: !FindInMap [ InstanceTypeMap, WordPress, !Ref EnvironmentType ]
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !If [ ConfigureKeyPair, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      Monitoring: true
      NetworkInterfaces:
        - Description: !Sub ${EnvironmentName}-${WordPressApplicationName}-NetworkInterface-eth0
          DeviceIndex: 0
          SubnetId: !ImportValue
            Fn::Sub: ${VPCStackName}-ApplicationSubnetA
          GroupSet:
            - !Ref InstanceSecurityGroup
            - !ImportValue
              Fn::Sub: ${WordPressDatabaseStackName}-ClientSecurityGroup
          DeleteOnTermination: true
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: 16
            DeleteOnTermination: true
        - DeviceName: /dev/xvdb # Not configuring or using this at first, but will add later and mount on /var/www or similar
          Ebs:
            VolumeType: gp2
            VolumeSize: 8
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${WordPressApplicationName}-Instance
        #- Key: HostName
        #  Value: !Ref HostName
        - !If
          - ConfigureSchedule
          - Key: Schedule
            Value: !Ref Schedule
          - !Ref AWS::NoValue
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y aws-cfn-bootstrap

          /opt/aws/bin/cfn-init --verbose --configsets All --stack ${AWS::StackName} --resource Instance --region ${AWS::Region}
          /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource Instance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
  # Do not use the HostName Tag on any Instances along with explicitly defined HostNameRecordSet Resource as you see here
  # If a HostName tag exists, the PrivateRecordSet Function will attempt to manage Private DNS Records, resulting in a conflict
  PrivateHostNameRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PrivateHostedZone
      Comment: !Sub Private DNS Host Name of the ${WordPressApplicationName} Instance
      Name: !Sub
        - ${HostName}.${VPCPrivateDomain}.
        - VPCPrivateDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPrivateDomain
      Type: A
      TTL: 900
      ResourceRecords:
        - !GetAtt Instance.PrivateIp
  PrivateServiceNameRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PrivateHostedZone
      Comment: !Sub Private DNS Service Name of the ${WordPressApplicationName} Service
      Name: !Sub
        - ${WordPressServiceName}.${VPCPrivateDomain}.
        - VPCPrivateDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPrivateDomain
      Type: CNAME
      TTL: 900
      ResourceRecords:
        - !Sub
          - ${HostName}.${VPCPrivateDomain}
          - VPCPrivateDomain: !ImportValue
              Fn::Sub: ${VPCStackName}-VPCPrivateDomain
  CPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: The average CPU Utilization is greater than 90% over 3 consecutive minutes
      AlarmActions:
        - !ImportValue
          Fn::Sub: ${TopicsStackName}-AlarmsTopic
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 90
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref Instance
  MemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: The used memory is greater than 90% over 3 consecutive minutes
      AlarmActions:
        - !ImportValue
          Fn::Sub: ${TopicsStackName}-AlarmsTopic
      Namespace: !Sub ${SystemName}/${EnvironmentName}-${WordPressApplicationName}
      MetricName: MemoryUsedPercent
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 90
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref Instance
  Disk1Alarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: The disk / percent used is more than than 90% over 3 consecutive minutes
      AlarmActions:
        - !ImportValue
          Fn::Sub: ${TopicsStackName}-AlarmsTopic
      Namespace: !Sub ${SystemName}/${EnvironmentName}-${WordPressApplicationName}
      MetricName: DiskUsedPercent
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 90
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref Instance
        - Name: path
          Value: /
  Disk2Alarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: The disk /var/www percent used is more than than 90% over 3 consecutive minutes
      AlarmActions:
        - !ImportValue
          Fn::Sub: ${TopicsStackName}-AlarmsTopic
      Namespace: !Sub ${SystemName}/${EnvironmentName}-${WordPressApplicationName}
      MetricName: DiskUsedPercent
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 90
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref Instance
        - Name: path
          Value: /var/www
  404MetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref LogGroup
      FilterPattern: '[ip, identity, user_id, timestamp, request, status_code = 404, size, ...]'
      MetricTransformations:
        - MetricNamespace: !Sub ${SystemName}/${EnvironmentName}-${WordPressApplicationName}
          MetricName: 404Count
          MetricValue: 1
  404Alarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: The number of 404s is greater than 5 over 1 minute
      AlarmActions:
        - !ImportValue
          Fn::Sub: ${TopicsStackName}-AlarmsTopic
      Namespace: !Sub ${SystemName}/${EnvironmentName}-${WordPressApplicationName}
      MetricName: 404Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub
        - ${EnvironmentName}-${WordPressApplicationName}-${RegionName}
        - RegionName: !FindInMap [ RegionNameMap, !Ref 'AWS::Region', Name ]
      DashboardBody: !Sub |
        {
          "widgets" : [ {
            "type" : "text",
            "x" : 0,
            "y" : 0,
            "width" : 24,
            "height" : 1,
            "properties" : {
              "markdown" : "# ${EnvironmentName}-${WordPressApplicationName}"
            }
          },
          {
            "type" : "text",
            "x" : 0,
            "y" : 1,
            "width" : 24,
            "height" : 1,
            "properties" : {
              "markdown" : "## Instance"
            }
          },
          {
            "type" : "text",
            "x" : 0,
            "y" : 2,
            "width" : 24,
            "height" : 1,
            "properties" : {
              "markdown" : "### Graphs"
            }
          },
          {
            "type" : "metric",
            "x" : 0,
            "y" : 3,
            "width" : 6,
            "height" : 9,
            "properties" : {
              "title" : "Instance: CPU",
              "view" : "timeSeries",
              "stacked" : false,
              "period" : 60,
              "region" : "${AWS::Region}",
              "metrics" : [
                [ "AWS/EC2", "CPUUtilization", "InstanceId", "${Instance}", { "label" : "CPU Utilization" } ],
                [ "AWS/EC2", "CPUSurplusCreditBalance", "InstanceId", "${Instance}", { "label" : "CPU Surplus Credit Balance", "yAxis" : "right" } ]
              ],
              "yAxis" : {
                "left" : { "min" : 0, "max" : 100 }
              }
            }
          },
          {
            "type" : "metric",
            "x" : 6,
            "y" : 3,
            "width" : 6,
            "height" : 9,
            "properties" : {
              "title" : "Instance: Memory",
              "view" : "timeSeries",
              "stacked" : false,
              "period" : 60,
              "region" : "${AWS::Region}",
              "metrics" : [
                [ "${SystemName}/${EnvironmentName}-${WordPressApplicationName}", "MemoryUsedPercent", "InstanceId", "${Instance}", { "label" : "Memory Used %" } ],
                [ "${SystemName}/${EnvironmentName}-${WordPressApplicationName}", "SwapUsedPercent", "InstanceId", "${Instance}", { "label" : "Swap Used %" } ]
              ],
              "yAxis" : {
                "left" : { "min" : 0, "max" : 100 }
              }
            }
          },
          {
            "type" : "metric",
            "x" : 12,
            "y" : 3,
            "width" : 6,
            "height" : 9,
            "properties" : {
              "title" : "Instance: Disk",
              "view" : "timeSeries",
              "stacked" : false,
              "period" : 60,
              "region" : "${AWS::Region}",
              "metrics" : [
                [ "${SystemName}/${EnvironmentName}-${WordPressApplicationName}", "DiskUsedPercent", "InstanceId", "${Instance}", "path", "/", { "label" : "Disk Used % (/)" } ],
                [ "${SystemName}/${EnvironmentName}-${WordPressApplicationName}", "DiskUsedPercent", "InstanceId", "${Instance}", "path", "/var/www", { "label" : "Disk Used % (/var/www)" } ]
              ],
              "yAxis" : {
                "left" : { "min" : 0, "max" : 100 }
              }
            }
          },
          {
            "type" : "metric",
            "x" : 18,
            "y" : 3,
            "width" : 6,
            "height" : 9,
            "properties" : {
              "title" : "Instance: Network",
              "view" : "timeSeries",
              "stacked" : false,
              "period" : 60,
              "region" : "${AWS::Region}",
              "metrics" : [
                [ "AWS/EC2", "NetworkOut", "InstanceId", "${Instance}", { "label" : "Network Out" } ],
                [ "AWS/EC2", "NetworkIn", "InstanceId", "${Instance}", { "label" : "Network In" } ]
              ]
            }
          },
          {
            "type" : "text",
            "x" : 0,
            "y" : 12,
            "width" : 24,
            "height" : 1,
            "properties" : {
              "markdown" : "### Alarms"
            }
          },
          {
            "type" : "metric",
            "x" : 0,
            "y" : 13,
            "width" : 3,
            "height" : 6,
            "properties" : {
              "title" : "CPU Alarm",
              "view" : "timeSeries",
              "stacked" : false,
              "annotations" : {
                "alarms" : [ "${CPUAlarm.Arn}" ]
              }
            }
          },
          {
            "type" : "metric",
            "x" : 3,
            "y" : 13,
            "width" : 3,
            "height" : 6,
            "properties" : {
              "title" : "Memory Alarm",
              "view" : "timeSeries",
              "stacked" : false,
              "annotations" : {
                "alarms" : [ "${MemoryAlarm.Arn}" ]
              }
            }
          },
          {
            "type" : "metric",
            "x" : 6,
            "y" : 13,
            "width" : 3,
            "height" : 6,
            "properties" : {
              "title" : "Disk (/) Alarm",
              "view" : "timeSeries",
              "stacked" : false,
              "annotations" : {
                "alarms" : [ "${Disk1Alarm.Arn}" ]
              }
            }
          },
          {
            "type" : "metric",
            "x" : 9,
            "y" : 13,
            "width" : 3,
            "height" : 6,
            "properties" : {
              "title" : "Disk (/var/www) Alarm",
              "view" : "timeSeries",
              "stacked" : false,
              "annotations" : {
                "alarms" : [ "${Disk2Alarm.Arn}" ]
              }
            }
          },
          {
            "type" : "metric",
            "x" : 12,
            "y" : 13,
            "width" : 3,
            "height" : 6,
            "properties" : {
              "title" : "HTTP 404 Alarm",
              "view" : "timeSeries",
              "stacked" : false,
              "annotations" : {
                "alarms" : [ "${404Alarm.Arn}" ]
              }
            }
          } ]
        }
Outputs:
  InstanceSecurityGroup:
    Description: The Instance SecurityGroup
    Value: !Ref InstanceSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-InstanceSecurityGroup
  PrivateHostName:
    Description: The Private DNS Host Name of the WordPress Instance
    Value: !Sub
      - ${HostName}.${VPCPrivateDomain}
      - VPCPrivateDomain: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPrivateDomain
  PrivateServiceName:
    Description: The Private DNS Service Name of the WordPress Service
    Value: !Sub
      - ${WordPressServiceName}.${VPCPrivateDomain}
      - VPCPrivateDomain: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPrivateDomain
  PrivateWebsiteURL:
    Description: The Private Website URL
    Value: !Sub
      - http://${WordPressServiceName}.${VPCPrivateDomain}/
      - VPCPrivateDomain: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPrivateDomain
  AdministratorSecret:
    Description: The Administrator Secret Name
    Value: !Sub ${EnvironmentName}-${WordPressApplicationName}-Administrator
    Export:
      Name: !Sub ${AWS::StackName}-AdministratorSecret
