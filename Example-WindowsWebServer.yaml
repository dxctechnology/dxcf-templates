AWSTemplateFormatVersion: 2010-09-09
Description: Example-WindowsWebServer Template.
  This is an example of a Windows Web Server based application, showing installation and configuration via cfn-init.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - VPCStackName
          - AMIFunctionsStackName
          - BuildBucketsStackName
          - BucketsStackName
          - TopicsStackName
          - CodesStackName
      - Label:
          default: Resource Dependencies
        Parameters:
          - KeyPairName
      - Label:
          default: System Configuration
        Parameters:
          - CompanyName
          - SystemName
      - Label:
          default: Environment Configuration
        Parameters:
          - AccountName
          - EnvironmentName
          - EnvironmentType
          - OSName
      - Label:
          default: WindowsWebServer Application Configuration
        Parameters:
          - WindowsWebServerApplicationKey
          - WindowsWebServerApplicationName
          - WindowsWebServerApplicationVersion
          - WindowsWebServerServiceName
          - DSnapshot
          - LogRetention
      - Label:
          default: Security Configuration
        Parameters:
          - UserNetworks
          - UserNetworkDescriptions
          - AdministratorNetworks
          - AdministratorNetworkDescriptions
    ParameterLabels:
      VPCStackName:
        default: VPC Stack Name
      AMIFunctionsStackName:
        default: AMIFunctions Stack Name
      BuildBucketsStackName:
        default: Build Buckets Stack Name
      BucketsStackName:
        default: Buckets Stack Name
      TopicsStackName:
        default: Topics Stack Name
      CodesStackName:
        default: Codes Stack Name
      KeyPairName:
        default: KeyPair Name
      CompanyName:
        default: Company Name
      SystemName:
        default: System Name
      AccountName:
        default: Account Name
      EnvironmentName:
        default: Environment Name
      EnvironmentType:
        default: Environment Type
      OSName:
        default: Operating System Name
      WindowsWebServerApplicationKey:
        default: WindowsWebServer Application S3 Key
      WindowsWebServerApplicationName:
        default: WindowsWebServer Application Name
      WindowsWebServerApplicationVersion:
        default: WindowsWebServer Application Version
      WindowsWebServerServiceName:
        default: WindowsWebServer DNS Service Name
      DSnapshot:
        default: 'D: Snapshot'
      LogRetention:
        default: Log Retention
      UserNetworks:
        default: User Networks
      UserNetworkDescriptions:
        default: User Network Descriptions
      AdministratorNetworks:
        default: Administrator Networks
      AdministratorNetworkDescriptions:
        default: Administrator Network Descriptions
Parameters:
  VPCStackName:
    Description: Name of the CloudFormation Stack containing the VPC
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Production-VPC
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  AMIFunctionsStackName:
    Description: Name of the CloudFormation Stack containing the AMI Functions
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: AMIFunctions
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  BuildBucketsStackName:
    Description: Name of the CloudFormation Stack containing Build Buckets
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: BuildBuckets
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  BucketsStackName:
    Description: Name of the CloudFormation Stack containing Buckets
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Buckets
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  TopicsStackName:
    Description: Name of the CloudFormation Stack containing Topics
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Topics
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  CodesStackName:
    Description: Name of the CloudFormation Stack containing the Codes Resources
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Codes
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  KeyPairName:
    Description: Name of an existing KeyPair to enable the Administrator Password
    Type: AWS::EC2::KeyPair::KeyName
    MinLength: 2
    MaxLength: 32
    Default: example
    AllowedPattern: ^[_a-zA-Z0-9]*$
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  CompanyName:
    Description: Name of the Company associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: DXC
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  SystemName:
    Description: Name of the System associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: Prototype
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  AccountName:
    Description: Name of the Account associated with the Stack
    Type: String
    Default: Production
    AllowedValues:
      - Production
      - Staging
      - UAT
      - QA
      - Testing
      - Development
      - Build
      - Core
      - Recovery
      - Log
      - Management
      - Jumpstart
      - Organization
    ConstraintDescription: must be Production, Staging, UAT, QA, Testing, Development, Build, Core, Recovery, Log, Management, Jumpstart or Organization.
  EnvironmentName:
    Description: Name of the Environment associated with the Stack
    Type: String
    Default: Production
    AllowedValues:
      - Production
      - Staging
      - UAT
      - QA
      - Testing
      - Development
      - Build
      - Core
      - Recovery
      - Log
      - Identity
      - Management
      - Organization
    ConstraintDescription: must be Production, Staging, UAT, QA, Testing, Development, Build, Core, Recovery, Log, Identity, Management or Organization.
  EnvironmentType:
    Description: Type of the Environment to build. Used to select size-related options in Mappings
    Type: String
    Default: small
    AllowedValues:
      - micro
      - small
      - medium
      - large
      - xlarge
      - mlarge
      - mxlarge
      - m2xlarge
      - clarge
      - cxlarge
      - c2xlarge
    ConstraintDescription: must be micro, small, medium, large, xlarge, mlarge, mxlarge, m2xlarge, clarge, cxlarge or c2xlarge.
  OSName:
    Description: The Operating System to use for Instances
    Type: String
    Default: Windows Server 2012 R2
    AllowedValues:
      - Windows Server 2012 R2
      - Windows Server 2016
    ConstraintDescription: must be "Windows Server 2012 R2" or "Windows Server 2016".
  WindowsWebServerApplicationKey:
    Description: Optional key of Object within the S3 Bucket containing the WindowsWebServer Application
    Type: String
    Default: ''
    AllowedPattern: (^$|^(?:Windows|WindowsWebServer)\/[-_.a-zA-Z0-9]*\.(?:zip|tgz|tar\.gz)$)
    ConstraintDescription: must be a valid filename, within the Windows or WindowsWebServer folders, if specified.
  WindowsWebServerApplicationName:
    Description: Name of the WindowsWebServer Application
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: WindowsWebServer
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  WindowsWebServerApplicationVersion:
    Description: Version of the WindowsWebServer Application
    Type: String
    MinLength: 5
    MaxLength: 32
    Default: 1.0.0
    AllowedPattern: ^[0-9]*.[0-9]*.[0-9]*(-[a-zA-Z0-9][-a-zA-Z0-9]*)?$
    ConstraintDescription: must follow semantic versioning conventions.
  WindowsWebServerServiceName:
    Description: DNS Service Name of the WindowsWebServer Application
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: wws
    AllowedPattern: ^[a-z][-a-z0-9]*$
    ConstraintDescription: must begin with a lower case letter and contain only lower case letters, numbers and dashes.
  DSnapshot:
    Description: 'Optional snapshot of previous EBS Volume containing D: drive'
    Type: String
    Default: ''
    AllowedPattern: (^$|snap-[0-9a-f]{17}$)
    ConstraintDescription: must be a valid Snapshot ID.
  LogRetention:
    Description: Number of days to retain CloudWatch Log Events
    Type: Number
    Default: 14
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
    ConstraintDescription: must be 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827 or 3653.
  UserNetworks:
    Description: Networks that can use the Application
    Type: String
    Default: -,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 16 values, each an IP CIDR range of the form x.x.x.x/x or '-'.
  UserNetworkDescriptions:
    Description: Descriptions of networks that can use the Application
    Type: String
    Default: -,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 16 values, each a short text description or '-'.
  AdministratorNetworks:
    Description: Networks that can administer the Application
    Type: String
    Default: -,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 16 values, each an IP CIDR range of the form x.x.x.x/x or '-'.
  AdministratorNetworkDescriptions:
    Description: Descriptions of networks that can administer the Application
    Type: String
    Default: -,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 16 values, each a short text description or '-'.
Mappings:
  RegionNameMap:
    us-east-1:
      Name: Virginia
      Code: ue1
    us-east-2:
      Name: Ohio
      Code: ue2
    us-west-1:
      Name: California
      Code: uw1
    us-west-2:
      Name: Oregon
      Code: uw2
    ap-east-1:
      Name: HongKong
      Code: ae1
    ap-south-1:
      Name: Mumbai
      Code: ad1
    ap-northeast-2:
      Name: Seoul
      Code: an2
    ap-southeast-1:
      Name: Singapore
      Code: as1
    ap-southeast-2:
      Name: Sydney
      Code: as2
    ap-northeast-1:
      Name: Tokyo
      Code: an1
    ca-central-1:
      Name: Canada
      Code: cc1
    eu-central-1:
      Name: Frankfurt
      Code: ec1
    eu-west-1:
      Name: Ireland
      Code: ew1
    eu-west-2:
      Name: London
      Code: ew2
    eu-west-3:
      Name: Paris
      Code: ew3
    eu-north-1:
      Name: Stockholm
      Code: en1
    me-south-1:
      Name: Bahrain
      Code: ms1
    sa-east-1:
      Name: SaoPaulo
      Code: se1
  InstanceTypeMap:
    Web:
      micro: t3.micro
      small: t3.small
      medium: t3.medium
      large: t3.large
      xlarge: t3.xlarge
      mlarge: m5.large
      mxlarge: m5.xlarge
      m2xlarge: m5.2xlarge
      clarge: c5.large
      cxlarge: c5.xlarge
      c2xlarge: c5.2xlarge
Conditions:
  ConfigureAccountEnvironment: !Or [ !Not [ !Equals [ !Ref AccountName, !Ref EnvironmentName ]], !Equals [ !Ref AccountName, Jumpstart ]]
  ConfigureGlobal: !Equals [ !Ref 'AWS::Region', us-east-1 ]
  InstallApplication: !Not [ !Equals [ !Ref WindowsWebServerApplicationKey, '' ]]
  ConfigureDSnapshot: !Not [ !Equals [ !Ref DSnapshot, '' ]]
  ConfigureUserNetwork0: !Not [ !Equals [ !Select [ 0, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork1: !Not [ !Equals [ !Select [ 1, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork2: !Not [ !Equals [ !Select [ 2, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork3: !Not [ !Equals [ !Select [ 3, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork4: !Not [ !Equals [ !Select [ 4, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork5: !Not [ !Equals [ !Select [ 5, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork6: !Not [ !Equals [ !Select [ 6, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork7: !Not [ !Equals [ !Select [ 7, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork8: !Not [ !Equals [ !Select [ 8, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork9: !Not [ !Equals [ !Select [ 9, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork10: !Not [ !Equals [ !Select [ 10, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork11: !Not [ !Equals [ !Select [ 11, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork12: !Not [ !Equals [ !Select [ 12, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork13: !Not [ !Equals [ !Select [ 13, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork14: !Not [ !Equals [ !Select [ 14, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork15: !Not [ !Equals [ !Select [ 15, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureAdministratorNetwork0: !Not [ !Equals [ !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork1: !Not [ !Equals [ !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork2: !Not [ !Equals [ !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork3: !Not [ !Equals [ !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork4: !Not [ !Equals [ !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork5: !Not [ !Equals [ !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork6: !Not [ !Equals [ !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork7: !Not [ !Equals [ !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork8: !Not [ !Equals [ !Select [ 8, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork9: !Not [ !Equals [ !Select [ 9, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork10: !Not [ !Equals [ !Select [ 10, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork11: !Not [ !Equals [ !Select [ 11, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork12: !Not [ !Equals [ !Select [ 12, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork13: !Not [ !Equals [ !Select [ 13, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork14: !Not [ !Equals [ !Select [ 14, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork15: !Not [ !Equals [ !Select [ 15, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: DownloadScriptFromS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${ScriptsBucket}/Windows/*
                    - ScriptsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  - !Sub
                    - arn:aws:s3:::${ScriptsBucket}/WindowsWebServer/*
                    - ScriptsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  - !Sub
                    - arn:aws:s3:::${ScriptsBucket}/Modules/*
                    - ScriptsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ScriptsBucket
        - PolicyName: DownloadConfigurationFromS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${ConfigurationsBucket}/Windows/*
                    - ConfigurationsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
                  - !Sub
                    - arn:aws:s3:::${ConfigurationsBucket}/WindowsWebServer/*
                    - ConfigurationsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
        - PolicyName: DownloadExampleFromS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${ExamplesBucket}/Windows/*
                    - ExamplesBucket: !ImportValue
                        Fn::Sub: ${BuildBucketsStackName}-ExamplesBucket
                  - !Sub
                    - arn:aws:s3:::${ExamplesBucket}/WindowsWebServer/*
                    - ExamplesBucket: !ImportValue
                        Fn::Sub: ${BuildBucketsStackName}-ExamplesBucket
  LogGroupName:
    Type: Custom::LogGroupName
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${CodesStackName}-LogGroupNameFunctionArn
      CompanyName: !Ref CompanyName
      SystemName: !Ref SystemName
      ApplicationName: !Ref WindowsWebServerApplicationName
      EnvironmentName: !If [ ConfigureAccountEnvironment, !Ref EnvironmentName, !Ref 'AWS::NoValue' ]
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LogGroupName
      RetentionInDays: !Ref LogRetention
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${EnvironmentName}-${WindowsWebServerApplicationName}-InstanceSecurityGroup
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      SecurityGroupIngress:
        - !If
          - ConfigureUserNetwork0
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 0, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork0
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 0, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 0, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork1
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 1, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork1
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 1, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork1
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 1, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork2
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 2, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork2
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 2, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork2
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 2, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork3
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 3, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork3
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 3, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork3
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 3, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork4
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 4, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork4
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 4, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork4
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 4, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork5
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 5, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork5
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 5, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork5
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 5, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork6
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 6, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork6
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 6, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork6
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 6, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork7
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 7, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork7
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 7, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork7
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 7, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork8
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 8, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 8, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork8
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 8, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 8, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork8
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 8, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 8, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork9
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 9, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 9, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork9
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 9, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 9, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork9
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 9, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 9, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork10
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 10, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 10, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork10
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 10, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 10, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork10
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 10, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 10, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork11
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 11, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 11, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork11
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 11, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 11, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork11
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 11, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 11, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork12
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 12, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 12, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork12
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 12, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 12, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork12
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 12, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 12, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork13
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 13, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 13, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork13
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 13, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 13, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork13
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 13, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 13, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork14
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 14, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 14, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork14
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 14, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 14, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork14
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 14, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 14, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork15
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 15, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 15, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork15
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 15, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 15, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork15
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 15, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 15, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: 3389
            ToPort: 3389
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (RDP)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: 3389
            ToPort: 3389
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (RDP)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: 3389
            ToPort: 3389
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (RDP)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: 3389
            ToPort: 3389
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (RDP)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: tcp
            FromPort: 3389
            ToPort: 3389
            CidrIp: !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (RDP)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: tcp
            FromPort: 3389
            ToPort: 3389
            CidrIp: !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (RDP)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: tcp
            FromPort: 3389
            ToPort: 3389
            CidrIp: !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (RDP)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: tcp
            FromPort: 3389
            ToPort: 3389
            CidrIp: !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (RDP)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork8
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 8, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 8, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork8
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 8, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 8, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork8
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 8, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 8, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork8
          - IpProtocol: tcp
            FromPort: 3389
            ToPort: 3389
            CidrIp: !Select [ 8, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (RDP)
              - NetworkDescription: !Select [ 8, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork9
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 9, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 9, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork9
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 9, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 9, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork9
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 9, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 9, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork9
          - IpProtocol: tcp
            FromPort: 3389
            ToPort: 3389
            CidrIp: !Select [ 9, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (RDP)
              - NetworkDescription: !Select [ 9, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork10
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 10, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 10, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork10
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 10, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 10, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork10
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 10, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 10, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork10
          - IpProtocol: tcp
            FromPort: 3389
            ToPort: 3389
            CidrIp: !Select [ 10, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (RDP)
              - NetworkDescription: !Select [ 10, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork11
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 11, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 11, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork11
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 11, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 11, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork11
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 11, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 11, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork11
          - IpProtocol: tcp
            FromPort: 3389
            ToPort: 3389
            CidrIp: !Select [ 11, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (RDP)
              - NetworkDescription: !Select [ 11, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork12
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 12, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 12, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork12
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 12, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 12, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork12
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 12, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 12, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork12
          - IpProtocol: tcp
            FromPort: 3389
            ToPort: 3389
            CidrIp: !Select [ 12, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (RDP)
              - NetworkDescription: !Select [ 12, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork13
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 13, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 13, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork13
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 13, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 13, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork13
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 13, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 13, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork13
          - IpProtocol: tcp
            FromPort: 3389
            ToPort: 3389
            CidrIp: !Select [ 13, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (RDP)
              - NetworkDescription: !Select [ 13, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork14
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 14, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 14, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork14
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 14, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 14, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork14
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 14, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 14, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork14
          - IpProtocol: tcp
            FromPort: 3389
            ToPort: 3389
            CidrIp: !Select [ 14, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (RDP)
              - NetworkDescription: !Select [ 14, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork15
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 15, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 15, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork15
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 15, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 15, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork15
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 15, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 15, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork15
          - IpProtocol: tcp
            FromPort: 3389
            ToPort: 3389
            CidrIp: !Select [ 15, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (RDP)
              - NetworkDescription: !Select [ 15, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${WindowsWebServerApplicationName}-InstanceSecurityGroup
  WindowsImage:
    Type: Custom::WindowsImage
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${AMIFunctionsStackName}-WindowsImageFunctionArn
      OSName: !Ref OSName
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref Role
  HostName:
    Type: Custom::HostName
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${CodesStackName}-HostNameFunctionArn
      CompanyName: !Ref CompanyName
      LocationName: !Ref AWS::Region
      EnvironmentName: !Ref EnvironmentName
      ApplicationName: !Ref WindowsWebServerApplicationName
      InstanceNumber: 01
      ZoneCode: a
  Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Credentials:
          type: S3
          roleName: !Ref Role
          buckets:
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ScriptsBucket
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
            - !ImportValue
              Fn::Sub: ${BuildBucketsStackName}-ExamplesBucket
      AWS::CloudFormation::Init:
        configSets:
          All:
            - InstallCloudFormationModule
            - RegisterCloudFormationSignal
            - ConfigureOS
            - ConfigureCFN
            - InstallSSMAgent
            - InstallCloudWatchAgent
            - ConfigureCloudWatchAgent
            - ConfigureHostName
            - InstallWebServer
            - !If [ InstallApplication, InstallApplication, ConfigureApplication ]
            - SignalCloudFormation
        InstallCloudFormationModule:
          files:
            C:\Windows\system32\WindowsPowerShell\v1.0\Modules\CloudFormation\CloudFormation.psm1:
              source: !Sub
                - https://${ScriptsBucket}.${s3}.amazonaws.com/Modules/CloudFormation.psm1
                - ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
        RegisterCloudFormationSignal:
          commands:
            01-register-signal:
              command: !Sub 'powershell.exe -Command "Register-CloudFormationSignal
                -Stack ''${AWS::StackName}''
                -Resource ''Instance''
                -Region ''${AWS::Region}''"'
              waitAfterCompletion: 0
        ConfigureOS:
          commands:
            01-set-execution-policy:
              command: powershell.exe -Command "Set-ExecutionPolicy RemoteSigned -Force"
              waitAfterCompletion: 0
            02-disable-windows-firewall:
              command: powershell.exe -Command "Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False"
              waitAfterCompletion: 0
        ConfigureCFN:
          files:
            C:\cfn\cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            C:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Instance.Metadata.AWS::CloudFormation::Init
                action=cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource Instance --region ${AWS::Region}
          services:
            windows:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - C:\cfn\cfn-hup.conf
                  - C:\cfn\hooks.d\cfn-auto-reloader.conf
        InstallSSMAgent:
          files:
            C:\cfn\temp\AmazonSSMAgentSetup.exe:
              source: https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/windows_amd64/AmazonSSMAgentSetup.exe
          commands:
            01-install-ssm-agent:
              command: C:\cfn\temp\AmazonSSMAgentSetup.exe /install /passive /quiet
              ignoreErrors: false
        InstallCloudWatchAgent:
          sources:
            C:\cfn\temp\AmazonCloudWatchAgent: https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/AmazonCloudWatchAgent.zip
          commands:
            01-install-cloudwatch-agent:
              command: powershell.exe -Command ".\install.ps1"
              cwd: C:\cfn\temp\AmazonCloudWatchAgent
              ignoreErrors: false
        ConfigureCloudWatchAgent:
          files:
            C:\ProgramData\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent.json:
              content: !Sub |
                {
                  "agent" : {
                    "metrics_collection_interval" : 60,
                    "logfile" : "C:\\Program Files\\Amazon\\CloudWatchAgent\\Logs\\amazon-cloudwatch-agent.log",
                    "debug" : false
                  },
                  "metrics" : {
                    "namespace" : "${SystemName}/${EnvironmentName}-${WindowsWebServerApplicationName}",
                    "metrics_collected" : {
                      "Memory" : {
                        "measurement" : [
                          { "name" : "% Committed Bytes In Use", "rename" : "MemoryCommittedPercent", "unit" : "Percent" },
                          { "name" : "Pages/sec", "rename" : "MemoryPageOps", "unit" : "Count/Second" }
                        ]
                      },
                      "LogicalDisk" : {
                        "resources" : [
                          "C:",
                          "D:"
                        ],
                        "measurement" : [
                          { "name" : "% Free Space", "rename" : "DiskFreePercent", "unit" : "Percent" },
                          { "name" : "Free Megabytes", "rename" : "DiskFreeMegabytes", "unit" : "Megabytes" },
                          { "name" : "Disk Bytes/sec", "rename" : "DiskBytesPerSecond", "unit" : "Bytes/Second" },
                          { "name" : "Avg. Disk Queue Length", "rename" : "DiskQueueLength", "unit" : "Count" }
                        ]
                      }
                    },
                    "append_dimensions" : {
                      "InstanceId" : "${!aws:InstanceId}",
                      "AutoScalingGroupName" : "${!aws:AutoScalingGroupName}"
                    },
                    "aggregation_dimensions" : [
                      [ "InstanceId" ],
                      [ "AutoScalingGroupName" ],
                      []
                    ]
                  },
                  "logs" : {
                    "logs_collected" : {
                      "windows_events" : {
                        "collect_list" : [
                          {
                            "event_name" : "Application",
                            "event_levels" : [ "ERROR", "WARNING", "INFORMATION" ],
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Web/{instance_id}/ApplicationEventLog",
                            "event_format" : "text"
                          },
                          {
                            "event_name" : "System",
                            "event_levels" : [ "ERROR", "WARNING", "INFORMATION" ],
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Web/{instance_id}/SystemEventLog",
                            "event_format" : "text"
                          },
                          {
                            "event_name" : "Security",
                            "event_levels" : [ "ERROR", "WARNING", "INFORMATION" ],
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Web/{instance_id}/SecurityEventLog",
                            "event_format" : "text"
                          }
                        ]
                      },
                      "files" : {
                        "collect_list" : [
                          {
                            "file_path" : "C:\\Program Files\\Amazon\\CloudWatchAgent\\Logs\\amazon-cloudwatch-agent.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Web/{instance_id}/amazon-cloudwatch-agent.log",
                            "timezone" : "UTC"
                          },
                          {
                            "file_path" : "C:\\Program Files\\Amazon\\Ec2ConfigService\\Logs\\EC2ConfigLog.txt",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Web/{instance_id}/EC2ConfigLog.txt",
                            "timezone" : "UTC"
                          },
                          {
                            "file_path" : "C:\\cfn\\log\\cfn-init.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Web/{instance_id}/cfn-init.log",
                            "timestamp_format" : "%Y-%m-%d %H:%M:%S",
                            "timezone" : "Local"
                          },
                          {
                            "file_path" : "C:\\cfn\\log\\cfn-init-cmd.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Web/{instance_id}/cfn-init-cmd.log",
                            "timestamp_format" : "%Y-%m-%d %H:%M:%S",
                            "timezone" : "Local"
                          },
                          {
                            "file_path" : "C:\\cfn\\log\\cfn-hup.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Web/{instance_id}/cfn-hup.log",
                            "timestamp_format" : "%Y-%m-%d %H:%M:%S",
                            "timezone" : "Local"
                          },
                          {
                            "file_path" : "C:\\inetpub\\logs\\LogFiles\\W3SVC1\\*.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Web/{instance_id}/IISLogs",
                            "timezone" : "UTC"
                          }
                        ]
                      }
                    }
                  }
                }
          commands:
            01-start-cloudwatch-agent:
              command: powershell.exe -Command ".\amazon-cloudwatch-agent-ctl.ps1 -a fetch-config -m ec2 -c file:C:\ProgramData\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent.json -s"
              cwd: C:\Program Files\Amazon\AmazonCloudWatchAgent
              ignoreErrors: false
          services:
            windows:
              AmazonCloudWatchAgent:
                enabled: true
                ensureRunning: true
                files:
                  - C:\ProgramData\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent.json
        ConfigureHostName:
          files:
            C:\cfn\scripts\Configure-HostName.ps1:
              source: !Sub
                - https://${ScriptsBucket}.${s3}.amazonaws.com/Windows/Configure-HostName.ps1
                - ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
          commands:
            01-configure-hostname:
              command: !Sub powershell.exe -Command "C:\cfn\scripts\Configure-HostName.ps1
                -HostName ${HostName}"
              ignoreErrors: false
              waitAfterCompletion: forever
        InstallWebServer:
          commands:
            01-install-webserver:
              command: powershell.exe -Command "Install-WindowsFeature Web-Server -IncludeAllSubFeature"
              waitAfterCompletion: 0
        InstallApplication:
          sources:
            C:\Inetpub\wwwroot: !Sub
              - https://${ExamplesBucket}.${s3}.amazonaws.com/${WindowsWebServerApplicationKey}
              - ExamplesBucket: !ImportValue
                  Fn::Sub: ${BuildBucketsStackName}-ExamplesBucket
                s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
        ConfigureApplication:
          files:
            C:\Inetpub\wwwroot\index.htm:
              content: !Sub |
                <html>
                <head>
                <title>${WindowsWebServerApplicationName} Test Application</title>
                </head>
                <body>
                <h1>${WindowsWebServerApplicationName} (${WindowsWebServerApplicationVersion})</h1>
                </body>
                </html>
        SignalCloudFormation:
          commands:
            01-signal-success:
              command: powershell.exe -Command "Send-CloudFormationSuccess"
    Properties:
      ImageId: !Ref WindowsImage
      InstanceType: !FindInMap [ InstanceTypeMap, Web, !Ref EnvironmentType ]
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      Monitoring: true
      NetworkInterfaces:
        - Description: !Sub ${EnvironmentName}-${WindowsWebServerApplicationName}-NetworkInterface-eth0
          DeviceIndex: 0
          SubnetId: !ImportValue
            Fn::Sub: ${VPCStackName}-WebSubnetA
          GroupSet:
            - !Ref InstanceSecurityGroup
          DeleteOnTermination: true
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: 32
            DeleteOnTermination: true
        - DeviceName: /dev/xvdb
          Ebs:
            SnapshotId: !If [ ConfigureDSnapshot, !Ref DSnapshot, !Ref 'AWS::NoValue' ]
            VolumeType: gp2
            VolumeSize: 8
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${WindowsWebServerApplicationName}-Instance
        #- Key: HostName
        #  Value: !Ref HostName
      UserData:
        Fn::Base64: !Sub |
          <script>
          cfn-init.exe --verbose --configsets All --stack ${AWS::StackId} --resource Instance --region ${AWS::Region}
          </script>
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
  # Do not use the HostName Tag on any Instances along with explicitly defined HostNameRecordSet Resource as you see here
  # If a HostName tag exists, the PrivateRecordSet Function will attempt to manage Private DNS Records, resulting in a conflict
  PrivateHostNameRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PrivateHostedZone
      Comment: !Sub Private DNS Host Name of the ${WindowsWebServerApplicationName} Instance
      Name: !Sub
        - ${HostName}.${VPCPrivateDomain}.
        - VPCPrivateDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPrivateDomain
      Type: A
      TTL: 900
      ResourceRecords:
        - !GetAtt Instance.PrivateIp
  PrivateServiceNameRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PrivateHostedZone
      Comment: !Sub Private DNS Service Name of the ${WindowsWebServerApplicationName} Service
      Name: !Sub
        - ${WindowsWebServerServiceName}.${VPCPrivateDomain}.
        - VPCPrivateDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPrivateDomain
      Type: CNAME
      TTL: 900
      ResourceRecords:
        - !Sub
          - ${HostName}.${VPCPrivateDomain}
          - VPCPrivateDomain: !ImportValue
              Fn::Sub: ${VPCStackName}-VPCPrivateDomain
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      InstanceId: !Ref Instance
  PublicHostNameRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PublicHostedZone
      Comment: !Sub Public DNS Host Name of the ${WindowsWebServerApplicationName} Instance
      Name: !Sub
        - ${HostName}.${VPCPublicDomain}.
        - VPCPublicDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPublicDomain
      Type: A
      TTL: 900
      ResourceRecords:
        - !Ref EIP
  PublicServiceNameRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PublicHostedZone
      Comment: !Sub Public DNS Service Name of the ${WindowsWebServerApplicationName} Service
      Name: !Sub
        - ${WindowsWebServerServiceName}.${VPCPublicDomain}.
        - VPCPublicDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPublicDomain
      Type: CNAME
      TTL: 900
      ResourceRecords:
        - !Sub
          - ${HostName}.${VPCPublicDomain}
          - VPCPublicDomain: !ImportValue
              Fn::Sub: ${VPCStackName}-VPCPublicDomain
  CPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: The average CPU Utilization is greater than 90% over 3 consecutive minutes
      AlarmActions:
        - !ImportValue
          Fn::Sub: ${TopicsStackName}-AlarmsTopic
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 90
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref Instance
  MemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: The committed memory is greater than 50% over 3 consecutive minutes
      AlarmActions:
        - !ImportValue
          Fn::Sub: ${TopicsStackName}-AlarmsTopic
      Namespace: !Sub ${SystemName}/${EnvironmentName}-${WindowsWebServerApplicationName}
      MetricName: MemoryCommittedPercent
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 50
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref Instance
        - Name: objectname
          Value: Memory
  Disk1Alarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'The disk C: percent free is less than than 10% over 3 consecutive minutes'
      AlarmActions:
        - !ImportValue
          Fn::Sub: ${TopicsStackName}-AlarmsTopic
      Namespace: !Sub ${SystemName}/${EnvironmentName}-${WindowsWebServerApplicationName}
      MetricName: DiskFreePercent
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 10
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref Instance
        - Name: objectname
          Value: LogicalDisk
        - Name: instance
          Value: 'C:'
  Disk2Alarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'The disk D: percent free is less than than 10% over 3 consecutive minutes'
      AlarmActions:
        - !ImportValue
          Fn::Sub: ${TopicsStackName}-AlarmsTopic
      Namespace: !Sub ${SystemName}/${EnvironmentName}-${WindowsWebServerApplicationName}
      MetricName: DiskFreePercent
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 10
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref Instance
        - Name: objectname
          Value: LogicalDisk
        - Name: instance
          Value: 'D:'
  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub
        - ${EnvironmentName}-${WindowsWebServerApplicationName}-${RegionName}
        - RegionName: !FindInMap [ RegionNameMap, !Ref 'AWS::Region', Name ]
      DashboardBody: !Sub |
        {
          "widgets" : [ {
            "type" : "text",
            "x" : 0,
            "y" : 0,
            "width" : 24,
            "height" : 1,
            "properties" : {
              "markdown" : "# ${EnvironmentName}-${WindowsWebServerApplicationName}"
            }
          },
          {
            "type" : "text",
            "x" : 0,
            "y" : 1,
            "width" : 24,
            "height" : 1,
            "properties" : {
              "markdown" : "## Instance"
            }
          },
          {
            "type" : "text",
            "x" : 0,
            "y" : 2,
            "width" : 24,
            "height" : 1,
            "properties" : {
              "markdown" : "### Graphs"
            }
          },
          {
            "type" : "metric",
            "x" : 0,
            "y" : 3,
            "width" : 6,
            "height" : 9,
            "properties" : {
              "title" : "Instance: CPU",
              "view" : "timeSeries",
              "stacked" : false,
              "period" : 60,
              "region" : "${AWS::Region}",
              "metrics" : [
                [ "AWS/EC2", "CPUUtilization", "InstanceId", "${Instance}", { "label" : "CPU Utilization" } ],
                [ "AWS/EC2", "CPUSurplusCreditBalance", "InstanceId", "${Instance}", { "label" : "CPU Surplus Credit Balance", "yAxis" : "right" } ]
              ],
              "yAxis" : {
                "left" : { "min" : 0, "max" : 100 }
              }
            }
          },
          {
            "type" : "metric",
            "x" : 6,
            "y" : 3,
            "width" : 6,
            "height" : 9,
            "properties" : {
              "title" : "Instance: Memory",
              "view" : "timeSeries",
              "stacked" : false,
              "period" : 60,
              "region" : "${AWS::Region}",
              "metrics" : [
                [ "${SystemName}/${EnvironmentName}-${WindowsWebServerApplicationName}", "MemoryCommittedPercent", "InstanceId", "${Instance}", "objectname", "Memory", { "label" : "Memory Committed %" } ],
                [ "${SystemName}/${EnvironmentName}-${WindowsWebServerApplicationName}", "MemoryPageOps", "InstanceId", "${Instance}", "objectname", "Memory", { "label" : "Hard Page Faults / second", "yAxis" : "right" } ]
              ],
              "yAxis" : {
                "left" : { "min" : 0, "max" : 100 }
              }
            }
          },
          {
            "type" : "metric",
            "x" : 12,
            "y" : 3,
            "width" : 6,
            "height" : 9,
            "properties" : {
              "title" : "Instance: Disk",
              "view" : "timeSeries",
              "stacked" : false,
              "period" : 60,
              "region" : "${AWS::Region}",
              "metrics" : [
                [ { "expression" : "100-m1", "label" : "Disk Used % (C:)", "id" : "e1" } ],
                [ { "expression" : "100-m2", "label" : "Disk Used % (D:)", "id" : "e2" } ],
                [ "${SystemName}/${EnvironmentName}-${WindowsWebServerApplicationName}", "DiskFreePercent", "InstanceId", "${Instance}", "objectname", "LogicalDisk", "instance", "C:", { "label" : "Disk Free % (C:)", "id" : "m1", "visible" : false } ],
                [ "${SystemName}/${EnvironmentName}-${WindowsWebServerApplicationName}", "DiskFreePercent", "InstanceId", "${Instance}", "objectname", "LogicalDisk", "instance", "D:", { "label" : "Disk Free % (D:)", "id" : "m2", "visible" : false } ]
              ],
              "yAxis" : {
                "left" : { "min" : 0, "max" : 100 }
              }
            }
          },
          {
            "type" : "metric",
            "x" : 18,
            "y" : 3,
            "width" : 6,
            "height" : 9,
            "properties" : {
              "title" : "Instance: Network",
              "view" : "timeSeries",
              "stacked" : false,
              "period" : 60,
              "region" : "${AWS::Region}",
              "metrics" : [
                [ "AWS/EC2", "NetworkOut", "InstanceId", "${Instance}", { "label" : "Network Out" } ],
                [ "AWS/EC2", "NetworkIn", "InstanceId", "${Instance}", { "label" : "Network In" } ]
              ]
            }
          },
          {
            "type" : "text",
            "x" : 0,
            "y" : 12,
            "width" : 24,
            "height" : 1,
            "properties" : {
              "markdown" : "### Alarms"
            }
          },
          {
            "type" : "metric",
            "x" : 0,
            "y" : 13,
            "width" : 3,
            "height" : 6,
            "properties" : {
              "title" : "CPU Alarm",
              "view" : "timeSeries",
              "stacked" : false,
              "annotations" : {
                "alarms" : [ "${CPUAlarm.Arn}" ]
              }
            }
          },
          {
            "type" : "metric",
            "x" : 3,
            "y" : 13,
            "width" : 3,
            "height" : 6,
            "properties" : {
              "title" : "Memory Alarm",
              "view" : "timeSeries",
              "stacked" : false,
              "annotations" : {
                "alarms" : [ "${MemoryAlarm.Arn}" ]
              }
            }
          },
          {
            "type" : "metric",
            "x" : 6,
            "y" : 13,
            "width" : 3,
            "height" : 6,
            "properties" : {
              "title" : "Disk (C:) Alarm",
              "view" : "timeSeries",
              "stacked" : false,
              "annotations" : {
                "alarms" : [ "${Disk1Alarm.Arn}" ]
              }
            }
          },
          {
            "type" : "metric",
            "x" : 9,
            "y" : 13,
            "width" : 3,
            "height" : 6,
            "properties" : {
              "title" : "Disk (D:) Alarm",
              "view" : "timeSeries",
              "stacked" : false,
              "annotations" : {
                "alarms" : [ "${Disk2Alarm.Arn}" ]
              }
            }
          } ]
        }
Outputs:
  InstanceSecurityGroup:
    Description: The Instance SecurityGroup
    Value: !Ref InstanceSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-InstanceSecurityGroup
  EIP:
    Description: The Public Address of the WindowsWebServer Instance
    Value: !Ref EIP
  PublicHostName:
    Description: The Public DNS Host Name of the WindowsWebServer Instance
    Value: !Sub
      - ${HostName}.${VPCPublicDomain}
      - VPCPublicDomain: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPublicDomain
  PublicServiceName:
    Description: The Public DNS Service Name of the WindowsWebServer Service
    Value: !Sub
      - ${WindowsWebServerServiceName}.${VPCPublicDomain}
      - VPCPublicDomain: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPublicDomain
  PublicWebsiteURL:
    Description: The Public Website URL
    Value: !Sub
      - http://${WindowsWebServerServiceName}.${VPCPublicDomain}/
      - VPCPublicDomain: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPublicDomain
