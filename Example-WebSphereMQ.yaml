AWSTemplateFormatVersion: 2010-09-09
Description: Example-WebSphereMQ Template.
  This template creates the WebSphereMQ Example Application - this is an example not including full Instance configuration from a prior project.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - WindowsBastionsStackName
          - VPNStackName
          - VPCStackName
          - AMIFunctionsStackName
          - BucketsStackName
          - TopicsStackName
          - KeysStackName
          - CodesStackName
          - BaselineStackName
      - Label:
          default: Resource Dependencies
        Parameters:
          - KeyPairName
      - Label:
          default: System Configuration
        Parameters:
          - CompanyName
          - SystemName
      - Label:
          default: Environment Configuration
        Parameters:
          - AccountName
          - EnvironmentName
          - EnvironmentType
          - EnvironmentZones
          - OSName
          - OSDate
      - Label:
          default: Application Dependencies Configuration
        Parameters:
          - WebSphereMQProductKey
      - Label:
          default: Application Configuration
        Parameters:
          - ApplicationName
          - ApplicationDomain
          - UseStaticAddress
          - EFSPerformanceMode
          - UseFileSystemMonitoring
          - LogRetention
          - Schedule
      - Label:
          default: Security Configuration
        Parameters:
          - AdministratorNetworks
          - AdministratorNetworkDescriptions
          - IntegrationNetworks
          - IntegrationNetworkDescriptions
    ParameterLabels:
      WindowsBastionsStackName:
        default: WindowsBastions Stack Name
      VPNStackName:
        default: VPN Stack Name
      VPCStackName:
        default: VPC Stack Name
      AMIFunctionsStackName:
        default: AMIFunctions Stack Name
      BucketsStackName:
        default: Buckets Stack Name
      TopicsStackName:
        default: Topics Stack Name
      KeysStackName:
        default: Keys Stack Name
      CodesStackName:
        default: Codes Stack Name
      BaselineStackName:
        default: Baseline Stack Name
      KeyPairName:
        default: KeyPair Name
      CompanyName:
        default: Company Name
      SystemName:
        default: System Name
      AccountName:
        default: Account Name
      EnvironmentName:
        default: Environment Name
      EnvironmentType:
        default: Environment Type
      EnvironmentZones:
        default: Environment Zones
      OSName:
        default: Operating System Name
      OSDate:
        default: Operating System Date
      WebSphereMQProductKey:
        default: WebSphereMQ Product S3 Key
      ApplicationName:
        default: Application Name
      ApplicationDomain:
        default: Application Domain
      UseStaticAddress:
        default: Use Static Address
      EFSPerformanceMode:
        default: EFS Performance Mode
      UseFileSystemMonitoring:
        default: Use FileSystem Monitoring
      LogRetention:
        default: Log Retention
      Schedule:
        default: Schedule
      AdministratorNetworks:
        default: Administrator Networks
      AdministratorNetworkDescriptions:
        default: Administrator Network Descriptions
      IntegrationNetworks:
        default: Integration Networks
      IntegrationNetworkDescriptions:
        default: Integration Network Descriptions
Parameters:
  WindowsBastionsStackName:
    Description: Name of the CloudFormation Stack containing the Windows Bastions
    Type: String
    MaxLength: 64
    Default: ''
    AllowedPattern: (^$|^[A-Z][-a-zA-Z0-9]*$)
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  VPNStackName:
    Description: Name of the CloudFormation Stack containing the VPN Instances
    Type: String
    MaxLength: 64
    Default: ''
    AllowedPattern: (^$|^[A-Z][-a-zA-Z0-9]*$)
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  VPCStackName:
    Description: Name of the CloudFormation Stack containing the VPC
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Production-VPC
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  AMIFunctionsStackName:
    Description: Name of the CloudFormation Stack containing the AMI Functions
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: AMIFunctions
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  BucketsStackName:
    Description: Name of the CloudFormation Stack containing Buckets
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Buckets
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  TopicsStackName:
    Description: Name of the CloudFormation Stack containing Topics
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Topics
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  KeysStackName:
    Description: Name of the CloudFormation Stack containing Keys
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Keys
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  CodesStackName:
    Description: Name of the CloudFormation Stack containing the Codes Resources
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Codes
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  BaselineStackName:
    Description: Name of the CloudFormation Stack containing the Baseline Resources
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Baseline
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  KeyPairName:
    Description: Name of an existing KeyPair to enable SSH access to the Instances
    Type: AWS::EC2::KeyPair::KeyName
    MaxLength: 32
    Default: administrator
    AllowedPattern: (^$|^[_a-zA-Z0-9]*$)
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  CompanyName:
    Description: Name of the Company associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: DXC
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  SystemName:
    Description: Name of the System associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: Prototype
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  AccountName:
    Description: Name of the Account associated with the Stack
    Type: String
    Default: Production
    AllowedValues:
      - Production
      - Staging
      - UAT
      - QA
      - Testing
      - Development
      - Build
      - Core
      - Recovery
      - Log
      - Management
      - Jumpstart
      - Organization
    ConstraintDescription: must be Production, Staging, UAT, QA, Testing, Development, Build, Core, Recovery, Log, Management, Jumpstart or Organization.
  EnvironmentName:
    Description: Name of the Environment associated with the Stack
    Type: String
    Default: Production
    AllowedValues:
      - Production
      - Staging
      - UAT
      - QA
      - Testing
      - Development
      - Build
      - Core
      - Recovery
      - Log
      - Identity
      - Management
      - Organization
    ConstraintDescription: must be Production, Staging, UAT, QA, Testing, Development, Build, Core, Recovery, Log, Identity, Management or Organization.
  EnvironmentType:
    Description: Type of the Environment to build. Used to select size-related options in Mappings
    Type: String
    Default: small
    AllowedValues:
      - small
      - medium
      - large
      - xlarge
      - 2xlarge
      - 4xlarge
      - 8xlarge
    ConstraintDescription: must be micro, small, medium, large, xlarge, 2xlarge, 4xlarge or 8xlarge.
  EnvironmentZones:
    Description: Number of Availability Zones to build
    Type: String
    Default: 2
    AllowedValues:
      - 1
      - 2
    ConstraintDescription: must be 1 or 2.
  OSName:
    Description: The Operating System to use for Instances
    Type: String
    Default: RHEL 7.7
    AllowedValues:
      - Amazon Linux 2
      - Amazon Linux 2.0
      - RHEL 7
      - RHEL 7.7
      - RHEL 7.6
    ConstraintDescription: must be "Amazon Linux 2" (latest), "Amazon Linux 2.0", "RHEL 7" (latest), "RHEL 7.7" or "RHEL 7.6".
  OSDate:
    Description: Optional Operating System Date, specify to select a specific publication date for the Image
    Type: String
    Default: '20190723'
    AllowedPattern: (^$|^20(1[7-9]|[2-9][0-9])(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])$)
    ConstraintDescription: Must be a valid date in YYYYMMDD format.
  WebSphereMQProductKey:
    Description: Optional key of Object within the S3 Bucket containing the WebSphereMQ installer
    Type: String
    Default: ''
    AllowedPattern: (^$|^(?:Linux|WebSphereMQ)\/[-_.a-zA-Z0-9]*\.(?:zip|tgz|tar\.gz)$)
    ConstraintDescription: must be a valid installer filename, within the Linux or WebSphereMQ folders, if specified.
  ApplicationName:
    Description: Name of the Application associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: WebSphereMQ
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  ApplicationDomain:
    Description: DNS Name of the Application associated with the Stack
    Type: String
    MaxLength: 16
    Default: wmq
    AllowedPattern: ^[a-z][-a-z0-9]*$
    ConstraintDescription: must begin with a lower case letter and contain only lower case letters, numbers and dashes.
  UseStaticAddress:
    Description: Create and attach a separate Static Address
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    ConstraintDescription: must be either true or false.
  EFSPerformanceMode:
    Description: EFS Performance Mode
    Type: String
    Default: maxIO
    AllowedValues:
      - generalPurpose
      - maxIO
    ConstraintDescription: must be either generalPurpose or maxIO.
  UseFileSystemMonitoring:
    Description: Send EFS NFS Statistics to CloudWatch as Custom Metrics
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    ConstraintDescription: must be either true or false.
  LogRetention:
    Description: Number of days to retain CloudWatch Log Events
    Type: Number
    Default: 14
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
    ConstraintDescription: must be 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827 or 3653.
  Schedule:
    Description: Schedule Tag Value (blank disables Scheduler)
    Type: String
    Default: ''
    AllowedPattern: (^$|^([0-9]|1[0-9]|2[0-3]):[0-5][0-9]-([0-9]|1[0-9]|2[0-3]):[0-5][0-9]T?$)
    ConstraintDescription: See Scheduler Lambda Function description for Tag format.
  AdministratorNetworks:
    Description: Networks that can administer the Application
    Type: String
    Default: -,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 8 values, each an IP CIDR range of the form x.x.x.x/x or '-'.
  AdministratorNetworkDescriptions:
    Description: Descriptions of networks that can administer the Application
    Type: String
    Default: -,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 8 values, each a short text description or '-'.
  IntegrationNetworks:
    Description: Networks that can integrate with the Application
    Type: String
    Default: -,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 8 values, each an IP CIDR range of the form x.x.x.x/x or '-'.
  IntegrationNetworkDescriptions:
    Description: Descriptions of networks that can integrate with the Application
    Type: String
    Default: -,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 8 values, each a short text description or '-'.
Mappings:
  RegionNameMap:
    us-east-1:
      Name: Virginia
      Code: ue1
    us-east-2:
      Name: Ohio
      Code: ue2
    us-west-1:
      Name: California
      Code: uw1
    us-west-2:
      Name: Oregon
      Code: uw2
    ap-east-1:
      Name: HongKong
      Code: ae1
    ap-south-1:
      Name: Mumbai
      Code: ad1
    ap-northeast-2:
      Name: Seoul
      Code: an2
    ap-southeast-1:
      Name: Singapore
      Code: as1
    ap-southeast-2:
      Name: Sydney
      Code: as2
    ap-northeast-1:
      Name: Tokyo
      Code: an1
    ca-central-1:
      Name: Canada
      Code: cc1
    eu-central-1:
      Name: Frankfurt
      Code: ec1
    eu-west-1:
      Name: Ireland
      Code: ew1
    eu-west-2:
      Name: London
      Code: ew2
    eu-west-3:
      Name: Paris
      Code: ew3
    eu-north-1:
      Name: Stockholm
      Code: en1
    me-south-1:
      Name: Bahrain
      Code: ms1
    sa-east-1:
      Name: SaoPaulo
      Code: se1
  InstanceTypeMap:
    Queue:
      small: t3.small
      medium: t3.medium
      large: c5.large
      xlarge: c5.xlarge
      2xlarge: c5.2xlarge
      4xlarge: c5.4xlarge
      8xlarge: c5.8xlarge
Conditions:
  ConfigureAccountEnvironment: !Or [ !Not [ !Equals [ !Ref AccountName, !Ref EnvironmentName ]], !Equals [ !Ref AccountName, Jumpstart ]]
  ConfigureGlobal: !Equals [ !Ref 'AWS::Region', us-east-1 ]
  ConfigureWindowsBastionsIntegration: !Not [ !Equals [ !Ref WindowsBastionsStackName, '' ]]
  ConfigureVPNIntegration: !Not [ !Equals [ !Ref VPNStackName, '' ]]
  #ConfigureEncryption: !Not [ !Equals [ !Ref KeysStackName, '' ]] # ToDo: Fix how we configure Encryption, custom vs user keys
  #ConfigureEncryptionKey: !Not [ !Equals [ !Ref KmsKey, 'aws/rds' ]]
  ConfigureKeyPair: !Not [ !Equals [ !Ref KeyPairName, '' ]]
  ConfigureMultiZone: !Not [ !Equals [ !Ref EnvironmentZones, 1 ]]
  ConfigureAMZN: !Equals [ !Select [ 0, !Split [ ' ', !Ref OSName ]], Amazon ]
  ConfigureRHEL: !Equals [ !Select [ 0, !Split [ ' ', !Ref OSName ]], RHEL ]
  ConfigureDomainName: !Not [ !Equals [ !Ref ApplicationDomain, '' ]]
  InstallWebSphereMQ: !Not [ !Equals [ !Ref WebSphereMQProductKey, '' ]]
  ConfigureStaticAddress: !Equals [ !Ref UseStaticAddress, true ]
  ConfigureStaticAddress&MultiZone: !And [ !Condition ConfigureStaticAddress, !Condition ConfigureMultiZone ]
  ConfigureFileSystemMonitoring: !Equals [ !Ref UseFileSystemMonitoring, true ]
  ConfigureSchedule: !Not [ !Equals [ !Ref Schedule, '' ]]
  ConfigureAdministratorNetwork0: !Not [ !Equals [ !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork1: !Not [ !Equals [ !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork2: !Not [ !Equals [ !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork3: !Not [ !Equals [ !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork4: !Not [ !Equals [ !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork5: !Not [ !Equals [ !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork6: !Not [ !Equals [ !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork7: !Not [ !Equals [ !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureIntegrationNetwork0: !Not [ !Equals [ !Select [ 0, !Split [ ',', !Ref IntegrationNetworks ]], '-' ]]
  ConfigureIntegrationNetwork1: !Not [ !Equals [ !Select [ 1, !Split [ ',', !Ref IntegrationNetworks ]], '-' ]]
  ConfigureIntegrationNetwork2: !Not [ !Equals [ !Select [ 2, !Split [ ',', !Ref IntegrationNetworks ]], '-' ]]
  ConfigureIntegrationNetwork3: !Not [ !Equals [ !Select [ 3, !Split [ ',', !Ref IntegrationNetworks ]], '-' ]]
  ConfigureIntegrationNetwork4: !Not [ !Equals [ !Select [ 4, !Split [ ',', !Ref IntegrationNetworks ]], '-' ]]
  ConfigureIntegrationNetwork5: !Not [ !Equals [ !Select [ 5, !Split [ ',', !Ref IntegrationNetworks ]], '-' ]]
  ConfigureIntegrationNetwork6: !Not [ !Equals [ !Select [ 6, !Split [ ',', !Ref IntegrationNetworks ]], '-' ]]
  ConfigureIntegrationNetwork7: !Not [ !Equals [ !Select [ 7, !Split [ ',', !Ref IntegrationNetworks ]], '-' ]]
Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: DownloadScriptFromS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${ScriptsBucket}/Linux/*
                    - ScriptsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  - !Sub
                    - arn:aws:s3:::${ScriptsBucket}/WebSphereMQ/*
                    - ScriptsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ScriptsBucket
        - PolicyName: DownloadConfigurationFromS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${ConfigurationsBucket}/Linux/*
                    - ConfigurationsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
                  - !Sub
                    - arn:aws:s3:::${ConfigurationsBucket}/WebSphereMQ/*
                    - ConfigurationsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
        - PolicyName: DownloadProductFromS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${ProductsBucket}/Linux/*
                    - ProductsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ProductsBucket
                  - !Sub
                    - arn:aws:s3:::${ProductsBucket}/WebSphereMQ/*
                    - ProductsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ProductsBucket
  LogGroupName:
    Type: Custom::LogGroupName
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${CodesStackName}-LogGroupNameFunctionArn
      CompanyName: !Ref CompanyName
      SystemName: !Ref SystemName
      ApplicationName: !Ref ApplicationName
      EnvironmentName: !If [ ConfigureAccountEnvironment, !Ref EnvironmentName, !Ref 'AWS::NoValue' ]
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LogGroupName
      RetentionInDays: !Ref LogRetention
  ClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${EnvironmentName}-${ApplicationName}-ClientSecurityGroup
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${ApplicationName}-ClientSecurityGroup
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${EnvironmentName}-${ApplicationName}-InstanceSecurityGroup
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
          Description: Global (ICMP Echo Reply)
        - IpProtocol: icmp
          FromPort: 3
          ToPort: 3
          CidrIp: 0.0.0.0/0
          Description: Global (ICMP Destination Unreachable)
        - IpProtocol: icmp
          FromPort: 8
          ToPort: 8
          CidrIp: 0.0.0.0/0
          Description: Global (ICMP Echo)
        - IpProtocol: icmp
          FromPort: 11
          ToPort: 11
          CidrIp: 0.0.0.0/0
          Description: Global (ICMP Time Exceeded)
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !ImportValue
            Fn::Sub: ${VPNStackName}-InstanceSecurityGroup
          Description: !Sub ${VPNStackName}-InstanceSecurityGroup (SSH)
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - IpProtocol: tcp
          FromPort: 1414
          ToPort: 1430
          SourceSecurityGroupId: !Ref 'ClientSecurityGroup'
          Description: !Sub ${EnvironmentName}-${ApplicationName}-ClientSecurityGroup (WMQ)
        - !If
          - ConfigureIntegrationNetwork0
          - IpProtocol: tcp
            FromPort: 1414
            ToPort: 1430
            CidrIp: !Select [ 0, !Split [ ',', !Ref IntegrationNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (WMQ)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref IntegrationNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureIntegrationNetwork1
          - IpProtocol: tcp
            FromPort: 1414
            ToPort: 1430
            CidrIp: !Select [ 1, !Split [ ',', !Ref IntegrationNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (WMQ)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref IntegrationNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureIntegrationNetwork2
          - IpProtocol: tcp
            FromPort: 1414
            ToPort: 1430
            CidrIp: !Select [ 2, !Split [ ',', !Ref IntegrationNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (WMQ)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref IntegrationNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureIntegrationNetwork3
          - IpProtocol: tcp
            FromPort: 1414
            ToPort: 1430
            CidrIp: !Select [ 3, !Split [ ',', !Ref IntegrationNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (WMQ)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref IntegrationNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureIntegrationNetwork4
          - IpProtocol: tcp
            FromPort: 1414
            ToPort: 1430
            CidrIp: !Select [ 4, !Split [ ',', !Ref IntegrationNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (WMQ)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref IntegrationNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureIntegrationNetwork5
          - IpProtocol: tcp
            FromPort: 1414
            ToPort: 1430
            CidrIp: !Select [ 5, !Split [ ',', !Ref IntegrationNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (WMQ)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref IntegrationNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureIntegrationNetwork6
          - IpProtocol: tcp
            FromPort: 1414
            ToPort: 1430
            CidrIp: !Select [ 6, !Split [ ',', !Ref IntegrationNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (WMQ)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref IntegrationNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureIntegrationNetwork7
          - IpProtocol: tcp
            FromPort: 1414
            ToPort: 1430
            CidrIp: !Select [ 7, !Split [ ',', !Ref IntegrationNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (WMQ)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref IntegrationNetworkDescriptions ]]
          - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${ApplicationName}-InstanceSecurityGroup
  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${EnvironmentName}-${ApplicationName}-MountTargetSecurityGroup
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
          Description: Global (ICMP Echo Reply)
        - IpProtocol: icmp
          FromPort: 3
          ToPort: 3
          CidrIp: 0.0.0.0/0
          Description: Global (ICMP Destination Unreachable)
        - IpProtocol: icmp
          FromPort: 8
          ToPort: 8
          CidrIp: 0.0.0.0/0
          Description: Global (ICMP Echo)
        - IpProtocol: icmp
          FromPort: 11
          ToPort: 11
          CidrIp: 0.0.0.0/0
          Description: Global (ICMP Time Exceeded)
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref 'InstanceSecurityGroup'
          Description: !Sub ${EnvironmentName}-${ApplicationName}-InstanceSecurityGroup (NFS)
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${ApplicationName}-MountTargetSecurityGroup
  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: !Ref EFSPerformanceMode
      FileSystemTags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${ApplicationName}-FileSystem
  MountTargetHostNameA:
    Type: Custom::HostName
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${CodesStackName}-HostNameFunctionArn
      CompanyName: !Ref CompanyName
      LocationName: !Ref AWS::Region
      EnvironmentName: !Ref EnvironmentName
      ApplicationName: !Ref ApplicationName
      ComponentName: FileSystem
      InstanceNumber: 01
      ZoneCode: a
  MountTargetA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !ImportValue
        Fn::Sub: ${VPCStackName}-QueueSubnetA
      SecurityGroups:
        - !Ref MountTargetSecurityGroup
  PrivateMountTargetHostNameRecordSetA:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PrivateHostedZone
      Comment: !Sub Private DNS Host Name of the ${ApplicationName}-FileSystem MountTargetA
      Name: !Sub
        - ${MountTargetHostNameA}.${VPCPrivateDomain}.
        - VPCPrivateDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPrivateDomain
      Type: A
      TTL: 900
      ResourceRecords:
        - !GetAtt MountTargetA.IpAddress
  MountTargetHostNameB:
    Type: Custom::HostName
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${CodesStackName}-HostNameFunctionArn
      CompanyName: !Ref CompanyName
      LocationName: !Ref AWS::Region
      EnvironmentName: !Ref EnvironmentName
      ApplicationName: !Ref ApplicationName
      ComponentName: FileSystem
      InstanceNumber: 01
      ZoneCode: b
    Condition: ConfigureMultiZone
  MountTargetB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !ImportValue
        Fn::Sub: ${VPCStackName}-QueueSubnetB
      SecurityGroups:
        - !Ref MountTargetSecurityGroup
    Condition: ConfigureMultiZone
  PrivateMountTargetHostNameRecordSetB:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PrivateHostedZone
      Comment: !Sub Private DNS Host Name of the ${ApplicationName}-FileSystem MountTargetB
      Name: !Sub
        - ${MountTargetHostNameB}.${VPCPrivateDomain}.
        - VPCPrivateDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPrivateDomain
      Type: A
      TTL: 900
      ResourceRecords:
        - !GetAtt MountTargetB.IpAddress
    Condition: ConfigureMultiZone
  AmazonLinux2Image:
    Type: Custom::AmazonLinux2Image
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${AMIFunctionsStackName}-AmazonLinux2ImageFunctionArn
      OSName: !Ref OSName
      OSDate: !Ref OSDate
    Condition: ConfigureAMZN
  RHELImage:
    Type: Custom::RHELImage
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${AMIFunctionsStackName}-RHELImageFunctionArn
      OSName: !Ref OSName
      OSDate: !Ref OSDate
    Condition: ConfigureRHEL
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref Role
  HostNameA:
    Type: Custom::HostName
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${CodesStackName}-HostNameFunctionArn
      CompanyName: !Ref CompanyName
      LocationName: !Ref AWS::Region
      EnvironmentName: !Ref EnvironmentName
      ApplicationName: !Ref ApplicationName
      InstanceNumber: 01
      ZoneCode: a
  PrivateIpAddressA:
    Type: Custom::PrivateIpAddress
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-PrivateIpAddressFunctionArn
      SubnetId: !ImportValue
        Fn::Sub: ${VPCStackName}-QueueSubnetA
      Offset: 4
    Condition: ConfigureStaticAddress
  InstanceA:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Credentials:
          type: S3
          roleName: !Ref Role
          buckets:
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ScriptsBucket
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ProductsBucket
      AWS::CloudFormation::Init:
        configSets:
          All:
            - UpdateOS
            - !If [ ConfigureRHEL, EnableRHELOptionalRepo, !Ref 'AWS::NoValue' ]
            - ConfigureOSUpdates
            - ConfigureOS
            - ConfigureCFN
            - InstallSSMAgent
            - InstallCloudWatchAgent
            - ConfigureCloudWatchAgent
            - ConfigureHostName
            - ConfigureMQHAFileSystem
            - !If [ ConfigureFileSystemMonitoring, ConfigureMQHAFileSystemMonitoring, !Ref 'AWS::NoValue' ]
            - InstallApache
            - ConfigureTestWebsite
            - !If [ InstallWebSphereMQ, InstallWebSphereMQ, !Ref 'AWS::NoValue' ]
            #- !If [ InstallWebSphereMQ, ConfigureWebSphereMQ, !Ref 'AWS::NoValue' ]
        UpdateOS:
          commands:
            01_yum_update:
              command: yum update -y
        EnableRHELOptionalRepo:
          commands:
            01-yum-update:
              command: yum-config-manager --enable rhui-REGION-rhel-server-optional
        ConfigureOSUpdates:
          packages:
            yum:
              yum-cron: []
          files:
            /etc/yum/yum-cron.conf:
              content: |
                [commands]
                update_cmd = security
                update_messages = yes
                download_updates = yes
                apply_updates = yes
                random_sleep = 10
              mode: '000644'
              owner: root
              group: root
        ConfigureOS:
          packages:
            yum:
              git: []
          users:
            mqm: {}
          files:
            /etc/profile.d/local.sh:
              content: |
                alias lsa='ls -lAF'
                alias ip4='ip addr | grep " inet "'
              mode: '000644'
              owner: root
              group: root
            /home/mqm/.bashrc:
              content: |
                # .bashrc

                # Source global definitions
                if [ -f /etc/bashrc ]; then
                        . /etc/bashrc
                fi

                # User specific aliases and functions
              mode: '000644'
              owner: mqm
              group: mqm
            /home/mqm/.bash_profile:
              content: |
                # .bash_profile

                # Get the aliases and functions
                if [ -f ~/.bashrc ]; then
                        . ~/.bashrc
                fi

                # User specific environment and startup programs

                PATH=$PATH:$HOME/.local/bin:$HOME/bin:/var/mqm:/opt:.

                export PATH

                set -o vi
              mode: '000644'
              owner: mqm
              group: mqm
            /etc/sysctl.d/40-mqm.conf:
              content: |
                # Additional Kernel Parameters needed for WebSphereMQ
                kernel.sem = 32000 1024000000 500 32000
                fs.file-max = 524288
                kernel.pid_max = 131072
                kernel.threads-max = 131072
                vm.overcommit_memory = 2
              mode: '000644'
              owner: root
              group: root
            /etc/security/limits.conf:
              content: |
                # /etc/security/limits.conf
                # Increased limits needed for WebSphereMQ
                #<domain>  <type>  <item>  <value>
                mqm        hard    nofile  32760
                mqm        soft    nofile  32760
                mqm        hard    nproc   32760
                mqm        soft    nproc   32760
              mode: '000644'
              owner: root
              group: root
          commands:
            01_usermod_mqm:
              command: usermod -s /bin/bash mqm
            02_chown_home_mqm:
              command: chown -R mqm:mqm /home/mqm
            03_mkdir_opt_mqm:
              command: mkdir -p /opt/mqm
            04_chown_opt_mqm:
              command: chown -R mqm:mqm /opt/mqm
            05_mkdir_var_mqm:
              command: mkdir -p /var/mqm
            06_chown_var_mqm:
              command: chown -R mqm:mqm /var/mqm
            07_mkdir_mqha:
              command: mkdir -p /MQHA
            08_chown_mqha:
              command: chown -R mqm:mqm /MQHA
        ConfigureCFN:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.InstanceA.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --configsets All --stack ${AWS::StackName} --resource InstanceA --region ${AWS::Region}
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        InstallSSMAgent:
          packages:
            rpm:
              amazon-ssm-agent:
                - https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
        InstallCloudWatchAgent:
          sources:
            /var/tmp: https://s3.amazonaws.com/amazoncloudwatch-agent/linux/amd64/latest/AmazonCloudWatchAgent.zip
          commands:
            01-install-cloudwatch-agent:
              command: yum install -y /var/tmp/amazon-cloudwatch-agent.rpm
        ConfigureCloudWatchAgent:
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: !Sub |
                {
                  "agent" : {
                    "metrics_collection_interval" : 60,
                    "logfile" : "/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log",
                    "debug" : false
                  },
                  "metrics" : {
                    "namespace" : "${SystemName}/${EnvironmentName}-${ApplicationName}",
                    "metrics_collected" : {
                      "mem" : {
                        "measurement" : [
                          { "name" : "mem_used_percent", "rename" : "MemoryUsedPercent" }
                        ]
                      },
                      "swap" : {
                        "measurement" : [
                          { "name" : "swap_used_percent", "rename" : "SwapUsedPercent" }
                        ]
                      },
                      "disk" : {
                        "resources" : [
                          "*"
                        ],
                        "measurement" : [
                          { "name" : "used_percent", "rename" : "DiskUsedPercent" }
                        ],
                        "ignore_file_system_types": [
                          "rootfs",
                          "sysfs",
                          "tmpfs",
                          "devtmpfs"
                        ]
                      }
                    },
                    "append_dimensions" : {
                      "InstanceId" : "${!aws:InstanceId}",
                      "AutoScalingGroupName" : "${!aws:AutoScalingGroupName}"
                    },
                    "aggregation_dimensions" : [
                      [ "InstanceId" ],
                      [ "InstanceId", "path" ],
                      [ "AutoScalingGroupName" ]
                    ]
                  },
                  "logs" : {
                    "logs_collected" : {
                      "files" : {
                        "collect_list" : [
                          {
                            "file_path" : "/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "QueueA/{instance_id}/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log"
                          },
                          {
                            "file_path" : "/var/log/cloud-init.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "QueueA/{instance_id}/var/log/cloud-init.log",
                            "timestamp_format" : "%b %d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/cloud-init-output.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "QueueA/{instance_id}/var/log/cloud-init-output.log"
                          },
                          {
                            "file_path" : "/var/log/cfn-init.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "QueueA/{instance_id}/var/log/cfn-init.log",
                            "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/cfn-init-cmd.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "QueueA/{instance_id}/var/log/cfn-init-cmd.log",
                            "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/cfn-hup.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "QueueA/{instance_id}/var/log/cfn-hup.log",
                            "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/messages",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "QueueA/{instance_id}/var/log/messages",
                            "timestamp_format" : "%b %d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/secure",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "QueueA/{instance_id}/var/log/secure",
                            "timestamp_format" : "%b %d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/cron",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "QueueA/{instance_id}/var/log/cron",
                            "timestamp_format" : "%b %d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/dmesg",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "QueueA/{instance_id}/var/log/dmesg"
                          },
                          {
                            "file_path" : "/var/log/yum.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "QueueA/{instance_id}/var/log/yum.log"
                          },
                          {
                            "file_path" : "/var/log/httpd/access_log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "QueueA/{instance_id}/var/log/httpd/access_log"
                          },
                          {
                            "file_path" : "/var/log/httpd/error_log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "QueueA/{instance_id}/var/log/httpd/error_log"
                          }
                        ]
                      }
                    }
                  }
                }
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              amazon-cloudwatch-agent:
                enabled: true
                ensureRunning: true
                files:
                  - /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
        ConfigureHostName:
          files:
            /root/bin/configure-hostname:
              source: !Sub
                - https://${ScriptsBucket}.${s3}.amazonaws.com/Linux/configure-hostname
                - ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
          commands:
            01-configure-hostname:
              command: !Sub
                - /root/bin/configure-hostname -n -h ${HostNameA} -d ${VPCPrivateDomain}
                - VPCPrivateDomain: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCPrivateDomain
        ConfigureMQHAFileSystem:
          packages:
            yum:
              nfs-utils: []
          files:
            /root/bin/mount-efs-filesystem:
              source: !Sub
                - https://${ScriptsBucket}.${s3}.amazonaws.com/Linux/mount-efs-filesystem
                - ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
          commands:
            01-mount-efs-filesystem:
              command: !Sub
                - /root/bin/mount-efs-filesystem -f ${FileSystem} -h ${HostName} -m /MQHA -u mqm -g mqm
                - HostName: !Sub
                    - ${MountTargetHostNameA}.${VPCPrivateDomain}.
                    - VPCPrivateDomain: !ImportValue
                        Fn::Sub: ${VPCStackName}-VPCPrivateDomain
              ignoreErrors: false
        ConfigureMQHAFileSystemMonitoring:
          files:
            /root/bin/put-filesystem-metrics:
              source: !Sub
                - https://${ScriptsBucket}.${s3}.amazonaws.com/WebSphereMQ/put-filesystem-metrics
                - ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
            /root/crontab:
              content: '* * * * * /usr/sbin/nfsstat | /root/bin/put-filesystem-metrics'
              owner: root
              group: root
        InstallApache:
          packages:
            yum:
              httpd: []
          commands:
            01-enable-ssi:
              command: sed -i -e 's/\(^    Options Indexes FollowSymLinks$\)/\1 Includes\n    XBitHack on/' /etc/httpd/conf/httpd.conf
              ignoreErrors: false
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/httpd/conf/httpd.conf
        ConfigureTestWebsite:
          files:
            /var/www/html/index.html:
              content: !Sub |
                <html>
                <head>
                <title>${ApplicationName} Test Website</title>
                </head>
                <body>
                <h1>${ApplicationName} Test Website</h1>

                <p>This page displays data obtained from the meta-data service via SSI.</p>

                <ul>
                  <li>ami-id: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/ami-id" --></li>
                  <li>instance-id: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/instance-id" --></li>
                  <li>instance-type: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/instance-type" --></li>
                  <li>local-hostname: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/local-hostname" --></li>
                  <li>local-ipv4: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/local-ipv4" --></li>
                  <li>public-hostname: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/public-hostname" --></li>
                  <li>public-ipv4: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/public-ipv4" --></li>
                </ul>

                <p>If you do not see the output values on this page, insure you have added &quot;XBitHack on&quot; to the
                Apache main or vhost configuration file and restarted Apache</p>
                </body>
              mode: '000755'
              owner: root
              group: root
        InstallWebSphereMQ:
          sources:
            /var/tmp: !Sub
                - https://${ProductsBucket}.${s3}.amazonaws.com/${WebSphereMQProductKey}
                - ProductsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ProductsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
    Properties:
      ImageId: !If [ ConfigureAMZN, !Ref AmazonLinux2Image, !Ref RHELImage ]
      InstanceType: !FindInMap [ InstanceTypeMap, Queue, !Ref EnvironmentType ]
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !If [ ConfigureKeyPair, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      NetworkInterfaces:
        - Description: !Sub ${EnvironmentName}-${ApplicationName}-NetworkInterfaceA-eth0
          DeviceIndex: 0
          SubnetId: !ImportValue
            Fn::Sub: ${VPCStackName}-QueueSubnetA
          PrivateIpAddress: !If [ ConfigureStaticAddress, !Ref PrivateIpAddressA, !Ref 'AWS::NoValue' ]
          GroupSet:
            - !Ref InstanceSecurityGroup
          AssociatePublicIpAddress: false
          DeleteOnTermination: true
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 32
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${ApplicationName}-InstanceA
        #- Key: HostName
        #  Value: !Ref HostNameA
        - !If
          - ConfigureSchedule
          - Key: Schedule
            Value: !Ref Schedule
          - !Ref AWS::NoValue
      UserData:
        Fn::Base64: !If
          - ConfigureAMZN
          - !Sub |
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap

            /opt/aws/bin/cfn-init --verbose --configsets All --stack ${AWS::StackName} --resource InstanceA --region ${AWS::Region}
            /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource InstanceA --region ${AWS::Region}
          - !Sub |
            #!/bin/bash -xe
            # Add to RHEL what Amazon Linux includes
            # Install EPEL
            yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            # Install Python Pip and Python Daemon
            yum install -y python-pip python-daemon
            pip install --upgrade pip
            # Install AWS CLI
            pip install awscli
            # Download CFN Bootstrap
            cd /opt
            curl -O https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            tar -xvpf aws-cfn-bootstrap-latest.tar.gz
            rm -f aws-cfn-bootstrap-latest.tar.gz
            # Build and Install CFN Bootstrap
            cd aws-cfn-bootstrap-*
            python setup.py build
            python setup.py install
            cd /opt
            rm -Rf aws-cfn-bootstrap-*
            # Create CFN Bootstrap symlinks
            ln -s /usr/init/redhat/cfn-hup /etc/init.d/cfn-hup
            chmod 775 /usr/init/redhat/cfn-hup
            mkdir -p /opt/aws/bin
            ln -s /usr/bin/cfn-hup /opt/aws/bin/cfn-hup
            ln -s /usr/bin/cfn-init /opt/aws/bin/cfn-init
            ln -s /usr/bin/cfn-signal /opt/aws/bin/cfn-signal
            ln -s /usr/bin/cfn-elect-cmd-leader /opt/aws/bin/cfn-elect-cmd-leader
            ln -s /usr/bin/cfn-get-metadata /opt/aws/bin/cfn-get-metadata
            ln -s /usr/bin/cfn-send-cmd-event /opt/aws/bin/cfn-send-cmd-event
            ln -s /usr/bin/cfn-send-cmd-result /opt/aws/bin/cfn-send-cmd-result

            /opt/aws/bin/cfn-init --verbose --configsets All --stack ${AWS::StackName} --resource InstanceA --region ${AWS::Region}
            /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource InstanceA --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
  PrivateHostNameRecordSetA:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PrivateHostedZone
      Comment: !Sub Private DNS Host Name of the ${ApplicationName} InstanceA
      Name: !Sub
        - ${HostNameA}.${VPCPrivateDomain}.
        - VPCPrivateDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPrivateDomain
      Type: A
      TTL: 900
      ResourceRecords:
        - !GetAtt InstanceA.PrivateIp
  HostNameB:
    Type: Custom::HostName
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${CodesStackName}-HostNameFunctionArn
      CompanyName: !Ref CompanyName
      LocationName: !Ref AWS::Region
      EnvironmentName: !Ref EnvironmentName
      ApplicationName: !Ref ApplicationName
      InstanceNumber: 01
      ZoneCode: b
    Condition: ConfigureMultiZone
  PrivateIpAddressB:
    Type: Custom::PrivateIpAddress
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-PrivateIpAddressFunctionArn
      SubnetId: !ImportValue
        Fn::Sub: ${VPCStackName}-QueueSubnetB
      Offset: 4
    Condition: ConfigureStaticAddress&MultiZone
  InstanceB:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Credentials:
          type: S3
          roleName: !Ref 'Role'
          buckets:
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ScriptsBucket
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ProductsBucket
      AWS::CloudFormation::Init:
        configSets:
          All:
            - UpdateOS
            - !If [ ConfigureRHEL, EnableRHELOptionalRepo, !Ref 'AWS::NoValue' ]
            - ConfigureOSUpdates
            - ConfigureOS
            - ConfigureCFN
            - InstallSSMAgent
            - InstallCloudWatchAgent
            - ConfigureCloudWatchAgent
            - ConfigureHostName
            - ConfigureMQHAFileSystem
            - !If [ ConfigureFileSystemMonitoring, ConfigureMQHAFileSystemMonitoring, !Ref 'AWS::NoValue' ]
            - InstallApache
            - ConfigureTestWebsite
            - !If [ InstallWebSphereMQ, InstallWebSphereMQ, !Ref 'AWS::NoValue' ]
            #- !If [ InstallWebSphereMQ, ConfigureWebSphereMQ, !Ref 'AWS::NoValue' ]
        UpdateOS:
          commands:
            01_yum_update:
              command: yum update -y
        EnableRHELOptionalRepo:
          commands:
            01-yum-update:
              command: yum-config-manager --enable rhui-REGION-rhel-server-optional
        ConfigureOSUpdates:
          packages:
            yum:
              yum-cron: []
          files:
            /etc/yum/yum-cron.conf:
              content: |
                [commands]
                update_cmd = security
                update_messages = yes
                download_updates = yes
                apply_updates = yes
                random_sleep = 10
              mode: '000644'
              owner: root
              group: root
        ConfigureOS:
          packages:
            yum:
              git: []
          users:
            mqm: {}
          files:
            /etc/profile.d/local.sh:
              content: |
                alias lsa='ls -lAF'
                alias ip4='ip addr | grep " inet "'
              mode: '000644'
              owner: root
              group: root
            /home/mqm/.bashrc:
              content: |
                # .bashrc

                # Source global definitions
                if [ -f /etc/bashrc ]; then
                        . /etc/bashrc
                fi

                # User specific aliases and functions
              mode: '000644'
              owner: mqm
              group: mqm
            /home/mqm/.bash_profile:
              content: |
                # .bash_profile

                # Get the aliases and functions
                if [ -f ~/.bashrc ]; then
                        . ~/.bashrc
                fi

                # User specific environment and startup programs

                PATH=$PATH:$HOME/.local/bin:$HOME/bin:/var/mqm:/opt:.

                export PATH

                set -o vi
              mode: '000644'
              owner: mqm
              group: mqm
            /etc/sysctl.d/40-mqm.conf:
              content: |
                # Additional Kernel Parameters needed for WebSphereMQ
                kernel.sem = 32000 1024000000 500 32000
                fs.file-max = 524288
                kernel.pid_max = 131072
                kernel.threads-max = 131072
                vm.overcommit_memory = 2
              mode: '000644'
              owner: root
              group: root
            /etc/security/limits.conf:
              content: |
                # /etc/security/limits.conf
                # Increased limits needed for WebSphereMQ
                #<domain>  <type>  <item>  <value>
                mqm        hard    nofile  32760
                mqm        soft    nofile  32760
                mqm        hard    nproc   32760
                mqm        soft    nproc   32760
              mode: '000644'
              owner: root
              group: root
          commands:
            01_usermod_mqm:
              command: usermod -s /bin/bash mqm
            02_chown_home_mqm:
              command: chown -R mqm:mqm /home/mqm
            03_mkdir_opt_mqm:
              command: mkdir -p /opt/mqm
            04_chown_opt_mqm:
              command: chown -R mqm:mqm /opt/mqm
            05_mkdir_var_mqm:
              command: mkdir -p /var/mqm
            06_chown_var_mqm:
              command: chown -R mqm:mqm /var/mqm
            07_mkdir_mqha:
              command: mkdir -p /MQHA
            08_chown_mqha:
              command: chown -R mqm:mqm /MQHA
        ConfigureCFN:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.InstanceB.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --configsets All --stack ${AWS::StackName} --resource InstanceB --region ${AWS::Region}
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        InstallSSMAgent:
          packages:
            rpm:
              amazon-ssm-agent:
                - https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
        InstallCloudWatchAgent:
          sources:
            /var/tmp: https://s3.amazonaws.com/amazoncloudwatch-agent/linux/amd64/latest/AmazonCloudWatchAgent.zip
          commands:
            01-install-cloudwatch-agent:
              command: yum install -y /var/tmp/amazon-cloudwatch-agent.rpm
        ConfigureCloudWatchAgent:
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: !Sub |
                {
                  "agent" : {
                    "metrics_collection_interval" : 60,
                    "logfile" : "/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log",
                    "debug" : false
                  },
                  "metrics" : {
                    "namespace" : "${SystemName}/${EnvironmentName}-${ApplicationName}",
                    "metrics_collected" : {
                      "mem" : {
                        "measurement" : [
                          { "name" : "mem_used_percent", "rename" : "MemoryUsedPercent" }
                        ]
                      },
                      "swap" : {
                        "measurement" : [
                          { "name" : "swap_used_percent", "rename" : "SwapUsedPercent" }
                        ]
                      },
                      "disk" : {
                        "resources" : [
                          "*"
                        ],
                        "measurement" : [
                          { "name" : "used_percent", "rename" : "DiskUsedPercent" }
                        ],
                        "ignore_file_system_types": [
                          "rootfs",
                          "sysfs",
                          "tmpfs",
                          "devtmpfs"
                        ]
                      }
                    },
                    "append_dimensions" : {
                      "InstanceId" : "${!aws:InstanceId}",
                      "AutoScalingGroupName" : "${!aws:AutoScalingGroupName}"
                    },
                    "aggregation_dimensions" : [
                      [ "InstanceId" ],
                      [ "InstanceId", "path" ],
                      [ "AutoScalingGroupName" ]
                    ]
                  },
                  "logs" : {
                    "logs_collected" : {
                      "files" : {
                        "collect_list" : [
                          {
                            "file_path" : "/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "QueueB/{instance_id}/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log"
                          },
                          {
                            "file_path" : "/var/log/cloud-init.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "QueueB/{instance_id}/var/log/cloud-init.log",
                            "timestamp_format" : "%b %d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/cloud-init-output.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "QueueB/{instance_id}/var/log/cloud-init-output.log"
                          },
                          {
                            "file_path" : "/var/log/cfn-init.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "QueueB/{instance_id}/var/log/cfn-init.log",
                            "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/cfn-init-cmd.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "QueueB/{instance_id}/var/log/cfn-init-cmd.log",
                            "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/cfn-hup.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "QueueB/{instance_id}/var/log/cfn-hup.log",
                            "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/messages",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "QueueB/{instance_id}/var/log/messages",
                            "timestamp_format" : "%b %d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/secure",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "QueueB/{instance_id}/var/log/secure",
                            "timestamp_format" : "%b %d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/cron",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "QueueB/{instance_id}/var/log/cron",
                            "timestamp_format" : "%b %d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/dmesg",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "QueueB/{instance_id}/var/log/dmesg"
                          },
                          {
                            "file_path" : "/var/log/yum.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "QueueB/{instance_id}/var/log/yum.log"
                          },
                          {
                            "file_path" : "/var/log/httpd/access_log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "QueueB/{instance_id}/var/log/httpd/access_log"
                          },
                          {
                            "file_path" : "/var/log/httpd/error_log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "QueueB/{instance_id}/var/log/httpd/error_log"
                          }
                        ]
                      }
                    }
                  }
                }
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              amazon-cloudwatch-agent:
                enabled: true
                ensureRunning: true
                files:
                  - /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
        ConfigureHostName:
          files:
            /root/bin/configure-hostname:
              source: !Sub
                - https://${ScriptsBucket}.${s3}.amazonaws.com/Linux/configure-hostname
                - ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
          commands:
            01-configure-hostname:
              command: !Sub
                - /root/bin/configure-hostname -n -h ${HostNameB} -d ${VPCPrivateDomain}
                - VPCPrivateDomain: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCPrivateDomain
        ConfigureMQHAFileSystem:
          packages:
            yum:
              nfs-utils: []
          files:
            /root/bin/mount-efs-filesystem:
              source: !Sub
                - https://${ScriptsBucket}.${s3}.amazonaws.com/Linux/mount-efs-filesystem
                - ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
          commands:
            01-mount-efs-filesystem:
              command: !Sub
                - /root/bin/mount-efs-filesystem -f ${FileSystem} -h ${HostName} -m /MQHA -u mqm -g mqm
                - HostName: !Sub
                    - ${MountTargetHostNameB}.${VPCPrivateDomain}.
                    - VPCPrivateDomain: !ImportValue
                        Fn::Sub: ${VPCStackName}-VPCPrivateDomain
              ignoreErrors: false
        ConfigureMQHAFileSystemMonitoring:
          files:
            /root/bin/put-filesystem-metrics:
              source: !Sub
                - https://${ScriptsBucket}.${s3}.amazonaws.com/WebSphereMQ/put-filesystem-metrics
                - ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
            /root/crontab:
              content: '* * * * * /usr/sbin/nfsstat | /root/bin/put-filesystem-metrics'
              owner: root
              group: root
        InstallApache:
          packages:
            yum:
              httpd: []
          commands:
            01-enable-ssi:
              command: sed -i -e 's/\(^    Options Indexes FollowSymLinks$\)/\1 Includes\n    XBitHack on/' /etc/httpd/conf/httpd.conf
              ignoreErrors: false
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/httpd/conf/httpd.conf
        ConfigureTestWebsite:
          files:
            /var/www/html/index.html:
              content: !Sub |
                <html>
                <head>
                <title>${ApplicationName} Test Website</title>
                </head>
                <body>
                <h1>${ApplicationName} Test Website</h1>

                <p>This page displays data obtained from the meta-data service via SSI.</p>

                <ul>
                  <li>ami-id: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/ami-id" --></li>
                  <li>instance-id: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/instance-id" --></li>
                  <li>instance-type: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/instance-type" --></li>
                  <li>local-hostname: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/local-hostname" --></li>
                  <li>local-ipv4: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/local-ipv4" --></li>
                  <li>public-hostname: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/public-hostname" --></li>
                  <li>public-ipv4: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/public-ipv4" --></li>
                </ul>

                <p>If you do not see the output values on this page, insure you have added &quot;XBitHack on&quot; to the
                Apache main or vhost configuration file and restarted Apache</p>
                </body>
              mode: '000755'
              owner: root
              group: root
        InstallWebSphereMQ:
          sources:
            /var/tmp: !Sub
                - https://${ProductsBucket}.${s3}.amazonaws.com/${WebSphereMQProductKey}
                - ProductsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ProductsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
    Properties:
      ImageId: !If [ ConfigureAMZN, !Ref AmazonLinux2Image, !Ref RHELImage ]
      InstanceType: !FindInMap [ InstanceTypeMap, Queue, !Ref EnvironmentType ]
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !If [ ConfigureKeyPair, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      NetworkInterfaces:
        - Description: !Sub ${EnvironmentName}-${ApplicationName}-NetworkInterfaceB-eth0
          DeviceIndex: 0
          SubnetId: !ImportValue
            Fn::Sub: ${VPCStackName}-QueueSubnetB
          PrivateIpAddress: !If [ ConfigureStaticAddress, !Ref PrivateIpAddressB, !Ref 'AWS::NoValue' ]
          GroupSet:
            - !Ref InstanceSecurityGroup
          AssociatePublicIpAddress: false
          DeleteOnTermination: true
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 32
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${ApplicationName}-InstanceB
        #- Key: HostName
        #  Value: !Ref HostNameB
        - !If
          - ConfigureSchedule
          - Key: Schedule
            Value: !Ref Schedule
          - !Ref AWS::NoValue
      UserData:
        Fn::Base64: !If
          - ConfigureAMZN
          - !Sub |
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap

            /opt/aws/bin/cfn-init --verbose --configsets All --stack ${AWS::StackName} --resource InstanceB --region ${AWS::Region}
            /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource InstanceB --region ${AWS::Region}
          - !Sub |
            #!/bin/bash -xe
            # Add to RHEL what Amazon Linux includes
            # Install EPEL
            yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            # Install Python Pip and Python Daemon
            yum install -y python-pip python-daemon
            pip install --upgrade pip
            # Install AWS CLI
            pip install awscli
            # Download CFN Bootstrap
            cd /opt
            curl -O https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            tar -xvpf aws-cfn-bootstrap-latest.tar.gz
            rm -f aws-cfn-bootstrap-latest.tar.gz
            # Build and Install CFN Bootstrap
            cd aws-cfn-bootstrap-*
            python setup.py build
            python setup.py install
            cd /opt
            rm -Rf aws-cfn-bootstrap-*
            # Create CFN Bootstrap symlinks
            ln -s /usr/init/redhat/cfn-hup /etc/init.d/cfn-hup
            chmod 775 /usr/init/redhat/cfn-hup
            mkdir -p /opt/aws/bin
            ln -s /usr/bin/cfn-hup /opt/aws/bin/cfn-hup
            ln -s /usr/bin/cfn-init /opt/aws/bin/cfn-init
            ln -s /usr/bin/cfn-signal /opt/aws/bin/cfn-signal
            ln -s /usr/bin/cfn-elect-cmd-leader /opt/aws/bin/cfn-elect-cmd-leader
            ln -s /usr/bin/cfn-get-metadata /opt/aws/bin/cfn-get-metadata
            ln -s /usr/bin/cfn-send-cmd-event /opt/aws/bin/cfn-send-cmd-event
            ln -s /usr/bin/cfn-send-cmd-result /opt/aws/bin/cfn-send-cmd-result

            /opt/aws/bin/cfn-init --verbose --configsets All --stack ${AWS::StackName} --resource InstanceB --region ${AWS::Region}
            /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource InstanceB --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
    Condition: ConfigureMultiZone
  PrivateHostNameRecordSetB:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PrivateHostedZone
      Comment: !Sub Private DNS Host Name of the ${ApplicationName} InstanceB
      Name: !Sub
        - ${HostNameB}.${VPCPrivateDomain}.
        - VPCPrivateDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPrivateDomain
      Type: A
      TTL: 900
      ResourceRecords:
        - !GetAtt InstanceB.PrivateIp
    Condition: ConfigureMultiZone
Outputs:
  ClientSecurityGroup:
    Description: The Client SecurityGroup
    Value: !Ref ClientSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-ClientSecurityGroup
  InstanceSecurityGroup:
    Description: The Instance SecurityGroup
    Value: !Ref InstanceSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-InstanceSecurityGroup
  HostNameA:
    Description: The HostNameA
    Value: !Sub
      - ${HostNameA}.${VPCPrivateDomain}
      - VPCPrivateDomain: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPrivateDomain
  HostNameB:
    Description: The HostNameB
    Value: !Sub
      - ${HostNameB}.${VPCPrivateDomain}
      - VPCPrivateDomain: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPrivateDomain
    Condition: ConfigureMultiZone
