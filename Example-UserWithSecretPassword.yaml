AWSTemplateFormatVersion: 2010-09-09
Description: Example-UserWithSecretPassword Template.
  This demonstrates how to create a User with a Password created and generated by Secrets Manager and stored as a Secret.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Environment Configuration
        Parameters:
          - EnvironmentName
      - Label:
          default: Utility Configuration
        Parameters:
          - UtilityName
      - Label:
          default: User Configuration
        Parameters:
          - Password
    ParameterLabels:
      EnvironmentName:
        default: Environment Name
      UtilityName:
        default: Utility Name
      Password:
        default: Password
Parameters:
  EnvironmentName:
    Description: Name of the Environment associated with the Stack
    Type: String
    Default: Production
    AllowedValues:
      - Production
      - Staging
      - UAT
      - QA
      - Testing
      - Development
      - Build
      - Core
      - Recovery
      - Log
      - Identity
      - Management
      - Organization
    ConstraintDescription: must be Production, Staging, UAT, QA, Testing, Development, Build, Core, Recovery, Log, Identity, Management or Organization.
  UtilityName:
    Description: Name of the Utility associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: DirectoryService
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  Password:
    Description: Optional password for the User (If unspecified, generate a random password)
    Type: String
    NoEcho: true
    Default: ''
    AllowedPattern: (^$|(?=^.{20,64}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*)
    ConstraintDescription: must be 20 to 64 alphanumeric characters, with no symbols and at least one uppercase, lowercase and digit, if specified.
Conditions:
  GeneratePassword: !Equals [ !Ref Password, '' ]
  ConfigurePassword: !Not [ !Condition GeneratePassword ]
Resources:
  AdminPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${EnvironmentName}-${UtilityName}-AdminPassword
      Description: !Sub Password for the ${EnvironmentName} Environment ${UtilityName} Utility Admin User
      SecretString: !If [ ConfigurePassword, !Ref Password, !Ref 'AWS::NoValue' ]
      GenerateSecretString: !If
        - GeneratePassword
        - PasswordLength: 32
          ExcludePunctuation: true
        - !Ref AWS::NoValue
  AdminUser:
    Type: AWS::IAM::User
    Properties:
      UserName: Admin
      Path: /
      LoginProfile:
        Password: !Sub '{{resolve:secretsmanager:${AdminPasswordSecret}}}'
    DependsOn: AdminPasswordSecret
Outputs:
  AdminPasswordSecretArn:
    Description: The AdminPasswordSecret ARN
    Value: !Ref AdminPasswordSecret
