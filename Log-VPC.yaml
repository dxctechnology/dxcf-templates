AWSTemplateFormatVersion: 2010-09-09
Description: Log-VPC Template.
  This creates the Log VPC. The VPC is always Multi-Zone. It can optionally be Multi-NAT Gateway. It can optionally have a VPN Gateway.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - PublicHostedZoneStackName
          - TagFunctionsStackName
          - AMIFunctionsStackName
          - CodesStackName
      - Label:
          default: Resource Dependencies
        Parameters:
          - KeyName
      - Label:
          default: System Configuration
        Parameters:
          - CompanyName
          - SystemName
      - Label:
          default: Environment Configuration
        Parameters:
          - AccountName
          - EnvironmentName
          - EnvironmentType
          - EnvironmentZones
      - Label:
          default: VPC Configuration
        Parameters:
          - Network
          - PrivateDomain
          - DirectoryDomain
          - DirectoryNetBIOSDomain
          - UsePrivateHostedZone
          - UseNatGateway
          - UseVPNGateway
          - LogRetention
    ParameterLabels:
      PublicHostedZoneStackName:
        default: PublicHostedZone Stack Name
      TagFunctionsStackName:
        default: TagFunctions Stack Name
      AMIFunctionsStackName:
        default: AMIFunctions Stack Name
      CodesStackName:
        default: Codes Stack Name
      KeyName:
        default: Key Name
      CompanyName:
        default: Company Name
      SystemName:
        default: System Name
      AccountName:
        default: Account Name
      EnvironmentName:
        default: Environment Name
      EnvironmentType:
        default: Environment Type
      EnvironmentZones:
        default: Environment Zones
      Network:
        default: Network
      PrivateDomain:
        default: Private Domain
      DirectoryDomain:
        default: Directory Domain
      DirectoryNetBIOSDomain:
        default: Directory NetBIOS Domain
      UsePrivateHostedZone:
        default: Use a Private HostedZone
      UseNatGateway:
        default: Use NAT Gateway
      UseVPNGateway:
        default: Use a VPN Gateway
      LogRetention:
        default: Log Retention
Parameters:
  PublicHostedZoneStackName:
    Description: Name of the CloudFormation Stack containing the Public HostedZone
    Type: String
    MaxLength: 64
    Default: Log-PublicHostedZone
    AllowedPattern: (^$|^[A-Z][-a-zA-Z0-9]*$)
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  TagFunctionsStackName:
    Description: Name of the CloudFormation Stack containing the Tag Functions
    Type: String
    MinLength: 8
    MaxLength: 64
    Default: TagFunctions
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  AMIFunctionsStackName:
    Description: Name of the CloudFormation Stack containing the AMI Functions
    Type: String
    MinLength: 8
    MaxLength: 64
    Default: AMIFunctions
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  CodesStackName:
    Description: Name of the CloudFormation Stack containing Codes Resources
    Type: String
    MinLength: 4
    MaxLength: 64
    Default: Codes
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  KeyName:
    Description: Name of an existing KeyPair to enable SSH access to the Instances
    Type: AWS::EC2::KeyPair::KeyName
    MaxLength: 32
    Default: administrator
    AllowedPattern: (^$|^[_a-zA-Z0-9]*$)
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  CompanyName:
    Description: Name of the Company associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: DXC
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  SystemName:
    Description: Name of the System associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: Prototype
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  AccountName:
    Description: Name of the Account associated with the Stack
    Type: String
    Default: Log
    AllowedValues:
      - Log
      - Jumpstart
    ConstraintDescription: must be Log or Jumpstart.
  EnvironmentName:
    Description: Name of the Environment associated with the Stack
    Type: String
    Default: Log
    AllowedValues:
      - Log
    ConstraintDescription: must be Log (may expand later).
  EnvironmentType:
    Description: Type of the Environment to build. Used to select size-related options in Mappings
    Type: String
    Default: micro
    AllowedValues:
      - nano
      - micro
      - small
      - medium
      - large
      - xlarge
      - 2xlarge
    ConstraintDescription: must be nano, micro, small, medium, large, xlarge or 2xlarge.
  EnvironmentZones:
    Description: Number of Availability Zones with independent NAT Gateways/Instances
    Type: String
    Default: 1
    AllowedValues:
      - 1
      - 2
    ConstraintDescription: must be 1 or 2.
  Network:
    Description: VPC Network
    Type: String
    Default: 172.21.62.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-7]))$
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/16-27.
  PrivateDomain:
    Description: Private Domain associated with the Stack
    Type: String
    MinLength: 7
    MaxLength: 64
    Default: l.us-west-2.dxcp.technology
    AllowedPattern: ^((?!-)[a-z0-9-]{1,63}(?<!-)\.)+[a-z]{2,10}$
    ConstraintDescription: must be a valid DNS domain name.
  DirectoryDomain:
    Description: Directory Domain associated with the Stack
    Type: String
    MinLength: 7
    MaxLength: 64
    Default: l.ad.dxcp.technology
    AllowedPattern: ^((?!-)[a-z0-9-]{1,63}(?<!-)\.)+[a-z]{2,10}$
    ConstraintDescription: must be a valid DNS domain name.
  DirectoryNetBIOSDomain:
    Description: Directory NetBIOS Domain associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 15
    Default: dxcpl
    AllowedPattern: (^$|^[a-zA-Z0-9]{2,15}$)
    ConstraintDescription: must be a valid NetBIOS domain name.
  UsePrivateHostedZone:
    Description: Create PrivateHostedZone, and associate with VPC via DHCPOptions
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    ConstraintDescription: must be either true or false.
  UseNatGateway:
    Description: Use a NAT Gateway instead of a NAT Instance
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    ConstraintDescription: must be either true or false.
  UseVPNGateway:
    Description: Create VPNGateway
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    ConstraintDescription: must be either true or false.
  LogRetention:
    Description: Number of days to retain CloudWatch Log Events
    Type: Number
    Default: 14
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
    ConstraintDescription: must be 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827 or 3653.
Mappings:
  InstanceTypeMap:
    NAT:
      nano: t3.nano
      micro: t3.micro
      small: t3.small
      medium: t3.medium
      large: c5.large
      xlarge: c5.xlarge
      2xlarge: c5.2xlarge
Conditions:
  ConfigureAccountEnvironment: !Or [ !Not [ !Equals [ !Ref AccountName, !Ref EnvironmentName ]], !Equals [ !Ref AccountName, Jumpstart ]]
  ConfigurePublicHostedZone: !Not [ !Equals [ !Ref PublicHostedZoneStackName, '' ]]
  ConfigureKey: !Not [ !Equals [ !Ref KeyName, '' ]]
  ConfigureMultiZone: !Not [ !Equals [ !Ref EnvironmentZones, 1 ]]
  ConfigurePrivateDomain: !Not [ !Equals [ !Ref PrivateDomain, '' ]]
  ConfigureDirectoryDomain: !Not [ !Equals [ !Ref DirectoryDomain, '' ]]
  ConfigureDirectoryNetBIOSDomain: !Not [ !Equals [ !Ref DirectoryNetBIOSDomain, '' ]]
  ConfigurePrivateHostedZone: !Equals [ !Ref UsePrivateHostedZone, true ]
  ConfigureNatGateway: !Equals [ !Ref UseNatGateway, true ]
  ConfigureNatGateway&MultiZone: !And [ !Condition ConfigureNatGateway, !Condition ConfigureMultiZone ]
  ConfigureNatInstance: !Equals [ !Ref UseNatGateway, false ]
  ConfigureNatInstance&MultiZone: !And [ !Condition ConfigureNatInstance, !Condition ConfigureMultiZone ]
  ConfigureVPNGateway: !Equals [ !Ref UseVPNGateway, true ]
Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: FlowLogPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
  LogGroupName:
    Type: Custom::LogGroupName
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${CodesStackName}-LogGroupNameFunctionArn
      CompanyName: !Ref CompanyName
      SystemName: !Ref SystemName
      ApplicationName: FlowLog
      EnvironmentName: !If [ ConfigureAccountEnvironment, !Ref EnvironmentName, !Ref 'AWS::NoValue' ]
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LogGroupName
      RetentionInDays: !Ref LogRetention
  AmazonNATImage:
    Type: Custom::AmazonNATImage
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${AMIFunctionsStackName}-AmazonNATImageFunctionArn
      Region: !Ref AWS::Region
    Condition: ConfigureNatInstance
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref Network
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPC
  VpcDefaultResourceTagger:
    Type: Custom::VpcDefaultResourceTagger
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${TagFunctionsStackName}-VpcDefaultResourceTaggerFunctionArn
      VpcId: !Ref VPC
  FlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Ref LogGroupName
      DeliverLogsPermissionArn: !GetAtt Role.Arn
    DeletionPolicy: Retain
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PrivateHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneConfig:
        Comment: !Sub Private Zone for ${PrivateDomain}
      Name: !Sub ${PrivateDomain}.
      VPCs:
        - VPCId: !Ref VPC
          VPCRegion: !Ref AWS::Region
      HostedZoneTags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateHostedZone
    Condition: ConfigurePrivateHostedZone
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !Ref PrivateDomain
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateDHCPOptions
    Condition: ConfigurePrivateHostedZone
  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref VPC
      DhcpOptionsId: !Ref DHCPOptions
    Condition: ConfigurePrivateHostedZone
  VPNGateway:
    Type: AWS::EC2::VPNGateway
    Properties:
      Type: ipsec.1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPNGateway
    Condition: ConfigureVPNGateway
  VPNGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      VpnGatewayId: !Ref VPNGateway
    Condition: ConfigureVPNGateway
  VPNGatewayRoutePropagation:
    Type: AWS::EC2::VPNGatewayRoutePropagation
    Properties:
      VpnGatewayId: !Ref VPNGateway
      RouteTableIds:
        - !Ref PublicRouteTable
        - !Ref PrivateRouteTableA
        - !Ref PrivateRouteTableB
    DependsOn: VPNGatewayAttachment
    Condition: ConfigureVPNGateway
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt VPC.CidrBlock, 16, 4 ]]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnetA
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 8, !Cidr [ !GetAtt VPC.CidrBlock, 16, 4 ]]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnetB
  Public1SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt VPC.CidrBlock, 16, 4 ]]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public1SubnetA
  Public1SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 9, !Cidr [ !GetAtt VPC.CidrBlock, 16, 4 ]]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public1SubnetB
  WebSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt VPC.CidrBlock, 16, 4 ]]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-WebSubnetA
  WebSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 10, !Cidr [ !GetAtt VPC.CidrBlock, 16, 4 ]]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-WebSubnetB
  ApplicationSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt VPC.CidrBlock, 16, 4 ]]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ApplicationSubnetA
  ApplicationSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 11, !Cidr [ !GetAtt VPC.CidrBlock, 16, 4 ]]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ApplicationSubnetB
  DatabaseSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 4, !Cidr [ !GetAtt VPC.CidrBlock, 16, 4 ]]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DatabaseSubnetA
  DatabaseSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 12, !Cidr [ !GetAtt VPC.CidrBlock, 16, 4 ]]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DatabaseSubnetB
  LogSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 6, !Cidr [ !GetAtt VPC.CidrBlock, 16, 4 ]]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-LogSubnetA
  LogSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 14, !Cidr [ !GetAtt VPC.CidrBlock, 16, 4 ]]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-LogSubnetB
  IdentitySubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 7, !Cidr [ !GetAtt VPC.CidrBlock, 16, 4 ]]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IdentitySubnetA
  IdentitySubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 15, !Cidr [ !GetAtt VPC.CidrBlock, 16, 4 ]]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IdentitySubnetB
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicRouteTable
  PublicDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: InternetGatewayAttachment
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  Public1SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Public1SubnetA
      RouteTableId: !Ref PublicRouteTable
  Public1SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Public1SubnetB
      RouteTableId: !Ref PublicRouteTable
  WebSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WebSubnetA
      RouteTableId: !Ref PublicRouteTable
  WebSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WebSubnetB
      RouteTableId: !Ref PublicRouteTable
  NatAEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: InternetGatewayAttachment
    Condition: ConfigureNatGateway
  NatBEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: InternetGatewayAttachment
    Condition: ConfigureNatGateway&MultiZone
  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatAEIP.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT-GatewayA
    Condition: ConfigureNatGateway
  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatBEIP.AllocationId
      SubnetId: !Ref PublicSubnetB
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT-GatewayB
    Condition: ConfigureNatGateway&MultiZone
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${EnvironmentName}-NAT-InstanceSecurityGroup
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: !Ref Network
          Description: VPC (All)
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT-InstanceSecurityGroup
        - Key: Utility
          Value: NAT
    Condition: ConfigureNatInstance
  NatInstanceA:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmazonNATImage
      InstanceType: !FindInMap [ InstanceTypeMap, NAT, !Ref EnvironmentType ]
      KeyName: !If [ ConfigureKey, !Ref KeyName, !Ref 'AWS::NoValue' ]
      NetworkInterfaces:
        - Description: !Sub ${EnvironmentName}-NAT-NetworkInterfaceA-eth0
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnetA
          GroupSet:
            - !Ref InstanceSecurityGroup
          DeleteOnTermination: true
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT-InstanceA
        - Key: Utility
          Value: NAT
    DependsOn: InternetGatewayAttachment
    Condition: ConfigureNatInstance
  NatInstanceB:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmazonNATImage
      InstanceType: !FindInMap [ InstanceTypeMap, NAT, !Ref EnvironmentType ]
      KeyName: !If [ ConfigureKey, !Ref KeyName, !Ref 'AWS::NoValue' ]
      NetworkInterfaces:
        - Description: !Sub ${EnvironmentName}-NAT-NetworkInterfaceB-eth0
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnetB
          GroupSet:
            - !Ref InstanceSecurityGroup
          DeleteOnTermination: true
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT-InstanceB
        - Key: Utility
          Value: NAT
    DependsOn: InternetGatewayAttachment
    Condition: ConfigureNatInstance&MultiZone
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRouteTableA
  PrivateDefaultRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !If [ ConfigureNatGateway, !Ref NatGatewayA, !Ref 'AWS::NoValue' ]
      InstanceId: !If [ ConfigureNatInstance, !Ref NatInstanceA, !Ref 'AWS::NoValue' ]
  ApplicationSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref ApplicationSubnetA
  DatabaseSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref DatabaseSubnetA
  LogSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref LogSubnetA
  IdentitySubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref IdentitySubnetA
  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRouteTableB
  PrivateDefaultRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !If [ ConfigureNatGateway, !If [ ConfigureMultiZone, !Ref NatGatewayB, !Ref NatGatewayA ], !Ref 'AWS::NoValue' ]
      InstanceId: !If [ ConfigureNatInstance, !If [ ConfigureMultiZone, !Ref NatInstanceB, !Ref NatInstanceA ], !Ref 'AWS::NoValue' ]
  ApplicationSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref ApplicationSubnetB
  DatabaseSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref DatabaseSubnetB
  LogSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref LogSubnetB
  IdentitySubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref IdentitySubnetB
Outputs:
  VPC:
    Description: The VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC
  VPCName:
    Description: The VPC Name
    Value: !Ref EnvironmentName
    Export:
      Name: !Sub ${AWS::StackName}-VPCName
  VPCNetwork:
    Description: The VPC Network
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: !Sub ${AWS::StackName}-VPCNetwork
  VPCPublicDomain:
    Description: The VPC Public Domain
    Value: !ImportValue
      Fn::Sub: ${PublicHostedZoneStackName}-PublicDomain
    Export:
      Name: !Sub ${AWS::StackName}-VPCPublicDomain
    Condition: ConfigurePublicHostedZone
  VPCPrivateDomain:
    Description: The VPC Private Domain
    Value: !Ref PrivateDomain
    Export:
      Name: !Sub ${AWS::StackName}-VPCPrivateDomain
    Condition: ConfigurePrivateDomain
  VPCDirectoryDomain:
    Description: The VPC Directory Domain
    Value: !Ref DirectoryDomain
    Export:
      Name: !Sub ${AWS::StackName}-VPCDirectoryDomain
    Condition: ConfigureDirectoryDomain
  VPCDirectoryNetBIOSDomain:
    Description: The VPC Directory NetBIOS Domain
    Value: !Ref DirectoryNetBIOSDomain
    Export:
      Name: !Sub ${AWS::StackName}-VPCDirectoryNetBIOSDomain
    Condition: ConfigureDirectoryNetBIOSDomain
  PublicHostedZone:
    Description: The Public HostedZone
    Value: !ImportValue
      Fn::Sub: ${PublicHostedZoneStackName}-PublicHostedZone
    Export:
      Name: !Sub ${AWS::StackName}-PublicHostedZone
    Condition: ConfigurePublicHostedZone
  PrivateHostedZone:
    Description: The Private HostedZone
    Value: !Ref PrivateHostedZone
    Export:
      Name: !Sub ${AWS::StackName}-PrivateHostedZone
    Condition: ConfigurePrivateHostedZone
  VPNGateway:
    Description: The VPNGateway
    Value: !Ref VPNGateway
    Export:
      Name: !Sub ${AWS::StackName}-VPNGateway
    Condition: ConfigureVPNGateway
  PublicSubnetA:
    Description: The Public Subnet in Availability Zone A
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetA
  PublicSubnetB:
    Description: The Public Subnet in Availability Zone B
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetB
  Public1SubnetA:
    Description: The Public1 Subnet in Availability Zone A
    Value: !Ref Public1SubnetA
    Export:
      Name: !Sub ${AWS::StackName}-Public1SubnetA
  Public1SubnetB:
    Description: The Public1 Subnet in Availability Zone B
    Value: !Ref Public1SubnetB
    Export:
      Name: !Sub ${AWS::StackName}-Public1SubnetB
  WebSubnetA:
    Description: The Web Subnet in Availability Zone A
    Value: !Ref WebSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-WebSubnetA
  WebSubnetB:
    Description: The Web Subnet in Availability Zone B
    Value: !Ref WebSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-WebSubnetB
  ApplicationSubnetA:
    Description: The Application Subnet in Availability Zone A
    Value: !Ref ApplicationSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationSubnetA
  ApplicationSubnetB:
    Description: The Application Subnet in Availability Zone B
    Value: !Ref ApplicationSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationSubnetB
  DatabaseSubnetA:
    Description: The Database Subnet in Availability Zone A
    Value: !Ref DatabaseSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseSubnetA
  DatabaseSubnetB:
    Description: The Database Subnet in Availability Zone B
    Value: !Ref DatabaseSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseSubnetB
  LogSubnetA:
    Description: The Log Subnet in Availability Zone A
    Value: !Ref LogSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-LogSubnetA
  LogSubnetB:
    Description: The Log Subnet in Availability Zone B
    Value: !Ref LogSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-LogSubnetB
  IdentitySubnetA:
    Description: The Identity Subnet in Availability Zone A
    Value: !Ref IdentitySubnetA
    Export:
      Name: !Sub ${AWS::StackName}-IdentitySubnetA
  IdentitySubnetB:
    Description: The Identity Subnet in Availability Zone B
    Value: !Ref IdentitySubnetB
    Export:
      Name: !Sub ${AWS::StackName}-IdentitySubnetB
  PublicRouteTable:
    Description: The Public RouteTable
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub ${AWS::StackName}-PublicRouteTable
  PrivateRouteTableA:
    Description: The Private RouteTable in Availability Zone A
    Value: !Ref PrivateRouteTableA
    Export:
      Name: !Sub ${AWS::StackName}-PrivateRouteTableA
  PrivateRouteTableB:
    Description: The Private RouteTable in Availability Zone B
    Value: !Ref PrivateRouteTableB
    Export:
      Name: !Sub ${AWS::StackName}-PrivateRouteTableB
