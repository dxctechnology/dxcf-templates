AWSTemplateFormatVersion: 2010-09-09
Description: Common-AMIFunctions Template.
  This creates Lambda Functions related to Generic Base OS AMIs, usually published by Amazon.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - LayersStackName
          - BucketsStackName
          - TopicsStackName
      - Label:
          default: Function Configuration
        Parameters:
          - LogRetention
    ParameterLabels:
      LayersStackName:
        default: Layers Stack Name
      BucketsStackName:
        default: Buckets Stack Name
      TopicsStackName:
        default: Topics Stack Name
      LogRetention:
        default: Log Retention
Parameters:
  LayersStackName:
    Description: Name of the CloudFormation Stack containing Layers
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Layers
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  BucketsStackName:
    Description: Name of the CloudFormation Stack containing Buckets
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Buckets
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  TopicsStackName:
    Description: Name of the CloudFormation Stack containing Topics
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Topics
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  LogRetention:
    Description: Number of days to retain CloudWatch Log Events for all AMI Lookup Lambda Functions
    Type: Number
    Default: 30
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
    ConstraintDescription: 'must be: 1, 3, 5, 7, 14, 30, 60 or 90.'
Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DescribeImagesPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeImages
                Resource: '*'
  AmazonLinux2ImageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/AmazonLinux2Image
      RetentionInDays: !Ref LogRetention
  AmazonLinux2ImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AmazonLinux2Image
      Description: A Lambda function that looks up the latest Amazon Linux 2 Image for a given OS Variant and Region (HVM64 only).
      Role: !GetAtt Role.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Layers:
        - !ImportValue
            Fn::Sub: ${LayersStackName}-AsyncCustomResourceLayerVersionArn
      Handler: index.handler
      Code:
        ZipFile: |
          const response = require('cfn-response-promise');

          const AWS = require('aws-sdk');
          AWS.config.apiVersions = {
            ec2: '2016-11-15'
          };

          const osNameToFilter = {
            'Amazon Linux 2'   : 'amzn2-ami-hvm-2.?.', // List default first
            'Amazon Linux 2.0' : 'amzn2-ami-hvm-2.0.'
          };

          exports.handler = async (event, context) => {
            console.info(`Request body:\n${JSON.stringify(event)}`);

            switch (event.RequestType) {
              case 'Create':
              case 'Update':
                try {
                  const region = event.ResourceProperties.Region || process.env.AWS_REGION;
                  const osName = event.ResourceProperties.OSName || Object.keys(osNameToFilter)[0];
                  const osDate = event.ResourceProperties.OSDate || '????????';

                  let amiNameFilter = (! osNameToFilter[osName]) ? osNameToFilter[Object.keys(osNameToFilter)[0]] : osNameToFilter[osName];
                  amiNameFilter += osDate + '*-x86_64-gp2';
                  console.info(`OS: ${osName}[${osDate}]`);
                  console.info(`Filter: ${amiNameFilter}`);

                  const ec2 = new AWS.EC2({region: region});

                  console.info(`Calling: DescribeImages...`);
                  const params = {
                    Filters: [{ Name: 'name', Values: [amiNameFilter]}],
                    Owners: ['amazon']
                  };
                  const data = await ec2.describeImages(params).promise();

                  if (data.Images.length > 0) {
                    const image = data.Images.sort((x, y) => y.Name.localeCompare(x.Name))[0];
                    const responseData = {
                      Name: image.Name,
                      CreationDate: image.CreationDate
                    };
                    console.info(`Image: ${image.Name} (${image.ImageId})`);
                    await response.send(event, context, response.SUCCESS, responseData, image.ImageId);
                  }
                  else {
                    throw new Error(`Could not find Image(s) matching pattern ${amiNameFilter}`);
                  }
                }
                catch (err) {
                  const responseData = {Error: `${(err.code) ? err.code : 'Error'}: ${err.message}`};
                  console.error(responseData.Error);
                  await response.send(event, context, response.FAILED, responseData);
                }
                break;

              case 'Delete':
                await response.send(event, context, response.SUCCESS);
            }
          };
    DependsOn: AmazonLinux2ImageLogGroup
  AmazonLinuxImageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/AmazonLinuxImage
      RetentionInDays: !Ref LogRetention
  AmazonLinuxImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AmazonLinuxImage
      Description: A Lambda function that looks up the latest Amazon Linux Image for a given OS Variant and Region (HVM64 only).
      Role: !GetAtt Role.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Layers:
        - !ImportValue
            Fn::Sub: ${LayersStackName}-AsyncCustomResourceLayerVersionArn
      Handler: index.handler
      Code:
        ZipFile: |
          const response = require('cfn-response-promise');

          const AWS = require('aws-sdk');
          AWS.config.apiVersions = {
            ec2: '2016-11-15'
          };

          const osNameToFilter = {
            'Amazon Linux'           : 'amzn-ami-hvm-????.??.?.', // List default first
            'Amazon Linux 2018.03.0' : 'amzn-ami-hvm-2018.03.0.',
            'Amazon Linux 2017.09.1' : 'amzn-ami-hvm-2017.09.1.',
            'Amazon Linux 2017.09.0' : 'amzn-ami-hvm-2017.09.0.',
            'Amazon Linux 2017.03.1' : 'amzn-ami-hvm-2017.03.1.',
            'Amazon Linux 2017.03.0' : 'amzn-ami-hvm-2017.03.0.'
          };

          exports.handler = async (event, context) => {
            console.info(`Request body:\n${JSON.stringify(event)}`);

            switch (event.RequestType) {
              case 'Create':
              case 'Update':
                try {
                  const region = event.ResourceProperties.Region || process.env.AWS_REGION;
                  const osName = event.ResourceProperties.OSName || Object.keys(osNameToFilter)[0];
                  const osDate = event.ResourceProperties.OSDate || '????????';

                  let amiNameFilter = (! osNameToFilter[osName]) ? osNameToFilter[Object.keys(osNameToFilter)[0]] : osNameToFilter[osName];
                  amiNameFilter += osDate + '-x86_64-gp2';
                  console.info(`OS: ${osName}[${osDate}]`);
                  console.info(`Filter: ${amiNameFilter}`);

                  const ec2 = new AWS.EC2({region: region});

                  console.info(`Calling: DescribeImages...`);
                  const params = {
                    Filters: [{ Name: 'name', Values: [amiNameFilter]}],
                    Owners: ['amazon']
                  };
                  const data = await ec2.describeImages(params).promise();

                  if (data.Images.length > 0) {
                    const image = data.Images.sort((x, y) => y.Name.localeCompare(x.Name))[0];
                    const responseData = {
                      Name: image.Name,
                      CreationDate: image.CreationDate
                    };
                    console.info(`Image: ${image.Name} (${image.ImageId})`);
                    await response.send(event, context, response.SUCCESS, responseData, image.ImageId);
                  }
                  else {
                    throw new Error(`Could not find Image(s) matching pattern ${amiNameFilter}`);
                  }
                }
                catch (err) {
                  const responseData = {Error: `${(err.code) ? err.code : 'Error'}: ${err.message}`};
                  console.error(responseData.Error);
                  await response.send(event, context, response.FAILED, responseData);
                }
                break;

              case 'Delete':
                await response.send(event, context, response.SUCCESS);
            }
          };
    DependsOn: AmazonLinuxImageLogGroup
  WindowsImageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/WindowsImage
      RetentionInDays: !Ref LogRetention
  WindowsImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: WindowsImage
      Description: A Lambda function that looks up the latest Windows Image for a given OS Variant and Region, or a specific Windows Image if an additional OS Date is specified.
      Role: !GetAtt Role.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Layers:
        - !ImportValue
            Fn::Sub: ${LayersStackName}-AsyncCustomResourceLayerVersionArn
      Handler: index.handler
      Code:
        ZipFile: |
          const response = require('cfn-response-promise');

          const AWS = require('aws-sdk');
          AWS.config.apiVersions = {
            ec2: '2016-11-15'
          };

          const osNameToFilter = {
            'Windows Server 2016'                                  : 'Windows_Server-2016-English-Full-Base-', // List default first
            'Windows Server 2016 with Containers'                  : 'Windows_Server-2016-English-Full-Containers-',
            'Windows Server 2016 Nano'                             : 'Windows_Server-2016-English-Nano-Base-',
            'Windows Server 2016 with SQL Server 2016 Express'     : 'Windows_Server-2016-English-Full-SQL_2016_SP1_Express-',
            'Windows Server 2016 with SQL Server 2016 Web'         : 'Windows_Server-2016-English-Full-SQL_2016_SP1_Web-',
            'Windows Server 2016 with SQL Server Standard'         : 'Windows_Server-2016-English-Full-SQL_2016_SP1_Standard-',
            'Windows Server 2012 R2'                               : 'Windows_Server-2012-R2_RTM-English-64Bit-Base-',
            'Windows Server 2012 R2 with SQL Server 2016 Express'  : 'Windows_Server-2012-R2_RTM-English-64Bit-SQL_2016_SP1_Express-',
            'Windows Server 2012 R2 with SQL Server 2016 Web'      : 'Windows_Server-2012-R2_RTM-English-64Bit-SQL_2016_SP1_Web-',
            'Windows Server 2012 R2 with SQL Server 2016 Standard' : 'Windows_Server-2012-R2_RTM-English-64Bit-SQL_2016_SP1_Standard-'
          };

          exports.handler = async (event, context) => {
            console.info(`Request body:\n${JSON.stringify(event)}`);

            switch (event.RequestType) {
              case 'Create':
              case 'Update':
                try {
                  const region = event.ResourceProperties.Region || process.env.AWS_REGION;
                  const osName = event.ResourceProperties.OSName || Object.keys(osNameToFilter)[0];
                  const osDate = event.ResourceProperties.OSDate || '????????';

                  let amiNameFilter = (! osNameToFilter[osName]) ? osNameToFilter[Object.keys(osNameToFilter)[0]] : osNameToFilter[osName];
                  amiNameFilter += osDate.substr(0,4) + '.' + osDate.substr(4,2) + '.' + osDate.substr(6,2);
                  console.info(`OS: ${osName}[${osDate}]`);
                  console.info(`Filter: ${amiNameFilter}`);

                  const ec2 = new AWS.EC2({region: region});

                  console.info(`Calling: DescribeImages...`);
                  const params = {
                    Filters: [{ Name: 'name', Values: [amiNameFilter]}],
                    Owners: ['amazon']
                  };
                  const data = await ec2.describeImages(params).promise();

                  if (data.Images.length > 0) {
                    const image = data.Images.sort((x, y) => y.CreationDate.localeCompare(x.CreationDate))[0];
                    const responseData = {
                      Name: image.Name,
                      CreationDate: image.CreationDate
                    };
                    console.info(`Image: ${image.Name} (${image.ImageId})`);
                    await response.send(event, context, response.SUCCESS, responseData, image.ImageId);
                  }
                  else {
                    throw new Error(`Could not find Image(s) matching pattern ${amiNameFilter}`);
                  }
                }
                catch (err) {
                  const responseData = {Error: `${(err.code) ? err.code : 'Error'}: ${err.message}`};
                  console.error(responseData.Error);
                  await response.send(event, context, response.FAILED, responseData);
                }
                break;

              case 'Delete':
                await response.send(event, context, response.SUCCESS);
            }
          };
    DependsOn: WindowsImageLogGroup
  RHELImageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/RHELImage
      RetentionInDays: !Ref LogRetention
  RHELImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: RHELImage
      Description: A Lambda function that looks up the latest RHEL Image for a given OS Variant and Region. (x86_64 only)
      Role: !GetAtt Role.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Layers:
        - !ImportValue
            Fn::Sub: ${LayersStackName}-AsyncCustomResourceLayerVersionArn
      Handler: index.handler
      Code:
        ZipFile: |
          const response = require('cfn-response-promise');

          const AWS = require('aws-sdk');
          AWS.config.apiVersions = {
            ec2: '2016-11-15'
          };

          const osNameToFilter = {
            'RHEL 7'     : 'RHEL-7.*_HVM_GA-', // List default first
            'RHEL 8'     : 'RHEL-8.*.*_HVM-',
            'RHEL 8.1.0' : 'RHEL-8.1.0_HVM_GA-',
            'RHEL 8.0.0' : 'RHEL-8.0.0_HVM-',
            'RHEL 7.7'   : 'RHEL-7.7_HVM_GA-',
            'RHEL 7.6'   : 'RHEL-7.6_HVM_GA-',
            'RHEL 7.5'   : 'RHEL-7.5_HVM_GA-',
            'RHEL 7.4'   : 'RHEL-7.4_HVM_GA-',
            'RHEL 7.3'   : 'RHEL-7.3_HVM_GA-',
            'RHEL 7.2'   : 'RHEL-7.2_HVM-',
            'RHEL 7.1'   : 'RHEL-7.1_HVM-',
            'RHEL 6'     : 'RHEL-6.*_HVM_GA-',
            'RHEL 6.10'  : 'RHEL-6.10_HVM_GA-',
            'RHEL 6.9'   : 'RHEL-6.9_HVM_GA-',
            'RHEL 6.8'   : 'RHEL-6.8_HVM_GA-',
            'RHEL 6.7'   : 'RHEL-6.7_HVM-',
            'RHEL 6.6'   : 'RHEL-6.6_HVM_GA-'
          };

          exports.handler = async (event, context) => {
            console.info(`Request body:\n${JSON.stringify(event)}`);

            switch (event.RequestType) {
              case 'Create':
              case 'Update':
                try {
                  const region = event.ResourceProperties.Region || process.env.AWS_REGION;
                  const osName = event.ResourceProperties.OSName || Object.keys(osNameToFilter)[0];
                  const osDate = event.ResourceProperties.OSDate || '????????';

                  let amiNameFilter = (! osNameToFilter[osName]) ? osNameToFilter[Object.keys(osNameToFilter)[0]] : osNameToFilter[osName];
                  amiNameFilter += osDate + '-x86_64-?-Hourly2-GP2';
                  console.info(`OS: ${osName}[${osDate}]`);
                  console.info(`Filter: ${amiNameFilter}`);

                  const ec2 = new AWS.EC2({region: region});

                  console.info(`Calling: DescribeImages...`);
                  const params = {
                    Filters: [{ Name: 'name', Values: [amiNameFilter]}],
                    Owners: ['309956199498']
                  };
                  const data = await ec2.describeImages(params).promise();

                  if (data.Images.length > 0) {
                    const image = data.Images.sort((x, y) => y.CreationDate.localeCompare(x.CreationDate))[0];
                    const responseData = {
                      Name: image.Name,
                      CreationDate: image.CreationDate
                    };
                    console.info(`Image: ${image.Name} (${image.ImageId})`);
                    await response.send(event, context, response.SUCCESS, responseData, image.ImageId);
                  }
                  else {
                    throw new Error(`Could not find Image(s) matching pattern ${amiNameFilter}`);
                  }
                }
                catch (err) {
                  const responseData = {Error: `${(err.code) ? err.code : 'Error'}: ${err.message}`};
                  console.error(responseData.Error);
                  await response.send(event, context, response.FAILED, responseData);
                }
                break;

              case 'Delete':
                await response.send(event, context, response.SUCCESS);
            }
          };
    DependsOn: RHELImageLogGroup
  UbuntuImageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/UbuntuImage
      RetentionInDays: !Ref LogRetention
  UbuntuImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: UbuntuImage
      Description: A Lambda function that looks up the latest Ubuntu Image for a given OS Variant and Region.
      Role: !GetAtt Role.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Layers:
        - !ImportValue
            Fn::Sub: ${LayersStackName}-AsyncCustomResourceLayerVersionArn
      Handler: index.handler
      Code:
        ZipFile: |
          const response = require('cfn-response-promise');

          const AWS = require('aws-sdk');
          AWS.config.apiVersions = {
            ec2: '2016-11-15'
          };

          const osNameToFilter = {
            'Ubuntu Server 18.04 LTS' : 'ubuntu/images/hvm-ssd/ubuntu-bionic-18.04-amd64-server-', // List default first
            'Ubuntu Server 16.04 LTS' : 'ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-',
            'Ubuntu Server 14.04 LTS' : 'ubuntu/images/hvm-ssd/ubuntu-trusty-14.04-amd64-server-',
            'Ubuntu Server 12.04 LTS' : 'ubuntu/images/hvm-ssd/ubuntu-precise-12.04-amd64-server-'
          };

          exports.handler = async (event, context) => {
            console.info(`Request body:\n${JSON.stringify(event)}`);

            switch (event.RequestType) {
              case 'Create':
              case 'Update':
                try {
                  const region = event.ResourceProperties.Region || process.env.AWS_REGION;
                  const osName = event.ResourceProperties.OSName || Object.keys(osNameToFilter)[0];
                  const osDate = event.ResourceProperties.OSDate || '????????';

                  let amiNameFilter = (! osNameToFilter[osName]) ? osNameToFilter[Object.keys(osNameToFilter)[0]] : osNameToFilter[osName];
                  amiNameFilter += osDate + '*';
                  console.info(`OS: ${osName}[${osDate}]`);
                  console.info(`Filter: ${amiNameFilter}`);

                  const ec2 = new AWS.EC2({region: region});

                  console.info(`Calling: DescribeImages...`);
                  const params = {
                    Filters: [{ Name: 'name', Values: [amiNameFilter]}],
                    Owners: ['099720109477']
                  };
                  const data = await ec2.describeImages(params).promise();

                  if (data.Images.length > 0) {
                    const image = data.Images.sort((x, y) => y.Name.localeCompare(x.Name))[0];
                    const responseData = {
                      Name: image.Name,
                      CreationDate: image.CreationDate
                    };
                    console.info(`Image: ${image.Name} (${image.ImageId})`);
                    await response.send(event, context, response.SUCCESS, responseData, image.ImageId);
                  }
                  else {
                    throw new Error(`Could not find Image(s) matching pattern ${amiNameFilter}`);
                  }
                }
                catch (err) {
                  const responseData = {Error: `${(err.code) ? err.code : 'Error'}: ${err.message}`};
                  console.error(responseData.Error);
                  await response.send(event, context, response.FAILED, responseData);
                }
                break;

              case 'Delete':
                await response.send(event, context, response.SUCCESS);
            }
          };
    DependsOn: UbuntuImageLogGroup
  AmazonNATImageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/AmazonNATImage
      RetentionInDays: !Ref LogRetention
  AmazonNATImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AmazonNATImage
      Description: A Lambda function that looks up the latest Amazon NAT Image for a given Region (HVM64 only).
      Role: !GetAtt Role.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Layers:
        - !ImportValue
            Fn::Sub: ${LayersStackName}-AsyncCustomResourceLayerVersionArn
      Handler: index.handler
      Code:
        ZipFile: |
          const response = require('cfn-response-promise');

          const AWS = require('aws-sdk');
          AWS.config.apiVersions = {
            ec2: '2016-11-15'
          };

          const osNameToFilter = {
            'Amazon NAT'           : 'amzn-ami-vpc-nat-hvm-????.??.?.', // List default first
            'Amazon NAT 2018.03.0' : 'amzn-ami-vpc-nat-hvm-2018.03.0.',
            'Amazon NAT 2017.09.1' : 'amzn-ami-vpc-nat-hvm-2017.09.1.',
            'Amazon NAT 2017.09.0' : 'amzn-ami-vpc-nat-hvm-2017.09.0.',
            'Amazon NAT 2017.03.1' : 'amzn-ami-vpc-nat-hvm-2017.03.1.',
            'Amazon NAT 2017.03.0' : 'amzn-ami-vpc-nat-hvm-2017.03.0.'
          };

          exports.handler = async (event, context) => {
            console.info(`Request body:\n${JSON.stringify(event)}`);

            switch (event.RequestType) {
              case 'Create':
              case 'Update':
                try {
                  const region = event.ResourceProperties.Region || process.env.AWS_REGION;
                  const osName = event.ResourceProperties.OSName || Object.keys(osNameToFilter)[0];
                  const osDate = event.ResourceProperties.OSDate || '????????';

                  let amiNameFilter = (! osNameToFilter[osName]) ? osNameToFilter[Object.keys(osNameToFilter)[0]] : osNameToFilter[osName];
                  amiNameFilter += osDate + '-x86_64-ebs';
                  console.info(`OS: ${osName}[${osDate}]`);
                  console.info(`Filter: ${amiNameFilter}`);

                  const ec2 = new AWS.EC2({region: region});

                  console.info(`Calling: DescribeImages...`);
                  const params = {
                    Filters: [{ Name: 'name', Values: [amiNameFilter]}],
                    Owners: ['amazon']
                  };
                  const data = await ec2.describeImages(params).promise();

                  if (data.Images.length > 0) {
                    const image = data.Images.sort((x, y) => y.Name.localeCompare(x.Name))[0];
                    const responseData ={
                      Name: image.Name,
                      CreationDate: image.CreationDate
                    };
                    console.info(`Image: ${image.Name} (${image.ImageId})`);
                    await response.send(event, context, response.SUCCESS, responseData, image.ImageId);
                  }
                  else {
                    throw new Error(`Could not find Image(s) matching pattern ${amiNameFilter}`);
                  }
                }
                catch (err) {
                  const responseData = {Error: `${(err.code) ? err.code : 'Error'}: ${err.message}`};
                  console.error(responseData.Error);
                  await response.send(event, context, response.FAILED, responseData);
                }
                break;

              case 'Delete':
                await response.send(event, context, response.SUCCESS);
            }
          };
    DependsOn: AmazonNATImageLogGroup
Outputs:
  AmazonLinux2ImageFunctionArn:
    Description: The AmazonLinux2Image Lambda Function ARN
    Value: !GetAtt AmazonLinux2ImageFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-AmazonLinux2ImageFunctionArn
  AmazonLinuxImageFunctionArn:
    Description: The AmazonLinuxImage Lambda Function ARN
    Value: !GetAtt AmazonLinuxImageFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-AmazonLinuxImageFunctionArn
  WindowsImageFunctionArn:
    Description: The WindowsImage Lambda Function ARN
    Value: !GetAtt WindowsImageFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-WindowsImageFunctionArn
  RHELImageFunctionArn:
    Description: The RHELImage Lambda Function ARN
    Value: !GetAtt RHELImageFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-RHELImageFunctionArn
  UbuntuImageFunctionArn:
    Description: The UbuntuImage Lambda Function ARN
    Value: !GetAtt UbuntuImageFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-UbuntuImageFunctionArn
  AmazonNATImageFunctionArn:
    Description: The AmazonNATImage Lambda Function ARN
    Value: !GetAtt AmazonNATImageFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-AmazonNATImageFunctionArn
