AWSTemplateFormatVersion: 2010-09-09
Description: Utility-LinuxBastions Template.
  This adds Linux Bastions to a VPC. These Bastions are wrapped in an AutoScalingGroup, so if they fail, they are re-created automatically. Optionally, static
  public and private IP addresses can be requested, and optionally registered in public and private DNS. Optionally, logs can be uploaded to CloudWatch Logs,
  with an Alarm to monitor invalid users. Optionally, users who are members of the BastionAdministrators and BastionUsers IAM groups can be created on this
  server, with any SSH keys they have imported setup for remote access.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - DirectoryStackName
          - VPCStackName
          - AMIFunctionsStackName
          - BucketsStackName
          - TopicsStackName
          - CodesStackName
      - Label:
          default: Resource Dependencies
        Parameters:
          - KeyName
      - Label:
          default: System Configuration
        Parameters:
          - CompanyName
          - SystemName
      - Label:
          default: Environment Configuration
        Parameters:
          - AccountName
          - EnvironmentName
          - EnvironmentType
          - EnvironmentZones
          - OSName
      - Label:
          default: Utility Configuration
        Parameters:
          - UtilityName
          - UtilityDomain
          - UseStaticPublicAddress
          - UseLocalUsers
          - LogRetention
          - OnSchedule
          - OffSchedule
      - Label:
          default: Security Configuration
        Parameters:
          - UserNetworks
          - UserNetworkDescriptions
    ParameterLabels:
      DirectoryStackName:
        default: Directory Stack Name
      VPCStackName:
        default: VPC Stack Name
      AMIFunctionsStackName:
        default: AMIFunctions Stack Name
      BucketsStackName:
        default: Buckets Stack Name
      TopicsStackName:
        default: Topics Stack Name
      CodesStackName:
        default: Codes Stack Name
      KeyName:
        default: Key Name
      CompanyName:
        default: Company Name
      SystemName:
        default: System Name
      AccountName:
        default: Account Name
      EnvironmentName:
        default: Environment Name
      EnvironmentType:
        default: Environment Type
      EnvironmentZones:
        default: Environment Zones
      OSName:
        default: Operating System Name
      UtilityName:
        default: Utility Name
      UtilityDomain:
        default: Utility Domain
      UseStaticPublicAddress:
        default: Use Static Public Address
      UseLocalUsers:
        default: Use Local Users
      LogRetention:
        default: Log Retention
      OnSchedule:
        default: On Schedule
      OffSchedule:
        default: Off Schedule
      UserNetworks:
        default: User Networks
      UserNetworkDescriptions:
        default: User Network Descriptions
Parameters:
  DirectoryStackName:
    Description: Name of the CloudFormation Stack containing the Directory Management Workstation (DirectoryService) or DomainControllers (ActiveDirectory)
    Type: String
    MaxLength: 64
    Default: ''
    AllowedPattern: (^$|^[A-Z][a-zA-Z0-9]*-(ActiveDirectory|DirectoryService)$)
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  VPCStackName:
    Description: Name of the CloudFormation Stack containing the VPC
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Production-VPC
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  AMIFunctionsStackName:
    Description: Name of the CloudFormation Stack containing the AMI Functions
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: AMIFunctions
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  BucketsStackName:
    Description: Name of the CloudFormation Stack containing Buckets
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Buckets
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  TopicsStackName:
    Description: Name of the CloudFormation Stack containing Topics
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Topics
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  CodesStackName:
    Description: Name of the CloudFormation Stack containing the Codes Resources
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Codes
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  KeyName:
    Description: Name of an existing KeyPair to enable SSH access to the Instances
    Type: AWS::EC2::KeyPair::KeyName
    MaxLength: 32
    Default: administrator
    AllowedPattern: (^$|^[_a-zA-Z0-9]*$)
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  CompanyName:
    Description: Name of the Company associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: DXC
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  SystemName:
    Description: Name of the System associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: Prototype
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  AccountName:
    Description: Name of the Account associated with the Stack
    Type: String
    Default: Production
    AllowedValues:
      - Production
      - Staging
      - UAT
      - QA
      - Testing
      - Development
      - Build
      - Core
      - Recovery
      - Log
      - Management
      - Jumpstart
      - Organization
    ConstraintDescription: must be Production, Staging, UAT, QA, Testing, Development, Build, Core, Recovery, Log, Management, Jumpstart or Organization.
  EnvironmentName:
    Description: Name of the Environment associated with the Stack
    Type: String
    Default: Production
    AllowedValues:
      - Production
      - Staging
      - UAT
      - QA
      - Testing
      - Development
      - Build
      - Core
      - Recovery
      - Log
      - Identity
      - Management
      - Organization
    ConstraintDescription: must be Production, Staging, UAT, QA, Testing, Development, Build, Core, Recovery, Log, Identity, Management or Organization.
  EnvironmentType:
    Description: Type of the Environment to build. Used to select size-related options in Mappings
    Type: String
    Default: micro
    AllowedValues:
      - standby
      - nano
      - micro
      - small
      - medium
      - large
      - xlarge
    ConstraintDescription: must be standby, nano, micro, small, medium, large or xlarge.
  EnvironmentZones:
    Description: Number of Availability Zones to build
    Type: String
    Default: 1
    AllowedValues:
      - 1
      - 2
    ConstraintDescription: must be 1 or 2.
  OSName:
    Description: The Operating System to use for Instances
    Type: String
    Default: Amazon Linux 2
    AllowedValues:
      - Amazon Linux 2
      - Amazon Linux 2.0
    ConstraintDescription: must be "Amazon Linux 2" (latest) or "Amazon Linux 2.0".
  UtilityName:
    Description: Name of the Utility associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: LinuxBastions
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  UtilityDomain:
    Description: DNS Name of the Utility associated with the Stack
    Type: String
    MaxLength: 16
    Default: lbastion
    AllowedPattern: (^$|^[a-z][-a-z0-9]*$)
    ConstraintDescription: must begin with a lower case letter and contain only lower case letters, numbers and dashes.
  UseStaticPublicAddress:
    Description: Create and associate a separate Static Public Address
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    ConstraintDescription: must be either true or false.
  UseLocalUsers:
    Description: Synchronize Members of BastionAdministrators and BastionUsers IAM Groups (with SSH Keys) to Local Unix Users
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    ConstraintDescription: must be either true or false.
  LogRetention:
    Description: Number of days to retain CloudWatch Log Events
    Type: Number
    Default: 14
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
    ConstraintDescription: must be 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827 or 3653.
  OnSchedule:
    Description: On Schedule in constrained Cron format (UTC)
    Type: String
    Default: 0 11 * * 1-5
    AllowedPattern: (^$|^0 ([5-9]|1[0-6]) \* \* 1-5$)
    ConstraintDescription: 'must follow constrained cron syntax: "0 H * * 1-5", where H = 5-16.'
  OffSchedule:
    Description: Off Schedule in constrained Cron format (UTC)
    Type: String
    Default: 0 4 * * *
    AllowedPattern: (^$|^0 [0-7] \* \* \*$)
    ConstraintDescription: 'must follow constrained cron syntax: "0 H * * *", where H = 0-7.'
  UserNetworks:
    Description: Networks that can use the Utility
    Type: String
    Default: -,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 16 values, each an IP CIDR range of the form x.x.x.x/x or '-'.
  UserNetworkDescriptions:
    Description: Descriptions of networks that can use the Utility
    Type: String
    Default: -,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 16 values, each a short text description or '-'.
Mappings:
  RegionNameMap:
    us-east-1:
      Name: Virginia
      Code: ue1
    us-east-2:
      Name: Ohio
      Code: ue2
    us-west-1:
      Name: California
      Code: uw1
    us-west-2:
      Name: Oregon
      Code: uw2
    ap-east-1:
      Name: HongKong
      Code: ae1
    ap-south-1:
      Name: Mumbai
      Code: ad1
    ap-northeast-2:
      Name: Seoul
      Code: an2
    ap-southeast-1:
      Name: Singapore
      Code: as1
    ap-southeast-2:
      Name: Sydney
      Code: as2
    ap-northeast-1:
      Name: Tokyo
      Code: an1
    ca-central-1:
      Name: Canada
      Code: cc1
    eu-central-1:
      Name: Frankfurt
      Code: ec1
    eu-west-1:
      Name: Ireland
      Code: ew1
    eu-west-2:
      Name: London
      Code: ew2
    eu-west-3:
      Name: Paris
      Code: ew3
    eu-north-1:
      Name: Stockholm
      Code: en1
    me-south-1:
      Name: Bahrain
      Code: ms1
    sa-east-1:
      Name: SaoPaulo
      Code: se1
  InstanceTypeMap:
    Bastion:
      standby: t3.small
      nano: t3.nano
      micro: t3.micro
      small: t3.small
      medium: t3.medium
      large: c5.large
      xlarge: c5.xlarge
Conditions:
  ConfigureAccountEnvironment: !Or [ !Not [ !Equals [ !Ref AccountName, !Ref EnvironmentName ]], !Equals [ !Ref AccountName, Jumpstart ]]
  ConfigureGlobal: !Equals [ !Ref 'AWS::Region', us-east-1 ]
  ConfigureDirectoryIntegration: !Not [ !Equals [ !Ref DirectoryStackName, '' ]]
  ConfigureActiveDirectoryIntegration: !Equals [ !Select [ 1, !Split [ '-', !Ref DirectoryStackName ]], 'ActiveDirectory' ]
  ConfigureKey: !Not [ !Equals [ !Ref KeyName, '' ]]
  ConfigureStandby: !Equals [ !Ref EnvironmentType, standby ]
  ConfigureMultiZone: !Not [ !Equals [ !Ref EnvironmentZones, 1 ]]
  ConfigureStaticPublicAddress: !Equals [ !Ref UseStaticPublicAddress, true ]
  ConfigureStaticPublicAddress&MultiZone: !And [ !Condition ConfigureStaticPublicAddress, !Condition ConfigureMultiZone ]
  ConfigureDomainName: !And [ !Not [ !Equals [ !Ref UtilityDomain, '' ]], !Condition ConfigureStaticPublicAddress ]
  ConfigureDomainName&MultiZone: !And [ !Condition ConfigureDomainName, !Condition ConfigureMultiZone ]
  ConfigureUsers: !Equals [ !Ref UseLocalUsers, true ]
  ConfigureOnSchedule: !And [ !Not [ !Equals [ !Ref OnSchedule, '' ]], !Not [ !Condition ConfigureStandby ]]
  ConfigureOffSchedule: !And [ !Not [ !Equals [ !Ref OffSchedule , '' ]], !Not [ !Condition ConfigureStandby ]]
  ConfigureUserNetwork0: !Not [ !Equals [ !Select [ 0, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork1: !Not [ !Equals [ !Select [ 1, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork2: !Not [ !Equals [ !Select [ 2, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork3: !Not [ !Equals [ !Select [ 3, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork4: !Not [ !Equals [ !Select [ 4, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork5: !Not [ !Equals [ !Select [ 5, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork6: !Not [ !Equals [ !Select [ 6, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork7: !Not [ !Equals [ !Select [ 7, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork8: !Not [ !Equals [ !Select [ 8, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork9: !Not [ !Equals [ !Select [ 9, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork10: !Not [ !Equals [ !Select [ 10, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork11: !Not [ !Equals [ !Select [ 11, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork12: !Not [ !Equals [ !Select [ 12, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork13: !Not [ !Equals [ !Select [ 13, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork14: !Not [ !Equals [ !Select [ 14, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork15: !Not [ !Equals [ !Select [ 15, !Split [ ',', !Ref UserNetworks ]], '-' ]]
Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: DownloadScriptFromS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${ScriptsBucket}/Linux/*
                    - ScriptsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  - !Sub
                    - arn:aws:s3:::${ScriptsBucket}/LinuxBastions/*
                    - ScriptsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ScriptsBucket
        - PolicyName: DownloadConfigurationFromS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${ConfigurationsBucket}/Linux/*
                    - ConfigurationsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
                  - !Sub
                    - arn:aws:s3:::${ConfigurationsBucket}/LinuxBastions/*
                    - ConfigurationsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
        - PolicyName: DownloadProductFromS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${ProductsBucket}/Windows/*
                    - ProductsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ProductsBucket
                  - !Sub
                    - arn:aws:s3:::${ProductsBucket}/WindowsBastions/*
                    - ProductsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ProductsBucket
        - PolicyName: StaticPublicAddressPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AssociateAddress
                  - ec2:DisassociateAddress
                Resource: '*'
        - PolicyName: LocalUsersPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iam:GetGroup
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:group/BastionAdministrators
                  - !Sub arn:aws:iam::${AWS::AccountId}:group/BastionUsers
              - Effect: Allow
                Action:
                  - iam:ListSSHPublicKeys
                  - iam:GetSSHPublicKey
                Resource: !Sub arn:aws:iam::${AWS::AccountId}:user/*
  LogGroupName:
    Type: Custom::LogGroupName
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${CodesStackName}-LogGroupNameFunctionArn
      CompanyName: !Ref CompanyName
      SystemName: !Ref SystemName
      ApplicationName: !Ref UtilityName
      EnvironmentName: !If [ ConfigureAccountEnvironment, !Ref EnvironmentName, !Ref 'AWS::NoValue' ]
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LogGroupName
      RetentionInDays: !Ref LogRetention
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${EnvironmentName}-${UtilityName}-InstanceSecurityGroup
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCNetwork
          Description: VPC (ICMP)
        - !If
          - ConfigureUserNetwork0
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 0, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 0, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork1
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 1, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork1
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 1, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork2
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 2, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork2
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 2, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork3
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 3, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork3
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 3, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork4
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 4, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork4
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 4, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork5
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 5, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork5
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 5, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork6
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 6, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork6
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 6, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork7
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 7, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork7
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 7, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork8
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 8, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 8, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork8
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 8, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 8, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork9
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 9, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 9, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork9
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 9, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 9, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork10
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 10, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 10, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork10
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 10, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 10, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork11
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 11, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 11, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork11
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 11, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 11, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork12
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 12, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 12, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork12
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 12, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 12, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork13
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 13, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 13, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork13
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 13, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 13, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork14
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 14, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 14, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork14
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 14, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 14, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork15
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 15, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 15, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork15
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 15, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 15, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${UtilityName}-InstanceSecurityGroup
  EIPA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Condition: ConfigureStaticPublicAddress
  EIPB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Condition: ConfigureStaticPublicAddress&MultiZone
  HostName:
    Type: Custom::HostName
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${CodesStackName}-HostNameFunctionArn
      CompanyName: !Ref CompanyName
      LocationName: !Ref AWS::Region
      EnvironmentName: !Ref EnvironmentName
      ApplicationName: !Ref UtilityName
      InstanceNumber: 01
      # Note: ZoneCode cannot be used here, as it will not be known. AutoScaling may create Instances in more than one
      #       AvailabilityZone. So, we have to use a script run during initial boot that appends the Zone Code to the
      #       HostName without Zone Code created here.
  AmazonLinux2Image:
    Type: Custom::AmazonLinux2Image
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${AMIFunctionsStackName}-AmazonLinux2ImageFunctionArn
      Region: !Ref AWS::Region
      OSName: !Ref OSName
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref Role
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Credentials:
          type: S3
          roleName: !Ref Role
          buckets:
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ScriptsBucket
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ProductsBucket
      AWS::CloudFormation::Init:
        configSets:
          All:
            - UpdateOS
            - ConfigureOSUpdates
            - ConfigureOS
            - ConfigureCFN
            - InstallSSMAgent
            - InstallCloudWatchAgent
            - ConfigureCloudWatchAgent
            - ConfigureHostName
            - !If [ ConfigureStaticPublicAddress, ConfigureStaticPublicAddress, !Ref 'AWS::NoValue' ]
            - !If [ ConfigureUsers, ConfigureUsers, !Ref 'AWS::NoValue' ]
        UpdateOS:
          commands:
            01-yum-update:
              command: yum update -y
              ignoreErrors: false
        ConfigureOSUpdates:
          packages:
            yum:
              yum-cron: []
          files:
            /etc/yum/yum-cron.conf:
              content: |
                [commands]
                update_cmd = security
                update_messages = yes
                download_updates = yes
                apply_updates = yes
                random_sleep = 10
              mode: '000644'
              owner: root
              group: root
        ConfigureOS:
          packages:
            yum:
              git: []
          files:
            /etc/profile.d/local.sh:
              content: |
                alias lsa='ls -lAF'
                alias ip4='ip addr | grep " inet "'
              mode: '000644'
              owner: root
              group: root
        ConfigureCFN:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --configsets All --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        InstallSSMAgent:
          packages:
            rpm:
              amazon-ssm-agent:
                - https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
        InstallCloudWatchAgent:
          sources:
            /var/tmp: https://s3.amazonaws.com/amazoncloudwatch-agent/linux/amd64/latest/AmazonCloudWatchAgent.zip
          commands:
            01-install-cloudwatch-agent:
              command: yum install -y /var/tmp/amazon-cloudwatch-agent.rpm
              ignoreErrors: false
        ConfigureCloudWatchAgent:
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: !Sub |
                {
                  "agent" : {
                    "metrics_collection_interval" : 60,
                    "logfile" : "/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log",
                    "debug" : false
                  },
                  "metrics" : {
                    "namespace" : "${SystemName}/${EnvironmentName}-${UtilityName}",
                    "metrics_collected" : {
                      "mem" : {
                        "measurement" : [
                          { "name" : "mem_used_percent", "rename" : "MemoryUsedPercent" }
                        ]
                      },
                      "swap" : {
                        "measurement" : [
                          { "name" : "swap_used_percent", "rename" : "SwapUsedPercent" }
                        ]
                      },
                      "disk" : {
                        "resources" : [
                          "*"
                        ],
                        "measurement" : [
                          { "name" : "used_percent", "rename" : "DiskUsedPercent" }
                        ],
                        "ignore_file_system_types": [
                          "rootfs",
                          "sysfs",
                          "tmpfs",
                          "devtmpfs"
                        ]
                      }
                    },
                    "append_dimensions" : {
                      "InstanceId" : "${!aws:InstanceId}",
                      "AutoScalingGroupName" : "${!aws:AutoScalingGroupName}"
                    },
                    "aggregation_dimensions" : [
                      [ "InstanceId" ],
                      [ "InstanceId", "path" ],
                      [ "AutoScalingGroupName" ]
                    ]
                  },
                  "logs" : {
                    "logs_collected" : {
                      "files" : {
                        "collect_list" : [
                          {
                            "file_path" : "/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "LinuxBastion/{instance_id}/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log"
                          },
                          {
                            "file_path" : "/var/log/cloud-init.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "LinuxBastion/{instance_id}/var/log/cloud-init.log",
                            "timestamp_format" : "%b %d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/cloud-init-output.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "LinuxBastion/{instance_id}/var/log/cloud-init-output.log"
                          },
                          {
                            "file_path" : "/var/log/cfn-init.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "LinuxBastion/{instance_id}/var/log/cfn-init.log",
                            "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/cfn-init-cmd.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "LinuxBastion/{instance_id}/var/log/cfn-init-cmd.log",
                            "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/cfn-hup.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "LinuxBastion/{instance_id}/var/log/cfn-hup.log",
                            "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/messages",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "LinuxBastion/{instance_id}/var/log/messages",
                            "timestamp_format" : "%b %d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/secure",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "LinuxBastion/{instance_id}/var/log/secure",
                            "timestamp_format" : "%b %d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/cron",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "LinuxBastion/{instance_id}/var/log/cron",
                            "timestamp_format" : "%b %d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/dmesg",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "LinuxBastion/{instance_id}/var/log/dmesg"
                          },
                          {
                            "file_path" : "/var/log/yum.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "LinuxBastion/{instance_id}/var/log/yum.log"
                          },
                          {
                            "file_path" : "/var/log/httpd/access_log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "LinuxBastion/{instance_id}/var/log/httpd/access_log"
                          },
                          {
                            "file_path" : "/var/log/httpd/error_log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "LinuxBastion/{instance_id}/var/log/httpd/error_log"
                          }
                        ]
                      }
                    }
                  }
                }
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              amazon-cloudwatch-agent:
                enabled: true
                ensureRunning: true
                files:
                  - /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
        ConfigureHostName:
          files:
            /root/bin/configure-hostname:
              source: !Sub
                - https://${ScriptsBucket}.${s3}.amazonaws.com/Linux/configure-hostname
                - ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
          commands:
            01-configure-hostname:
              command: !Sub
                - /root/bin/configure-hostname -n -z -h ${HostName} -d ${VPCPrivateDomain}
                - VPCPrivateDomain: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCPrivateDomain
              ignoreErrors: false
        ConfigureStaticPublicAddress:
          files:
            /root/bin/associate-eip:
              source: !Sub
                - https://${ScriptsBucket}.${s3}.amazonaws.com/Linux/associate-eip
                - ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
          commands:
            01-associate-eip:
              command: !Sub
                - /root/bin/associate-eip -n -a "${EIPAAllocationId}" -b "${EIPBAllocationId}"
                - EIPAAllocationId: !If [ ConfigureStaticPublicAddress, !GetAtt EIPA.AllocationId, '' ]
                  EIPBAllocationId: !If [ ConfigureStaticPublicAddress&MultiZone, !GetAtt EIPB.AllocationId, '' ]
              ignoreErrors: false
        ConfigureUsers:
          files:
            /root/bin/create-bastion-users:
              source: !Sub
                - https://${ScriptsBucket}.${s3}.amazonaws.com/Linux/create-bastion-users
                - ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
          commands:
            01-create-bastion-administrators:
              command: /root/bin/create-bastion-users -n -a
              ignoreErrors: false
            02-create-bastion-users:
              command: /root/bin/create-bastion-users -n
              ignoreErrors: false
    Properties:
      ImageId: !Ref AmazonLinux2Image
      InstanceType: !FindInMap [ InstanceTypeMap, Bastion, !Ref EnvironmentType ]
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !If [ ConfigureKey, !Ref KeyName, !Ref 'AWS::NoValue' ]
      InstanceMonitoring: true
      SecurityGroups:
        - !Ref InstanceSecurityGroup
        - !If
            - ConfigureDirectoryIntegration
            - !ImportValue
                Fn::Sub: ${DirectoryStackName}-AdministratorSecurityGroup
            - !Ref 'AWS::NoValue'
        - !If
            - ConfigureActiveDirectoryIntegration
            - !ImportValue
                Fn::Sub: ${DirectoryStackName}-DomainMemberSecurityGroup
            - !Ref 'AWS::NoValue'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y aws-cfn-bootstrap

          /opt/aws/bin/cfn-init --verbose --configsets All --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}
          /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      VPCZoneIdentifier:
        - !ImportValue
            Fn::Sub: ${VPCStackName}-Public1SubnetA
        - !If
          - ConfigureMultiZone
          - !ImportValue
              Fn::Sub: ${VPCStackName}-Public1SubnetB
          - !Ref AWS::NoValue
      MinSize: !If [ ConfigureStandby, 0, !If [ ConfigureMultiZone, 2, 1 ]]
      MaxSize: !If [ ConfigureStandby, 0, !If [ ConfigureMultiZone, 2, 1 ]]
      DesiredCapacity: !If [ ConfigureStandby, 0, !If [ ConfigureMultiZone, 2, 1 ]]
      Cooldown: 300
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${UtilityName}-Instance
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !If [ ConfigureStandby, 0, !If [ ConfigureMultiZone, 2, 1 ]]
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT10M
        WaitOnResourceSignals: true
  OnScheduledAction:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      MinSize: !If [ ConfigureStandby, 0, !If [ ConfigureMultiZone, 2, 1 ]]
      MaxSize: !If [ ConfigureStandby, 0, !If [ ConfigureMultiZone, 2, 1 ]]
      DesiredCapacity: !If [ ConfigureStandby, 0, !If [ ConfigureMultiZone, 2, 1 ]]
      Recurrence: !Ref OnSchedule
    Condition: ConfigureOnSchedule
  OffScheduledAction:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      MinSize: 0
      MaxSize: 0
      DesiredCapacity: 0
      Recurrence: !Ref OffSchedule
    Condition: ConfigureOffSchedule
  ValidUserMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref LogGroup
      FilterPattern: '[month, day, time, host, program=sshd*, message=Accepted publickey, ...]'
      MetricTransformations:
        - MetricNamespace: !Sub ${SystemName}/${EnvironmentName}-${UtilityName}
          MetricName: ValidUsersCount
          MetricValue: 1
  InvalidUserMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref LogGroup
      FilterPattern: '[month, day, time, host, program=sshd*, message=Invalid user, ...]'
      MetricTransformations:
        - MetricNamespace: !Sub ${SystemName}/${EnvironmentName}-${UtilityName}
          MetricName: InvalidUsersCount
          MetricValue: 1
  InvalidUsersAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: The number of Invalid Logins is greater than 5 over 1 minute
      AlarmActions:
        - !ImportValue
          Fn::Sub: ${TopicsStackName}-AlarmsTopic
      Namespace: !Sub ${SystemName}/${EnvironmentName}-${UtilityName}
      MetricName: InvalidUsersCount
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
  PublicServiceNameRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PublicHostedZone
      Comment: !Sub DNS name for ${UtilityName} Instance
      Name: !Sub
        - ${UtilityDomain}.${VPCPublicDomain}.
        - VPCPublicDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPublicDomain
      Type: A
      TTL: 900
      ResourceRecords:
        - !Ref EIPA
    Condition: ConfigureDomainName
  PublicServiceNameRecordSetA:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PublicHostedZone
      Comment: !Sub
        - DNS name for ${UtilityName} Instance in ${ZoneA}
        - ZoneA: !Select [ 0, !GetAZs '' ]
      Name: !Sub
        - ${UtilityDomain}a.${VPCPublicDomain}.
        - VPCPublicDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPublicDomain
      Type: A
      TTL: 900
      ResourceRecords:
        - !Ref EIPA
    Condition: ConfigureDomainName&MultiZone
  PublicServiceNameRecordSetB:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PublicHostedZone
      Comment: !Sub
        - DNS name for ${UtilityName} Instance in ${ZoneB}
        - ZoneB: !Select [ 1, !GetAZs '' ]
      Name: !Sub
        - ${UtilityDomain}b.${VPCPublicDomain}.
        - VPCPublicDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPublicDomain
      Type: A
      TTL: 900
      ResourceRecords:
        - !Ref EIPB
    Condition: ConfigureDomainName&MultiZone
Outputs:
  InstanceSecurityGroup:
    Description: The Instance SecurityGroup
    Value: !Ref InstanceSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-InstanceSecurityGroup
  EIPA:
    Description: The Public Address of the Bastion in Availability Zone A
    Value: !Ref EIPA
    Condition: ConfigureStaticPublicAddress
  EIPB:
    Description: The Public Address of the Bastion in Availability Zone B
    Value: !Ref EIPB
    Condition: ConfigureStaticPublicAddress&MultiZone
  PublicServiceName:
    Description: The Public DNS ServiceName of the Bastion
    Value: !Sub
      - ${UtilityDomain}.${VPCPublicDomain}
      - VPCPublicDomain: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPublicDomain
    Condition: ConfigureDomainName
  PublicServiceNameA:
    Description: The Public DNS ServiceName of the Bastion in Availability Zone A
    Value: !Sub
      - ${UtilityDomain}a.${VPCPublicDomain}
      - VPCPublicDomain: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPublicDomain
    Condition: ConfigureDomainName&MultiZone
  PublicServiceNameB:
    Description: The Public DNS ServiceName of the Bastion in Availability Zone B
    Value: !Sub
      - ${UtilityDomain}b.${VPCPublicDomain}
      - VPCPublicDomain: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPublicDomain
    Condition: ConfigureDomainName&MultiZone
