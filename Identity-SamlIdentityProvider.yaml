AWSTemplateFormatVersion: 2010-09-09
Description: Identity-SamlIdentityProvider Template.
  This creates an IAM SAML Identity Provider.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Function Configuration
        Parameters:
          - MetadataDownloaderLogRetention
          - SamlProviderLogRetention
      - Label:
          default: Identity Provider Configuration
        Parameters:
          - SamlProviderName
          - SamlProviderType
          - SamlProviderMetadata
          - SamlProviderMetadataUrl
          - SamlProviderAccessMethod
          - SamlProviderMasterAccount
    ParameterLabels:
      MetadataDownloaderLogRetention:
        default: MetadataDownloader Log Retention
      SamlProviderLogRetention:
        default: SamlProvider Log Retention
      SamlProviderName:
        default: SAML Provider Name
      SamlProviderType:
        default: SAML Provider Type
      SamlProviderMetadata:
        default: SAML Provider Metadata
      SamlProviderMetadataUrl:
        default: SAML Provider Metadata URL
      SamlProviderAccessMethod:
        default: SAML Provider Access Method
      SamlProviderMasterAccount:
        default: SAML Provider Master Account
Parameters:
  MetadataDownloaderLogRetention:
    Description: Number of days to retain CloudWatch Log Events for the MetadataDownloader Lambda Function
    Type: Number
    Default: 1
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
    ConstraintDescription: must be 1, 3, 5, 7, 14, 30, 60 or 90.
  SamlProviderLogRetention:
    Description: Number of days to retain CloudWatch Log Events for the SamlProvider Lambda Function
    Type: Number
    Default: 30
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
    ConstraintDescription: must be 1, 3, 5, 7, 14, 30, 60 or 90.
  SamlProviderName:
    Description: Name of the SAML Provider associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: dxcap.okta.com
    AllowedPattern: ^[-.a-zA-Z0-9]*$
    ConstraintDescription: must contain alphanumeric characters, dashes and periods.
  SamlProviderType:
    Description: Type of SAML Provider associated with the Stack
    Type: String
    Default: okta
    AllowedValues:
      - duo
      - okta
    ConstraintDescription: must be duo or okta.
  SamlProviderMetadata:
    Description: XML Metadata of the SAML Provider associated with the Stack
    Type: String
    Default: ''
  SamlProviderMetadataUrl:
    Description: URL to download XML Metadata of the SAML Provider associated with the Stack
    Type: String
    Default: ''
  SamlProviderAccessMethod:
    Description: Method by which the SAML Provider will integrate with this Account
    Type: String
    Default: single
    AllowedValues:
      - single
      - master
      - child
    ConstraintDescription: must be single, master or child.
  SamlProviderMasterAccount:
    Description: AWS Account ID of the SAML Provider Master Account
    Type: String
    Default: ''
    AllowedPattern: (^$|^[0-9]{12}$)
    ConstraintDescription: must be a valid AWS Account ID. Required when SamlProviderAccessMethod is child.
Rules:
  ValidateRegion:
    Assertions:
      - Assert: !Equals [ !Ref 'AWS::Region', us-east-1 ]
        AssertDescription: This Template can only be used in Region us-east-1.
  ValidateSamlProviderMetadata:
    RuleCondition: !Equals [ !Ref SamlProviderMetadataUrl, '' ]
    Assertions:
      - Assert: !Not [ !Equals [ !Ref SamlProviderMetadata, '' ]]
        AssertDescription: SamlProviderMetadata required when SamlProviderMetadataUrl is blank
  ValidateSamlProviderMetadataUrl:
    RuleCondition: !Equals [ !Ref SamlProviderMetadata, '' ]
    Assertions:
      - Assert: !Not [ !Equals [ !Ref SamlProviderMetadataUrl, '' ]]
        AssertDescription: SamlProviderMetadataUrl required when SamlProviderMetadata is blank
  ValidateSamlProviderMasterAccount:
    RuleCondition: !Equals [ !Ref SamlProviderAccessMethod, child ]
    Assertions:
      - Assert: !Not [ !Equals [ !Ref SamlProviderMasterAccount, '' ]]
        AssertDescription: SamlProviderMasterAccount required when SamlProviderAccessMethod is child
Conditions:
  ConfigureGlobal: !Equals [ !Ref 'AWS::Region', us-east-1 ]
  ConfigureOkta: !Equals [ !Ref SamlProviderType, okta ]
  ConfigureDuo: !Equals [ !Ref SamlProviderType, duo ]
  ConfigureOktaSingleAccount: !And [ !Condition ConfigureOkta, !Equals [ !Ref SamlProviderAccessMethod, single ]]
  ConfigureOktaMultipleAccountMaster: !And [ !Condition ConfigureOkta, !Equals [ !Ref SamlProviderAccessMethod, master ]]
  ConfigureOktaMultipleAccountChild: !And [ !Condition ConfigureOkta, !Equals [ !Ref SamlProviderAccessMethod, child ]]
  ConfigureMetadata: !Not [ !Equals [ !Ref SamlProviderMetadata, '' ]]
  ConfigureMetadataUrl: !Not [ !Condition ConfigureMetadata ]
Resources:
  MetadataDownloaderRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  MetadataDownloaderLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/MetadataDownloader
      RetentionInDays: !Ref MetadataDownloaderLogRetention
  MetadataDownloaderFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MetadataDownloader
      Description: A Lambda function that can download Metadata from an URL.
      Role: !GetAtt MetadataDownloaderRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Handler: index.handler
      Code:
        ZipFile: |
          const response = require('cfn-response');

          const getContent = (url) => {
            return new Promise((resolve, reject) => {
              const lib = url.startsWith('https') ? require('https') : require('http');
              const request = lib.get(url, (response) => {
                if (response.statusCode < 200 || response.statusCode > 299) {
                   reject(new Error(`Failed to load page, status code: ${response.statusCode}`));
              }

                const body = [];
                response.on('data', (chunk) => body.push(chunk));
                response.on('end', () => resolve(body.join('')));
              });

              request.on('error', (err) => reject(err));
              });
          };

          exports.handler = (event, context) => {
            console.info(`Request Body:\n${JSON.stringify(event)}`);

            const metadataUrl = event.ResourceProperties.MetadataUrl;
            if (! metadataUrl) {
              const responseData = {Error: `MetadataUrl missing`};
              console.error(`Error: ${responseData.Error}`);
              response.send(event, context, response.FAILED, responseData);
              return;
            }

            switch (event.RequestType) {
              case 'Create':
              case 'Update':
                getContent(metadataUrl).then(function(data) {
                  const responseData = {Metadata: data};
                  console.info(`Downloaded Metadata from: ${metadataUrl}`);
                  response.send(event, context, response.SUCCESS, responseData, metadataUrl);
                }).catch(function(err) {
                  const responseData = {Error: `Failed to download Metadata from ${metadataUrl}`};
                  console.error(`Error: ${responseData.Error}:\n${err}`);
                  response.send(event, context, response.FAILURE, responseData);
                });
                return;

              case 'Delete':
                response.send(event, context, response.SUCCESS);
                return;

              default:
                const responseData = {Error: `Unknown operation: ${event.RequestType}`};
                console.error(`Error: ${responseData.Error}`);
                response.send(event, context, response.FAILED, responseData);
                return;
            }
          };
  SamlProviderRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ManageSamlProviderPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListSamlProviders
                  - iam:GetSamlProvider
                  - iam:CreateSamlProvider
                  - iam:UpdateSamlProvider
                  - iam:DeleteSamlProvider
                Resource: "*"
  SamlProviderLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/SamlProvider
      RetentionInDays: !Ref SamlProviderLogRetention
  SamlProviderFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SamlProvider
      Description: A Lambda function that can create, update or delete an IAM SAML Identity Provider.
      Role: !GetAtt SamlProviderRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Handler: index.handler
      Code:
        ZipFile: |
          const response = require('cfn-response');

          const AWS = require('aws-sdk');
          AWS.config.apiVersions = {
            iam: '2010-05-08'
          };

          const iam = new AWS.IAM();

          exports.handler = (event, context) => {
            console.info(`Request Body:\n${JSON.stringify(event)}`);

            const providerName = event.ResourceProperties.ProviderName;
            if (! providerName) {
              const responseData = {Error: `ProviderName missing`};
              console.error(`Error: ${responseData.Error}`);
              response.send(event, context, response.FAILED, responseData);
              return;
            }

            const providerMetadata = event.ResourceProperties.ProviderMetadata;
            if (! providerMetadata && event.RequestType != 'Delete') {
              const responseData = {Error: `ProviderMetadata missing`};
              console.error(`Error: ${responseData.Error}`);
              response.send(event, context, response.FAILED, responseData);
              return;
            }

            const accountId=event.StackId.split(':')[4];

            let params = {};
            switch (event.RequestType) {
              case 'Create':
                console.info(`Calling: CreateSAMLProvider...`);
                params = {
                  Name: providerName,
                  SAMLMetadataDocument: providerMetadata
                };
                iam.createSAMLProvider(params, (err, data) => {
                  if (err) {
                    const responseData = {Error: `CreateSAMLProvider call failed`};
                    console.error(`Error: ${responseData.Error}:\n${err}`);
                    response.send(event, context, response.FAILED, responseData);
                  }
                  else {
                    const responseData = {Arn: data.SAMLProviderArn};
                    console.info(`SAML Provider: ${data.SAMLProviderArn} created`);
                    response.send(event, context, response.SUCCESS, responseData, data.SAMLProviderArn);
                  }
                });
                break;

              case 'Update':
                console.info(`Calling: UpdateSAMLProvider...`);
                params = {
                  SAMLProviderArn: `arn:aws:iam::${accountId}:saml-provider/${providerName}`,
                  SAMLMetadataDocument: providerMetadata
                };
                iam.updateSAMLProvider(params, (err, data) => {
                  if (err) {
                    const responseData = {Error: `UpdateSAMLProvider call failed`};
                    console.error(`Error: ${responseData.Error}:\n${err}`);
                    response.send(event, context, response.FAILED, responseData);
                  }
                  else {
                    const responseData = {Arn: data.SAMLProviderArn};
                    console.info(`SAML Provider: ${data.SAMLProviderArn} updated`);
                    response.send(event, context, response.SUCCESS, responseData, data.SAMLProviderArn);
                  }
                });
                break;

              case 'Delete':
                console.info(`Calling: DeleteSAMLProvider...`);
                params = {
                  SAMLProviderArn: `arn:aws:iam::${accountId}:saml-provider/${providerName}`
                };
                iam.deleteSAMLProvider(params, (err, data) => {
                  if (err) {
                    const responseData = {Error: `DeleteSAMLProvider call failed`};
                    console.error(`Error: ${responseData.Error}:\n${err}`);
                    response.send(event, context, response.FAILED, responseData);
                  }
                  else {
                    console.info(`SAML Provider: deleted`);
                    response.send(event, context, response.SUCCESS);
                  }
                });
            }
          };
  OktaSingleAccountUser:
    Type: AWS::IAM::User
    Properties:
      UserName: okta
      Path: /
      Policies:
        - PolicyName: OktaSingleAccountPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListRoles
                  - iam:ListAccountAliases
                Resource: '*'
    Condition: ConfigureOktaSingleAccount
  OktaMultipleAccountMasterUser:
    Type: AWS::IAM::User
    Properties:
      UserName: okta
      Path: /
      Policies:
        - PolicyName: OktaMultipleAccountMasterPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListRoles
                  - iam:ListAccountAliases
                  - iam:GetAccountSummary
                  - iam:GetUser
                  - sts:AssumeRole
                Resource: '*'
    Condition: ConfigureOktaMultipleAccountMaster
  OktaMultipleAccountChildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Okta-Idp-cross-account-role # This exact name is required - do not change
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${SamlProviderMasterAccount}:root
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: OktaMultipleAccountChildPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListRoles
                  - iam:ListAccountAliases
                Resource: '*'
    Condition: ConfigureOktaMultipleAccountChild
  MetadataDownloader:
    Type: Custom::MetadataDownloader
    Properties:
      ServiceToken: !GetAtt MetadataDownloaderFunction.Arn
      MetadataUrl: !Ref SamlProviderMetadataUrl
    Condition: ConfigureMetadataUrl
  SamlProvider:
    Type: Custom::SamlProvider
    Properties:
      ServiceToken: !GetAtt SamlProviderFunction.Arn
      ProviderName: !Ref SamlProviderName
      ProviderMetadata: !If
        - ConfigureMetadata
        - !Ref SamlProviderMetadata
        - !If
            - ConfigureMetadataUrl
            - !GetAtt MetadataDownloader.Metadata
            - !Ref AWS::NoValue
Outputs:
  SamlProviderArn:
    Description: The SAML Provider ARN
    Value: !GetAtt SamlProvider.Arn
    Export:
      Name: !Sub ${AWS::StackName}-SamlProviderArn
