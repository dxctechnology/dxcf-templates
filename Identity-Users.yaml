AWSTemplateFormatVersion: 2010-09-09
Description: Identity-Users Template.
  This creates IAM Users. Only canonical users standard across all implementations of this framework should be created in this Template.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - GroupsStackName
          - ManagedPoliciesStackName
          - BaselineStackName
      - Label:
          default: User Configuration
        Parameters:
          - AdministratorPassword
          - DeveloperPassword
          - ManagerPassword
          - UserPassword
      - Label:
          default: Systems Manager Configuration
        Parameters:
          - SaveGeneratedPasswords
      - Label:
          default: Topic Configuration
        Parameters:
          - TopicPrefix
      - Label:
          default: Subscription Configuration
        Parameters:
          - PasswordsTopicPhoneEndpoint
    ParameterLabels:
      GroupsStackName:
        default: Groups Stack Name
      ManagedPoliciesStackName:
        default: Managed Policies Stack Name
      BaselineStackName:
        default: Baseline Stack Name
      AdministratorPassword:
        default: Administrator Password
      DeveloperPassword:
        default: Developer Password
      ManagerPassword:
        default: Manager Password
      UserPassword:
        default: User Password
      SaveGeneratedPasswords:
        default: User Password
      TopicPrefix:
        default: Topic Prefix
      PasswordsTopicPhoneEndpoint:
        default: Passwords Topic Phone Endpoint
Parameters:
  GroupsStackName:
    Description: Name of the CloudFormation Stack containing Groups
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Groups
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  ManagedPoliciesStackName:
    Description: Name of the CloudFormation Stack containing ManagedPolicies
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: ManagedPolicies
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  BaselineStackName:
    Description: Name of the CloudFormation Stack containing the Baseline Resources
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Baseline
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  AdministratorPassword:
    Description: Optional password for the administrator User
    Type: String
    NoEcho: true
    Default: ''
    AllowedPattern: (^$|(?=^.{20,64}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])^.*)
    ConstraintDescription: must be 20 to 64 alphanumeric characters with at least one uppercase, lowercase and digit, if specified.
  DeveloperPassword:
    Description: Optional password for the developer User
    Type: String
    NoEcho: true
    Default: ''
    AllowedPattern: (^$|(?=^.{20,64}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])^.*)
    ConstraintDescription: must be 20 to 64 alphanumeric characters with at least one uppercase, lowercase and digit, if specified.
  ManagerPassword:
    Description: Optional password for the manager User
    Type: String
    NoEcho: true
    Default: ''
    AllowedPattern: (^$|(?=^.{20,64}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])^.*)
    ConstraintDescription: must be 20 to 64 alphanumeric characters with at least one uppercase, lowercase and digit, if specified.
  UserPassword:
    Description: Optional password for the user User
    Type: String
    NoEcho: true
    Default: ''
    AllowedPattern: (^$|(?=^.{20,64}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])^.*)
    ConstraintDescription: must be 20 to 64 alphanumeric characters with at least one uppercase, lowercase and digit, if specified.
  SaveGeneratedPasswords:
    Description: Seve generated initial passwords in the Systems Manager Parameter Store as Secure Strings
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    ConstraintDescription: must be either true or false.
  TopicPrefix:
    Description: Optional Prefix for Topic Display Name
    Type: String
    Default: ''
    AllowedPattern: (^$|^[A-Z][A-Z0-9]{1,4}$)
    ConstraintDescription: must begin with an upper-case letter and consist of 1 to 4 additional upper-case letters or digits, if specified.
  PasswordsTopicPhoneEndpoint:
    Description: Phone Endpoint for Passwords Topics. If specified, generated passwords will be sent
    Type: String
    Default: ''
    AllowedPattern: (^$|^\+\d{11,12}$)
    ConstraintDescription: must be a valid phone number.
Rules:
  ValidateRegion:
    Assertions:
      - Assert: !Equals [ !Ref 'AWS::Region', us-east-1 ]
        AssertDescription: This Template can only be used in Region us-east-1.
Conditions:
  ConfigureSecureParameters: !Equals [ !Ref SaveGeneratedPasswords, true ]
  ConfigureTopicPrefix: !Not [ !Equals [ !Ref TopicPrefix, '' ]]
  ConfigureNotifications: !Not [ !Equals [ !Ref PasswordsTopicPhoneEndpoint, '' ]]
  GenerateAdministratorPassword: !Equals [ !Ref AdministratorPassword, '' ]
  SaveAdministratorPassword: !And [ !Condition GenerateAdministratorPassword, !Condition ConfigureSecureParameters ]
  SendAdministratorPassword: !And [ !Condition GenerateAdministratorPassword, !Condition ConfigureNotifications ]
  GenerateDeveloperPassword: !Equals [ !Ref DeveloperPassword, '' ]
  SaveDeveloperPassword: !And [ !Condition GenerateDeveloperPassword, !Condition ConfigureSecureParameters ]
  SendDeveloperPassword: !And [ !Condition GenerateDeveloperPassword, !Condition ConfigureNotifications ]
  GenerateManagerPassword: !Equals [ !Ref ManagerPassword, '' ]
  SaveManagerPassword: !And [ !Condition GenerateManagerPassword, !Condition ConfigureSecureParameters ]
  SendManagerPassword: !And [ !Condition GenerateManagerPassword, !Condition ConfigureNotifications ]
  GenerateUserPassword: !Equals [ !Ref UserPassword, '' ]
  SaveUserPassword: !And [ !Condition GenerateUserPassword, !Condition ConfigureSecureParameters ]
  SendUserPassword: !And [ !Condition GenerateUserPassword, !Condition ConfigureNotifications ]
Resources:
  PasswordsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !If
        - ConfigureTopicPrefix
        - !Sub ${TopicPrefix} User Passwords
        - User Passwords
    Condition: ConfigureNotifications
  PasswordsTopicPhoneSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref PasswordsTopic
      Protocol: sms
      Endpoint: !Ref PasswordsTopicPhoneEndpoint
    Condition: ConfigureNotifications
  AdministratorRandomPassword:
    Type: Custom::RandomPassword
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-RandomPasswordFunctionArn
      ExcludePunctuation: true
    Condition: GenerateAdministratorPassword
  AdministratorUser:
    Type: AWS::IAM::User
    Properties:
      UserName: administrator
      Path: /
      LoginProfile:
        Password: !If [ GenerateAdministratorPassword, !GetAtt AdministratorRandomPassword.Password, !Ref AdministratorPassword ]
        PasswordResetRequired: !If [ GenerateAdministratorPassword, true, !Ref 'AWS::NoValue' ]
      Groups:
        - !ImportValue
          Fn::Sub: ${GroupsStackName}-AdministratorsGroup
  AdministratorPasswordSecureParameter:
    Type: Custom::SecureParameter
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-SecureParameterFunctionArn
      Name: AdministratorPassword
      Value: !If [ GenerateAdministratorPassword, !GetAtt AdministratorRandomPassword.Password, !Ref 'AWS::NoValue' ]
      AllowedPattern: ^[a-zA-Z0-9]{16,64}$
      Description: Temporary password for the administrator User
    Condition: SaveAdministratorPassword
  AdministratorPasswordMessage:
    Type: Custom::Message
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-MessageFunctionArn
      TopicArn: !If [ ConfigureNotifications, !Ref PasswordsTopic, !Ref 'AWS::NoValue' ]
      Message: !If [ GenerateAdministratorPassword, !Sub 'Temporary password for the administrator User: ${AdministratorRandomPassword.Password}', !Ref 'AWS::NoValue' ]
    Condition: SendAdministratorPassword
  DeveloperRandomPassword:
    Type: Custom::RandomPassword
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-RandomPasswordFunctionArn
      ExcludePunctuation: true
    Condition: GenerateDeveloperPassword
  DeveloperUser:
    Type: AWS::IAM::User
    Properties:
      UserName: developer
      Path: /
      LoginProfile:
        Password: !If [ GenerateDeveloperPassword, !GetAtt DeveloperRandomPassword.Password, !Ref DeveloperPassword ]
        PasswordResetRequired: !If [ GenerateDeveloperPassword, true, !Ref 'AWS::NoValue' ]
      Groups:
        - !ImportValue
          Fn::Sub: ${GroupsStackName}-DevelopersGroup
  DeveloperPasswordSecureParameter:
    Type: Custom::SecureParameter
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-SecureParameterFunctionArn
      Name: DeveloperPassword
      Value: !If [ GenerateDeveloperPassword, !GetAtt DeveloperRandomPassword.Password, !Ref 'AWS::NoValue' ]
      AllowedPattern: ^[a-zA-Z0-9]{16,64}$
      Description: Temporary password for the developer User
    Condition: SaveDeveloperPassword
  DeveloperPasswordMessage:
    Type: Custom::Message
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-MessageFunctionArn
      TopicArn: !If [ ConfigureNotifications, !Ref PasswordsTopic, !Ref 'AWS::NoValue' ]
      Message: !If [ GenerateDeveloperPassword, !Sub 'Temporary password for the developer User: ${DeveloperRandomPassword.Password}', !Ref 'AWS::NoValue' ]
    Condition: SendDeveloperPassword
  ManagerRandomPassword:
    Type: Custom::RandomPassword
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-RandomPasswordFunctionArn
      ExcludePunctuation: true
    Condition: GenerateManagerPassword
  ManagerUser:
    Type: AWS::IAM::User
    Properties:
      UserName: manager
      Path: /
      LoginProfile:
        Password: !If [ GenerateManagerPassword, !GetAtt ManagerRandomPassword.Password, !Ref ManagerPassword ]
        PasswordResetRequired: !If [ GenerateManagerPassword, true, !Ref 'AWS::NoValue' ]
      Groups:
        - !ImportValue
          Fn::Sub: ${GroupsStackName}-ManagersGroup
  ManagerPasswordSecureParameter:
    Type: Custom::SecureParameter
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-SecureParameterFunctionArn
      Name: ManagerPassword
      Value: !If [ GenerateManagerPassword, !GetAtt ManagerRandomPassword.Password, !Ref 'AWS::NoValue' ]
      AllowedPattern: ^[a-zA-Z0-9]{16,64}$
      Description: Temporary password for the manager User
    Condition: SaveManagerPassword
  ManagerPasswordMessage:
    Type: Custom::Message
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-MessageFunctionArn
      TopicArn: !If [ ConfigureNotifications, !Ref PasswordsTopic, !Ref 'AWS::NoValue' ]
      Message: !If [ GenerateManagerPassword, !Sub 'Temporary password for the manager User: ${ManagerRandomPassword.Password}', !Ref 'AWS::NoValue' ]
    Condition: SendManagerPassword
  UserRandomPassword:
    Type: Custom::RandomPassword
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-RandomPasswordFunctionArn
      ExcludePunctuation: true
    Condition: GenerateUserPassword
  UserUser:
    Type: AWS::IAM::User
    Properties:
      UserName: user
      Path: /
      LoginProfile:
        Password: !If [ GenerateUserPassword, !GetAtt UserRandomPassword.Password, !Ref UserPassword ]
        PasswordResetRequired: !If [ GenerateUserPassword, true, !Ref 'AWS::NoValue' ]
      Groups:
        - !ImportValue
          Fn::Sub: ${GroupsStackName}-UsersGroup
  UserPasswordSecureParameter:
    Type: Custom::SecureParameter
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-SecureParameterFunctionArn
      Name: UserPassword
      Value: !If [ GenerateUserPassword, !GetAtt UserRandomPassword.Password, !Ref 'AWS::NoValue' ]
      AllowedPattern: ^[a-zA-Z0-9]{16,64}$
      Description: Temporary password for the user User
    Condition: SaveUserPassword
  UserPasswordMessage:
    Type: Custom::Message
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-MessageFunctionArn
      TopicArn: !If [ ConfigureNotifications, !Ref PasswordsTopic, !Ref 'AWS::NoValue' ]
      Message: !If [ GenerateUserPassword, !Sub 'Temporary password for the user User: ${UserRandomPassword.Password}', !Ref 'AWS::NoValue' ]
    Condition: SendUserPassword
