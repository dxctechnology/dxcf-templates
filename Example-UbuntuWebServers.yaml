AWSTemplateFormatVersion: 2010-09-09
Description: Example-UbuntuWebServers Template.
  This is an example of an auto-scaled Ubuntu Web Server based application, showing installation and configuration via cfn-init.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - VPCStackName
          - AMIFunctionsStackName
          - BuildBucketsStackName
          - BucketsStackName
          - TopicsStackName
          - CodesStackName
      - Label:
          default: Resource Dependencies
        Parameters:
          - KeyName
      - Label:
          default: System Configuration
        Parameters:
          - CompanyName
          - SystemName
      - Label:
          default: Environment Configuration
        Parameters:
          - AccountName
          - EnvironmentName
          - EnvironmentType
          - OSName
      - Label:
          default: UbuntuWebServers Application Configuration
        Parameters:
          - UbuntuWebServersApplicationKey
          - UbuntuWebServersApplicationName
          - UbuntuWebServersApplicationVersion
          - UbuntuWebServersServiceName
          - WebSnapshot
          - LogRetention
          - NormalSchedule
          - ReducedSchedule
      - Label:
          default: Security Configuration
        Parameters:
          - UserNetworks
          - UserNetworkDescriptions
          - AdministratorNetworks
          - AdministratorNetworkDescriptions
    ParameterLabels:
      VPCStackName:
        default: VPC Stack Name
      AMIFunctionsStackName:
        default: AMIFunctions Stack Name
      BuildBucketsStackName:
        default: Build Buckets Stack Name
      BucketsStackName:
        default: Buckets Stack Name
      TopicsStackName:
        default: Topics Stack Name
      CodesStackName:
        default: Codes Stack Name
      KeyName:
        default: Key Name
      CompanyName:
        default: Company Name
      SystemName:
        default: System Name
      AccountName:
        default: Account Name
      EnvironmentName:
        default: Environment Name
      EnvironmentType:
        default: Environment Type
      OSName:
        default: Operating System Name
      UbuntuWebServersApplicationKey:
        default: UbuntuWebServers Application S3 Key
      UbuntuWebServersApplicationName:
        default: UbuntuWebServers Application Name
      UbuntuWebServersApplicationVersion:
        default: UbuntuWebServers Application Version
      UbuntuWebServersServiceName:
        default: UbuntuWebServers DNS Service Name
      WebSnapshot:
        default: Web Snapshot
      LogRetention:
        default: Log Retention
      NormalSchedule:
        default: Normal Schedule
      ReducedSchedule:
        default: Reduced Schedule
      UserNetworks:
        default: User Networks
      UserNetworkDescriptions:
        default: User Network Descriptions
      AdministratorNetworks:
        default: Administrator Networks
      AdministratorNetworkDescriptions:
        default: Administrator Network Descriptions
Parameters:
  VPCStackName:
    Description: Name of the CloudFormation Stack containing the VPC
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Production-VPC
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  AMIFunctionsStackName:
    Description: Name of the CloudFormation Stack containing the AMI Functions
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: AMIFunctions
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  BuildBucketsStackName:
    Description: Name of the CloudFormation Stack containing Build Buckets
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: BuildBuckets
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  BucketsStackName:
    Description: Name of the CloudFormation Stack containing Buckets
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Buckets
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  TopicsStackName:
    Description: Name of the CloudFormation Stack containing Topics
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Topics
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  CodesStackName:
    Description: Name of the CloudFormation Stack containing the Codes Resources
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Codes
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  KeyName:
    Description: Name of an existing KeyPair to enable SSH access to the Instances
    Type: AWS::EC2::KeyPair::KeyName
    MaxLength: 32
    Default: example
    AllowedPattern: (^$|^[_a-zA-Z0-9]*$)
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  CompanyName:
    Description: Name of the Company associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: DXC
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  SystemName:
    Description: Name of the System associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: Prototype
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  AccountName:
    Description: Name of the Account associated with the Stack
    Type: String
    Default: Production
    AllowedValues:
      - Production
      - Staging
      - UAT
      - QA
      - Testing
      - Development
      - Build
      - Core
      - Recovery
      - Log
      - Management
      - Jumpstart
      - Organization
    ConstraintDescription: must be Production, Staging, UAT, QA, Testing, Development, Build, Core, Recovery, Log, Management, Jumpstart or Organization.
  EnvironmentName:
    Description: Name of the Environment associated with the Stack
    Type: String
    Default: Production
    AllowedValues:
      - Production
      - Staging
      - UAT
      - QA
      - Testing
      - Development
      - Build
      - Core
      - Recovery
      - Log
      - Identity
      - Management
      - Organization
    ConstraintDescription: must be Production, Staging, UAT, QA, Testing, Development, Build, Core, Recovery, Log, Identity, Management or Organization.
  EnvironmentType:
    Description: Type of the Environment to build. Used to select size-related options in Mappings
    Type: String
    Default: small
    AllowedValues:
      - micro
      - small
      - medium
      - large
      - xlarge
    ConstraintDescription: must be micro, small, medium, large or xlarge.
  OSName:
    Description: The Operating System to use for Instances
    Type: String
    Default: Ubuntu 16.04
    AllowedValues:
      - Ubuntu 16.04
      - Ubuntu
    ConstraintDescription: must be "Ubuntu 16.04" (latest), "Ubuntu".
  UbuntuWebServersApplicationKey:
    Description: Optional key of Object within the S3 Bucket containing the UbuntuWebServers Application
    Type: String
    Default: ''
    AllowedPattern: (^$|^(?:Linux|LinuxWebServer|UbuntuWebServer)\/[-_.a-zA-Z0-9]*\.(?:zip|tgz|tar\.gz)$)
    ConstraintDescription: must be a valid filename, within the Linux, LinuxWebServer or UbuntuWebServer folders, if specified.
  UbuntuWebServersApplicationName:
    Description: Name of the UbuntuWebServers Application
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: UbuntuWebServers
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  UbuntuWebServersApplicationVersion:
    Description: Version of the UbuntuWebServers Application
    Type: String
    MinLength: 5
    MaxLength: 32
    Default: 1.0.0
    AllowedPattern: ^[0-9]*.[0-9]*.[0-9]*(-[a-zA-Z0-9][-a-zA-Z0-9]*)?$
    ConstraintDescription: must follow semantic versioning conventions.
  UbuntuWebServersServiceName:
    Description: DNS Service Name of the UbuntuWebServers Application
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: uwsm
    AllowedPattern: ^[a-z][-a-z0-9]*$
    ConstraintDescription: must begin with a lower case letter and contain only lower case letters, numbers and dashes.
  WebSnapshot:
    Description: Optional snapshot of previous EBS Volume containing Web directories
    Type: String
    Default: ''
    AllowedPattern: (^$|snap-[0-9a-f]{17}$)
    ConstraintDescription: must be a valid Snapshot ID.
  LogRetention:
    Description: Number of days to retain CloudWatch Log Events
    Type: Number
    Default: 14
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
    ConstraintDescription: must be 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827 or 3653.
  NormalSchedule:
    Description: Normal Schedule in constrained Cron format (UTC) (blank disables Normal Schedule)
    Type: String
    Default: 0 6 * * 1-5
    AllowedPattern: (^$|^0 ([5-9]|1[0-6]) \* \* 1-5$)
    ConstraintDescription: must follow constrained cron syntax "0 H * * 1-5", where H = 5-16.
  ReducedSchedule:
    Description: Off Schedule in constrained Cron format (UTC) (blank disables Reduced Schedule)
    Type: String
    Default: 0 2 * * *
    AllowedPattern: (^$|0 [0-7] \* \* \*$)
    ConstraintDescription: must follow constrained cron syntax "0 H * * *", where H = 0-7.
  UserNetworks:
    Description: Networks that can use the Application
    Type: String
    Default: -,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 16 values, each an IP CIDR range of the form x.x.x.x/x or '-'.
  UserNetworkDescriptions:
    Description: Descriptions of networks that can use the Application
    Type: String
    Default: -,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 16 values, each a short text description or '-'.
  AdministratorNetworks:
    Description: Networks that can administer the Application
    Type: String
    Default: -,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 16 values, each an IP CIDR range of the form x.x.x.x/x or '-'.
  AdministratorNetworkDescriptions:
    Description: Descriptions of networks that can administer the Application
    Type: String
    Default: -,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 16 values, each a short text description or '-'.
Mappings:
  RegionNameMap:
    us-east-1:
      Name: Virginia
      Code: ue1
    us-east-2:
      Name: Ohio
      Code: ue2
    us-west-1:
      Name: California
      Code: uw1
    us-west-2:
      Name: Oregon
      Code: uw2
    ap-east-1:
      Name: HongKong
      Code: ae1
    ap-south-1:
      Name: Mumbai
      Code: ad1
    ap-northeast-2:
      Name: Seoul
      Code: an2
    ap-southeast-1:
      Name: Singapore
      Code: as1
    ap-southeast-2:
      Name: Sydney
      Code: as2
    ap-northeast-1:
      Name: Tokyo
      Code: an1
    ca-central-1:
      Name: Canada
      Code: cc1
    eu-central-1:
      Name: Frankfurt
      Code: ec1
    eu-west-1:
      Name: Ireland
      Code: ew1
    eu-west-2:
      Name: London
      Code: ew2
    eu-west-3:
      Name: Paris
      Code: ew3
    eu-north-1:
      Name: Stockholm
      Code: en1
    me-south-1:
      Name: Bahrain
      Code: ms1
    sa-east-1:
      Name: SaoPaulo
      Code: se1
  InstanceTypeMap:
    Web:
      micro: t3.micro
      small: t3.small
      medium: t3.medium
      large: t3.large
      xlarge: t3.xlarge
  MinSizeMap:
    WebServer:
      micro: 1
      small: 1
      medium: 1
      large: 2
      xlarge: 4
  MaxSizeMap:
    WebServer:
      micro: 1
      small: 2
      medium: 2
      large: 4
      xlarge: 8
  ReducedMinSizeMap:
    WebServer:
      micro: 0
      small: 0
      medium: 0
      large: 1
      xlarge: 2
  ReducedMaxSizeMap:
    WebServer:
      micro: 0
      small: 0
      medium: 1
      large: 2
      xlarge: 4
Conditions:
  ConfigureAccountEnvironment: !Or [ !Not [ !Equals [ !Ref AccountName, !Ref EnvironmentName ]], !Equals [ !Ref AccountName, Jumpstart ]]
  ConfigureGlobal: !Equals [ !Ref 'AWS::Region', us-east-1 ]
  ConfigureKey: !Not [ !Equals [ !Ref KeyName, '' ]]
  InstallApplication: !Not [ !Equals [ !Ref UbuntuWebServersApplicationKey, '' ]]
  ConfigureWebSnapshot: !Not [ !Equals [ !Ref WebSnapshot, '' ]]
  ConfigureNormalSchedule: !Not [ !Equals [ !Ref NormalSchedule, '' ]]
  ConfigureReducedSchedule: !Not [ !Equals [ !Ref ReducedSchedule, '' ]]
  ConfigureUserNetwork0: !Not [ !Equals [ !Select [ 0, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork1: !Not [ !Equals [ !Select [ 1, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork2: !Not [ !Equals [ !Select [ 2, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork3: !Not [ !Equals [ !Select [ 3, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork4: !Not [ !Equals [ !Select [ 4, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork5: !Not [ !Equals [ !Select [ 5, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork6: !Not [ !Equals [ !Select [ 6, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork7: !Not [ !Equals [ !Select [ 7, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork8: !Not [ !Equals [ !Select [ 8, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork9: !Not [ !Equals [ !Select [ 9, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork10: !Not [ !Equals [ !Select [ 10, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork11: !Not [ !Equals [ !Select [ 11, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork12: !Not [ !Equals [ !Select [ 12, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork13: !Not [ !Equals [ !Select [ 13, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork14: !Not [ !Equals [ !Select [ 14, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork15: !Not [ !Equals [ !Select [ 15, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureAdministratorNetwork0: !Not [ !Equals [ !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork1: !Not [ !Equals [ !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork2: !Not [ !Equals [ !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork3: !Not [ !Equals [ !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork4: !Not [ !Equals [ !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork5: !Not [ !Equals [ !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork6: !Not [ !Equals [ !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork7: !Not [ !Equals [ !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork8: !Not [ !Equals [ !Select [ 8, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork9: !Not [ !Equals [ !Select [ 9, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork10: !Not [ !Equals [ !Select [ 10, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork11: !Not [ !Equals [ !Select [ 11, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork12: !Not [ !Equals [ !Select [ 12, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork13: !Not [ !Equals [ !Select [ 13, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork14: !Not [ !Equals [ !Select [ 14, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork15: !Not [ !Equals [ !Select [ 15, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: DownloadScriptFromS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${ScriptsBucket}/Linux/*
                    - ScriptsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  - !Sub
                    - arn:aws:s3:::${ScriptsBucket}/UbuntuWebServer/*
                    - ScriptsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ScriptsBucket
        - PolicyName: DownloadConfigurationFromS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${ConfigurationsBucket}/Linux/*
                    - ConfigurationsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
                  - !Sub
                    - arn:aws:s3:::${ConfigurationsBucket}/UbuntuWebServer/*
                    - ConfigurationsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
        - PolicyName: DownloadExampleFromS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${ExamplesBucket}/Linux/*
                    - ExamplesBucket: !ImportValue
                        Fn::Sub: ${BuildBucketsStackName}-ExamplesBucket
                  - !Sub
                    - arn:aws:s3:::${ExamplesBucket}/LinuxWebServer/*
                    - ExamplesBucket: !ImportValue
                        Fn::Sub: ${BuildBucketsStackName}-ExamplesBucket
                  - !Sub
                    - arn:aws:s3:::${ExamplesBucket}/UbuntuWebServer/*
                    - ExamplesBucket: !ImportValue
                        Fn::Sub: ${BuildBucketsStackName}-ExamplesBucket
  LogGroupName:
    Type: Custom::LogGroupName
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${CodesStackName}-LogGroupNameFunctionArn
      CompanyName: !Ref CompanyName
      SystemName: !Ref SystemName
      ApplicationName: !Ref UbuntuWebServersApplicationName
      EnvironmentName: !If [ ConfigureAccountEnvironment, !Ref EnvironmentName, !Ref 'AWS::NoValue' ]
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LogGroupName
      RetentionInDays: !Ref LogRetention
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${EnvironmentName}-${UbuntuWebServersApplicationName}-LoadBalancerSecurityGroup
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      SecurityGroupIngress:
        - !If
          - ConfigureUserNetwork0
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 0, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork0
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 0, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 0, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork1
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 1, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork1
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 1, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork1
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 1, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork2
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 2, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork2
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 2, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork2
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 2, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork3
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 3, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork3
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 3, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork3
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 3, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork4
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 4, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork4
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 4, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork4
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 4, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork5
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 5, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork5
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 5, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork5
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 5, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork6
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 6, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork6
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 6, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork6
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 6, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork7
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 7, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork7
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 7, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork7
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 7, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork8
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 8, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 8, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork8
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 8, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 8, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork8
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 8, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 8, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork9
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 9, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 9, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork9
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 9, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 9, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork9
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 9, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 9, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork10
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 10, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 10, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork10
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 10, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 10, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork10
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 10, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 10, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork11
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 11, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 11, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork11
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 11, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 11, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork11
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 11, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 11, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork12
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 12, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 12, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork12
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 12, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 12, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork12
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 12, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 12, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork13
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 13, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 13, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork13
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 13, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 13, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork13
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 13, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 13, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork14
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 14, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 14, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork14
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 14, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 14, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork14
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 14, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 14, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork15
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 15, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 15, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork15
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 15, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 15, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork15
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 15, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 15, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${UbuntuWebServersApplicationName}-LoadBalancerSecurityGroup
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${EnvironmentName}-${UbuntuWebServersApplicationName}-InstanceSecurityGroup
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          Description: Load Balancer
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          Description: Load Balancer
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork8
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 8, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 8, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork8
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 8, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 8, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork8
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 8, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 8, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork8
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 8, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 8, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork9
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 9, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 9, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork9
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 9, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 9, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork9
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 9, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 9, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork9
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 9, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 9, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork10
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 10, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 10, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork10
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 10, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 10, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork10
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 10, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 10, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork10
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 10, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 10, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork11
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 11, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 11, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork11
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 11, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 11, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork11
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 11, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 11, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork11
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 11, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 11, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork12
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 12, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 12, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork12
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 12, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 12, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork12
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 12, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 12, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork12
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 12, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 12, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork13
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 13, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 13, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork13
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 13, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 13, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork13
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 13, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 13, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork13
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 13, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 13, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork14
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 14, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 14, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork14
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 14, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 14, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork14
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 14, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 14, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork14
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 14, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 14, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork15
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 15, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 15, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork15
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 15, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 15, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork15
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 15, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 15, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork15
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 15, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 15, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${UbuntuWebServersApplicationName}-InstanceSecurityGroup
  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - !ImportValue
          Fn::Sub: ${VPCStackName}-PublicSubnetA
        - !ImportValue
          Fn::Sub: ${VPCStackName}-PublicSubnetB
      SecurityGroups:
        - !GetAtt LoadBalancerSecurityGroup.GroupId
      CrossZone: true
      LBCookieStickinessPolicy:
        - PolicyName: CookieBasedPolicy
          CookieExpirationPeriod: 30
      Listeners:
        - LoadBalancerPort: 80
          InstancePort: 80
          Protocol: HTTP
          PolicyNames:
            - CookieBasedPolicy
      HealthCheck:
        Target: HTTP:80/index.html
        HealthyThreshold: 2
        UnhealthyThreshold: 2
        Interval: 15
        Timeout: 5
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${UbuntuWebServersApplicationName}-LoadBalancer
  UbuntuImage:
    Type: Custom::UbuntuImage
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${AMIFunctionsStackName}-UbuntuImageFunctionArn
      OSName: !Ref OSName
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref Role
  HostName:
    Type: Custom::HostName
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${CodesStackName}-HostNameFunctionArn
      CompanyName: !Ref CompanyName
      LocationName: !Ref AWS::Region
      EnvironmentName: !Ref EnvironmentName
      ApplicationName: !Ref UbuntuWebServersApplicationName
      # This is a partial hostname - Due to the use of AutoScaling, we can't know the InstanceNumber or ZoneCode at this time.
      # However, by use of the PrivateRecordSet CloudWatchEvents Function, Instances can still be given DNS names.
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Credentials:
          type: S3
          roleName: !Ref Role
          buckets:
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ScriptsBucket
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
            - !ImportValue
              Fn::Sub: ${BuildBucketsStackName}-ExamplesBucket
      AWS::CloudFormation::Init:
        configSets:
          All:
            - UpdateOS
            - ConfigureOSUpdates
            - ConfigureOS
            - ConfigureCFN
            - InstallCloudWatchAgent
            - ConfigureCloudWatchAgent
            - ConfigureVolumes
            - ConfigureHostName
            - InstallApache
            - !If [ InstallApplication, InstallApplication, ConfigureApplication ]
        UpdateOS:
          commands:
            01-apt-update:
              command: apt-get update -y
              ignoreErrors: false
        ConfigureOSUpdates:
          commands:
            01-unattended-upgrades:
              command: apt install unattended-upgrades
              ignoreErrors: false
          files:
            /etc/apt/apt.conf.d/20auto-upgrades:
              content: |
                APT::Periodic::Update-Package-Lists "1";
                APT::Periodic::Unattended-Upgrade "1";
              mode: '000644'
              owner: root
              group: root
        ConfigureOS:
          packages:
            apt:
              git: []
          files:
            /etc/profile.d/local.sh:
              content: |
                alias lsa='ls -lAF'
                alias ip4='ip addr | grep " inet "'
              mode: '000644'
              owner: root
              group: root
        ConfigureCFN:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --configsets All --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /lib/systemd/system/cfn-hup.service:
              content: !Sub |
                [Unit]
                Description=Amazon CloudFormation HUP Daemon

                [Service]
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always

                [Install]
                WantedBy=multi-user.target
          commands:
            01-enable-cfn-hup:
              command: systemctl enable cfn-hup.service
            02-start-cfn-hup:
              command: systemctl start cfn-hup.service
        InstallCloudWatchAgent:
          sources:
            /var/tmp: https://s3.amazonaws.com/amazoncloudwatch-agent/linux/amd64/latest/AmazonCloudWatchAgent.zip
          commands:
            01-install-cloudwatch-agent:
              command: apt install -y /var/tmp/amazon-cloudwatch-agent.deb
              ignoreErrors: false
        ConfigureCloudWatchAgent:
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: !Sub |
                {
                  "agent" : {
                    "metrics_collection_interval" : 60,
                    "logfile" : "/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log",
                    "debug" : false
                  },
                  "metrics" : {
                    "namespace" : "${SystemName}/${EnvironmentName}-${UbuntuWebServersApplicationName}",
                    "metrics_collected" : {
                      "mem" : {
                        "measurement" : [
                          { "name" : "mem_used_percent", "rename" : "MemoryUsedPercent" }
                        ]
                      },
                      "swap" : {
                        "measurement" : [
                          { "name" : "swap_used_percent", "rename" : "SwapUsedPercent" }
                        ]
                      },
                      "disk" : {
                        "resources" : [
                          "*"
                        ],
                        "measurement" : [
                          { "name" : "used_percent", "rename" : "DiskUsedPercent" }
                        ],
                        "ignore_file_system_types": [
                          "rootfs",
                          "sysfs",
                          "tmpfs",
                          "devtmpfs"
                        ]
                      }
                    },
                    "append_dimensions" : {
                      "InstanceId" : "${!aws:InstanceId}",
                      "AutoScalingGroupName" : "${!aws:AutoScalingGroupName}"
                    },
                    "aggregation_dimensions" : [
                      [ "InstanceId" ],
                      [ "InstanceId", "path" ],
                      [ "AutoScalingGroupName" ]
                    ]
                  },
                  "logs" : {
                    "logs_collected" : {
                      "files" : {
                        "collect_list" : [
                          {
                            "file_path" : "/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Web/{instance_id}/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log"
                          },
                          {
                            "file_path" : "/var/log/cloud-init.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Web/{instance_id}/var/log/cloud-init.log",
                            "timestamp_format" : "%b %d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/cloud-init-output.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Web/{instance_id}/var/log/cloud-init-output.log"
                          },
                          {
                            "file_path" : "/var/log/cfn-init.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Web/{instance_id}/var/log/cfn-init.log",
                            "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/cfn-init-cmd.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Web/{instance_id}/var/log/cfn-init-cmd.log",
                            "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/cfn-hup.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Web/{instance_id}/var/log/cfn-hup.log",
                            "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/syslog",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Web/{instance_id}/var/log/syslog",
                            "timestamp_format" : "%b %d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/auth.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Web/{instance_id}/var/log/auth.log",
                            "timestamp_format" : "%b %d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/dpkg.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Web/{instance_id}/var/log/dpkg.log"
                          },
                          {
                            "file_path" : "/var/log/apt/term.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Web/{instance_id}/var/log/apt/term.log"
                          },
                          {
                            "file_path" : "/var/log/apt-get.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Web/{instance_id}/var/log/apt-get.log"
                          },
                          {
                            "file_path" : "/var/log/apache2/access_log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Web/{instance_id}/var/log/apache2/access_log"
                          },
                          {
                            "file_path" : "/var/log/apache2/error_log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "Web/{instance_id}/var/log/apache2/error_log"
                          }
                        ]
                      }
                    }
                  }
                }
              mode: '000644'
              owner: root
              group: root
          commands:
            01-enable-amazon-cloudwatch-agent:
              command: systemctl enable amazon-cloudwatch-agent.service
            02-start-amazon-cloudwatch-agent:
              command: systemctl start amazon-cloudwatch-agent.service
        ConfigureVolumes:
          packages:
            apt:
              gparted: []
              xfsprogs: []
          files:
            /root/bin/configure-volume:
              source: !Sub
                - https://${ScriptsBucket}.${s3}.amazonaws.com/Linux/configure-volume
                - ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
          commands:
            01-configure-volume-b:
              command: !Sub
                - /root/bin/configure-volume -n -d xvdb -m /var/www
                - VPCPrivateDomain: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCPrivateDomain
              ignoreErrors: false
        ConfigureHostName:
          files:
            /root/bin/configure-hostname:
              source: !Sub
                - https://${ScriptsBucket}.${s3}.amazonaws.com/Linux/configure-hostname
                - ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
          commands:
            # ToDo: This needs to be fixed or removed. Not sure we even need to set HostNames here.
            #       If the ASG size creates more than 1 Instance in each Zone, this will break.
            01-configure-hostname:
              command: !Sub
                - /root/bin/configure-hostname -n -z -h ${HostName}01 -d ${VPCPrivateDomain}
                - VPCPrivateDomain: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCPrivateDomain
              ignoreErrors: false
        InstallApache:
          packages:
            apt:
              apache2: []
          commands:
            01-enable-ssi-edit:
              command: sed -i -e 's/\(^\tOptions Indexes FollowSymLinks$\)/\1 Includes\n\tXBitHack on/' /etc/apache2/apache2.conf
              ignoreErrors: false
            02-enable-ssi-enable-include:
              command: a2enmod include
              ignoreErrors: false
            03-enable-ssi-enable-cgi:
              command: a2enmod cgi
              ignoreErrors: false
            04-restart-apache:
              command: service apache2 restart
              ignoreErrors: false
          services:
            sysvinit:
              apache2:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/apache2/apache2.conf
        InstallApplication:
          sources:
            /var/www: !Sub
              - https://${ExamplesBucket}.${s3}.amazonaws.com/${UbuntuWebServersApplicationKey}
              - ExamplesBucket: !ImportValue
                  Fn::Sub: ${BuildBucketsStackName}-ExamplesBucket
                s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
          commands:
            01-reset-permissions:
              command: chown -R root:root /var/www
              ignoreErrors: false
        ConfigureApplication:
          files:
            /var/www/html/index.html:
              content: !Sub |
                <html>
                <head>
                <title>${UbuntuWebServersApplicationName} Test Application</title>
                </head>
                <body>
                <h1>${UbuntuWebServersApplicationName} (${UbuntuWebServersApplicationVersion})</h1>

                <p>This page displays data obtained from the meta-data service via SSI.</p>

                <ul>
                  <li>ami-id: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/ami-id" --></li>
                  <li>instance-id: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/instance-id" --></li>
                  <li>instance-type: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/instance-type" --></li>
                  <li>local-hostname: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/local-hostname" --></li>
                  <li>local-ipv4: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/local-ipv4" --></li>
                  <li>public-hostname: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/public-hostname" --></li>
                  <li>public-ipv4: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/public-ipv4" --></li>
                </ul>

                <p>If you do not see the output values on this page, insure you have added &quot;XBitHack on&quot; to the
                Apache main or vhost configuration file and restarted Apache</p>
                </body>
              mode: '000755'
              owner: root
              group: root
    Properties:
      ImageId: !Ref UbuntuImage
      InstanceType: !FindInMap [ InstanceTypeMap, Web, !Ref EnvironmentType ]
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !If [ ConfigureKey, !Ref KeyName, !Ref 'AWS::NoValue' ]
      InstanceMonitoring: true
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: 10
            DeleteOnTermination: true
        - DeviceName: /dev/sdb
          Ebs:
            SnapshotId: !If [ ConfigureWebSnapshot, !Ref WebSnapshot, !Ref 'AWS::NoValue' ]
            VolumeType: gp2
            VolumeSize: 8
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > >(tee /var/log/user-data.log | logger -t user-data) 2>&1

          # Install missing AWS tools and make them run from a consistent location
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y python-pip
          pip install awscli
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          mkdir -p /opt/aws/bin
          ln -s /usr/local/bin/cfn-hup /opt/aws/bin/cfn-hup
          ln -s /usr/local/bin/cfn-init /opt/aws/bin/cfn-init
          ln -s /usr/local/bin/cfn-signal /opt/aws/bin/cfn-signal
          ln -s /usr/local/bin/cfn-elect-cmd-leader /opt/aws/bin/cfn-elect-cmd-leader
          ln -s /usr/local/bin/cfn-get-metadata /opt/aws/bin/cfn-get-metadata
          ln -s /usr/local/bin/cfn-send-cmd-event /opt/aws/bin/cfn-send-cmd-event
          ln -s /usr/local/bin/cfn-send-cmd-result /opt/aws/bin/cfn-send-cmd-result

          /opt/aws/bin/cfn-init --verbose --configsets All --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}
          /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      VPCZoneIdentifier:
        - !ImportValue
          Fn::Sub: ${VPCStackName}-WebSubnetA
        - !ImportValue
          Fn::Sub: ${VPCStackName}-WebSubnetB
      MinSize: !FindInMap [ MinSizeMap, WebServer, !Ref EnvironmentType ]
      DesiredCapacity: !FindInMap [ MinSizeMap, WebServer, !Ref EnvironmentType ]
      MaxSize: !FindInMap [ MaxSizeMap, WebServer, !Ref EnvironmentType ]
      Cooldown: 120
      HealthCheckType: ELB
      HealthCheckGracePeriod: 600
      LoadBalancerNames:
        - !Ref LoadBalancer
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${UbuntuWebServersApplicationName}-Instance
          PropagateAtLaunch: true
        - Key: HostName
          Value: !Ref HostName
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !FindInMap [ MinSizeMap, WebServer, !Ref EnvironmentType ]
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: !FindInMap [ MinSizeMap, WebServer, !Ref EnvironmentType ]
        MaxBatchSize: 1
        PauseTime: PT20M
        WaitOnResourceSignals: true
  NormalScheduledAction:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      MinSize: !FindInMap [ MinSizeMap, WebServer, !Ref EnvironmentType ]
      DesiredCapacity: !FindInMap [ MinSizeMap, WebServer, !Ref EnvironmentType ]
      MaxSize: !FindInMap [ MaxSizeMap, WebServer, !Ref EnvironmentType ]
      Recurrence: !Ref NormalSchedule
    Condition: ConfigureNormalSchedule
  ReducedScheduledAction:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      MinSize: !FindInMap [ ReducedMinSizeMap, WebServer, !Ref EnvironmentType ]
      DesiredCapacity: !FindInMap [ ReducedMinSizeMap, WebServer, !Ref EnvironmentType ]
      MaxSize: !FindInMap [ ReducedMaxSizeMap, WebServer, !Ref EnvironmentType ]
      Recurrence: !Ref ReducedSchedule
    Condition: ConfigureReducedSchedule
  IncreaseScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 1
      Cooldown: 120
  DecreaseScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: -1
      Cooldown: 120
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      AlarmActions:
        - !Ref IncreaseScalingPolicy
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Statistic: Average
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      Period: 60
      EvaluationPeriods: 1
      Threshold: 50
      ComparisonOperator: GreaterThanThreshold
    DependsOn: IncreaseScalingPolicy
  LowCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if CPU too low
      AlarmActions:
        - !Ref DecreaseScalingPolicy
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Statistic: Average
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      Period: 60
      EvaluationPeriods: 1
      Threshold: 10
      ComparisonOperator: LessThanThreshold
    DependsOn: DecreaseScalingPolicy
  404MetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref LogGroup
      FilterPattern: '[ip, identity, user_id, timestamp, request, status_code = 404, size, ...]'
      MetricTransformations:
        - MetricNamespace: !Sub ${SystemName}/${EnvironmentName}-${UbuntuWebServersApplicationName}
          MetricName: 404Count
          MetricValue: 1
  BytesTransferredMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref LogGroup
      FilterPattern: '[ip, identity, user_id, timestamp, request, status_code, size, ...]'
      MetricTransformations:
        - MetricNamespace: !Sub ${SystemName}/${EnvironmentName}-${UbuntuWebServersApplicationName}
          MetricName: BytesTransferred
          MetricValue: $size
  404Alarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: The number of 404s is greater than 5 over 1 minute
      AlarmActions:
        - !ImportValue
          Fn::Sub: ${TopicsStackName}-AlarmsTopic
      Namespace: !Sub ${SystemName}/${EnvironmentName}-${UbuntuWebServersApplicationName}
      MetricName: 404Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
  BandwidthAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: The average volume of traffic is greater 1024 KB over 1 minute
      AlarmActions:
        - !ImportValue
          Fn::Sub: ${TopicsStackName}-AlarmsTopic
      Namespace: !Sub ${SystemName}/${EnvironmentName}-${UbuntuWebServersApplicationName}
      MetricName: BytesTransferred
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1500000000
      ComparisonOperator: GreaterThanThreshold
  ServiceNameRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PublicHostedZone
      Comment: !Sub Public DNS Service Name of the ${UbuntuWebServersApplicationName} Service
      RecordSets:
        - Name: !Sub
            - ${UbuntuWebServersServiceName}.${VPCPublicDomain}.
            - VPCPublicDomain: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCPublicDomain
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneNameID
            DNSName: !GetAtt LoadBalancer.DNSName
Outputs:
  LoadBalancerSecurityGroup:
    Description: The LoadBalancer SecurityGroup
    Value: !Ref LoadBalancerSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-LoadBalancerSecurityGroup
  InstanceSecurityGroup:
    Description: The Instance SecurityGroup
    Value: !Ref InstanceSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-InstanceSecurityGroup
  PublicServiceName:
    Description: The Public DNS Service Name of the UbuntuWebServers Service
    Value: !Sub
      - ${UbuntuWebServersServiceName}.${VPCPublicDomain}
      - VPCPublicDomain: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPublicDomain
  PublicWebsiteURL:
    Description: The Public Website URL
    Value: !Sub
      - http://${UbuntuWebServersServiceName}.${VPCPublicDomain}/
      - VPCPublicDomain: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPublicDomain
