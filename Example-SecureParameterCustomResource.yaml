AWSTemplateFormatVersion: 2010-09-09
Description: Example-SecureParameterCustomResource Template.
  This demonstrates how to use the SecureParameter Lambda Function to create an SSM Parameter of type SecureString, currently not supported by CloudFormation.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - BaselineStackName
      - Label:
          default: Parameter Configuration
        Parameters:
          - OperatorPassword
          - AuditorPassword
    ParameterLabels:
      BaselineStackName:
        default: Baseline Stack Name
      OperatorPassword:
        default: Operator Password
      AuditorPassword:
        default: Auditor Password
Parameters:
  BaselineStackName:
    Description: Name of the CloudFormation Stack containing the Baseline Resources
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Baseline
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  OperatorPassword:
    Description: Password for the operator User (optional)
    Type: String
    NoEcho: true
    Default: 'Password1234Password'
    AllowedPattern: (^$|(?=^.{16,64}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])^.*)
    ConstraintDescription: if specified, must be 16 to 64 alphanumeric characters, with at least one uppercase, lowercase and digit. Symbols not allowed.
    # Below are some alternate variants of the password formats we may want, with a corresponding ConstraintDescription
    #AllowedPattern: (?=^.{16,64}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])^.*
    #ConstraintDescription: must be 16 to 64 alphanumeric characters, with at least one uppercase, lowercase and digit. Symbols not allowed.
    #AllowedPattern: (^$|(?=^.{16,64}$)((?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])|(?=.*[A-Z])(?=.*[a-z])(?=.*[^A-Za-z0-9])|(?=.*[A-Z])(?=.*[0-9])(?=.*[^A-Za-z0-9])|(?=.*[a-z])(?=.*[0-9])(?=.*[^A-Za-z0-9]))^.*)
    #ConstraintDescription: if specified, must be 16 to 64 characters, and contain three out of four character classes uppercase, lowercase, digts or symbols.
    #AllowedPattern: (?=^.{16,64}$)((?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])|(?=.*[A-Z])(?=.*[a-z])(?=.*[^A-Za-z0-9])|(?=.*[A-Z])(?=.*[0-9])(?=.*[^A-Za-z0-9])|(?=.*[a-z])(?=.*[0-9])(?=.*[^A-Za-z0-9]))^.*
    #ConstraintDescription: must be 16 to 64 characters, and contain three out of four character classes uppercase, lowercase, digts or symbols.
  AuditorPassword:
    Description: Password for the auditor User (optional)
    Type: String
    NoEcho: true
    Default: ''
    AllowedPattern: (^$|(?=^.{16,64}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])^.*)
    ConstraintDescription: if specified, must be 16 to 64 alphanumeric characters, with at least one uppercase, lowercase and digit. Symbols not allowed.
Conditions:
  GenerateOperatorPassword: !Equals [ !Ref OperatorPassword, '' ]
  GenerateAuditorPassword: !Equals [ !Ref AuditorPassword, '' ]
Resources:
  OperatorRandomPassword:
    Type: Custom::RandomPassword
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-RandomPasswordFunctionArn
      ExcludePunctuation: true
    Condition: GenerateOperatorPassword
  OperatorPasswordSecureParameter:
    Type: Custom::SecureParameter
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-SecureParameterFunctionArn
      Name: OperatorPassword
      Value: !If [ GenerateOperatorPassword, !GetAtt OperatorRandomPassword.Password, !Ref OperatorPassword ]
      AllowedPattern: ^[a-zA-Z0-9]{16,64}$
      Description: Password for the operator User
  OperatorUser:
    Type: AWS::IAM::User
    Properties:
      UserName: operator
      Path: /
      LoginProfile:
        Password: !If [ GenerateOperatorPassword, !GetAtt OperatorRandomPassword.Password, !Ref OperatorPassword ]
        # Note the following dynamic reference won't work if the SecureParameter is created in the same Template, as is the case here
        # as it appears this string is parsed immediately, despite the "DependsOn" statement. To use the Dynamic Reference, SecureParameters
        # will have to be created in a separate Template which would then become a prerequisite to the Template where used.
        #Password: '{{resolve:ssm-secure:OperatorPassword:1}}'
        PasswordResetRequired: !If [ GenerateOperatorPassword, true, !Ref 'AWS::NoValue' ]
    DependsOn: OperatorPasswordSecureParameter
  AuditorRandomPassword:
    Type: Custom::RandomPassword
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${BaselineStackName}-RandomPasswordFunctionArn
      ExcludePunctuation: true
    Condition: GenerateAuditorPassword
  AuditorPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: AuditorPassword
      Description: Password for the auditor User
      SecretString: !If [ GenerateAuditorPassword, !GetAtt AuditorRandomPassword.Password, !Ref AuditorPassword ]
      Tags:
        - Key: Name
          Value: AuditorPassword
  AuditorUser:
    Type: AWS::IAM::User
    Properties:
      UserName: auditor
      Path: /
      LoginProfile:
        Password: !Sub '{{resolve:secretsmanager:${AuditorPasswordSecret}}}'
        # Note that if we use Secrets Manager to store generated passwords, we would likely not force an immediate rotation
        # Also, we might want to setup automatic password rotation for such users via an associated Lambda Rotation Function.
        PasswordResetRequired: !If [ GenerateAuditorPassword, true, !Ref 'AWS::NoValue' ]
    DependsOn: AuditorPasswordSecret
  AgentPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: AgentPassword
      Description: Password for the agent User
      GenerateSecretString:
        ExcludePunctuation: true
      Tags:
      - Key: Name
        Value: AgentPassword
  AgentUser:
    Type: AWS::IAM::User
    Properties:
      UserName: agent
      Path: /
      LoginProfile:
        Password: !Sub '{{resolve:secretsmanager:${AgentPasswordSecret}}}'
        PasswordResetRequired: false
    DependsOn: AgentPasswordSecret
Outputs:
  OperatorPassword:
    Description: The Operator Password
    Value: !If [ GenerateOperatorPassword, !GetAtt OperatorRandomPassword.Password, !Ref OperatorPassword ]
  AuditorPassword:
    Description: The Auditor Password
    Value: !If [ GenerateAuditorPassword, !GetAtt AuditorRandomPassword.Password, !Ref AuditorPassword ]
  OperatorPasswordSecureParameter:
    Description: The OperatorPasswordSecureParameter Name
    Value: !Ref OperatorPasswordSecureParameter
  AuditorPasswordSecretArn:
    Description: The AuditorPasswordSecret ARN
    Value: !Ref AuditorPasswordSecret
  AgentPasswordSecretArn:
    Description: The AgentPasswordSecret ARN
    Value: !Ref AgentPasswordSecret
