AWSTemplateFormatVersion: 2010-09-09
Description: Baseline-Baseline Template.
  This creates Baseline Resources needed before Stacks can be created.
  Only the ZipFile method for Lambda Function Code is supported in this Template - this Stack will be created before
  any S3 Buckets exist. Also, this template contains a HACK to create the BaselineLayer directly from Encoded Content
  as the normal Type only works with S3 Content. This Layer provides the cfn-response-promise Node.js module, which
  allows use of the async/await design pattern instead of the older callback pattern. This layer is only used by
  other Baseline or Codes Functions, and should be removed if CloudFormation adds this missing module at some point.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Layer Configuration
        Parameters:
          - BaselineLayerName
          - BaselineLayerEncodedContent
      - Label:
          default: Function Configuration
        Parameters:
          - RandomPasswordLogRetention
          - SecureParameterLogRetention
          - MessageLogRetention
          - KeyPairLogRetention
    ParameterLabels:
      BaselineLayerName:
        default: Baseline Layer Name
      BaselineLayerEncodedContent:
        default: Baseline Layer Encoded Content
      RandomPasswordLogRetention:
        default: RandomPassword Log Retention
      SecureParameterLogRetention:
        default: SecureParameter Log Retention
      MessageLogRetention:
        default: Message Log Retention
      KeyPairLogRetention:
        default: KeyPair Log Retention
Parameters:
  BaselineLayerName:
    Description: Name of the Baseline Layer
    Type: String
    Default: Baseline
    AllowedValues:
      - Baseline
    ConstraintDescription: must be Baseline.
  BaselineLayerEncodedContent:
    Description: Content of the Baseline Layer as a Base64-encoded string (Default is BaselineLayer.zip)
    Type: String
    Default: "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\
      AFBLBQYAAAAABAAEAI0BAADUBAAAAAA="
    ConstraintDescription: must be a Base64-encrypted string, containing the Layer archive content.
  RandomPasswordLogRetention:
    Description: Number of days to retain CloudWatch Log Events for the RandomPassword Lambda Function
    Type: Number
    Default: 1
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
    ConstraintDescription: must be 1, 3, 5, 7, 14, 30, 60 or 90.
  SecureParameterLogRetention:
    Description: Number of days to retain CloudWatch Log Events for the SecureParameter Lambda Function
    Type: Number
    Default: 1
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
    ConstraintDescription: must be 1, 3, 5, 7, 14, 30, 60 or 90.
  MessageLogRetention:
    Description: Number of days to retain CloudWatch Log Events for the Message Lambda Function
    Type: Number
    Default: 1
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
    ConstraintDescription: must be 1, 3, 5, 7, 14, 30, 60 or 90.
  KeyPairLogRetention:
    Description: Number of days to retain CloudWatch Log Events for the KeyPair Lambda Function
    Type: Number
    Default: 30
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
    ConstraintDescription: 'must be: 1, 3, 5, 7, 14, 30, 60 or 90.'
Conditions:
  ConfigureGlobal: !Equals [ !Ref 'AWS::Region', us-east-1 ]
Resources:
  EncodedLayerVersionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ManageLambdaLayers
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: ListLayers
                Effect: Allow
                Action:
                  - lambda:ListLayerVersions
                Resource: '*'
              - Sid: PublishLayers
                Effect: Allow
                Action:
                  - lambda:PublishLayerVersion
                Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:Baseline*
              - Sid: ManageLayerVersions
                Effect: Allow
                Action:
                  - lambda:GetLayerVersion
                  - lambda:DeleteLayerVersion
                Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:Baseline*:*
  EncodedLayerVersionFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: EncodedLayerVersion
      Description: A Lambda function which creates a Lambda LayerVersion from Base64-encoded Content.
      Role: !GetAtt EncodedLayerVersionRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Handler: index.handler
      Code:
        ZipFile: |
          const response = require('cfn-response');

          const AWS = require('aws-sdk');
          AWS.config.apiVersions = {
            lambda: '2015-03-31'
          };

          const lambda = new AWS.Lambda();

          exports.handler = (event, context) => {
            console.info(`Request body:\n${JSON.stringify(event)}`);

            const layerName = event.ResourceProperties.LayerName;
            if (! layerName) {
              const responseData = {Error: `LayerName missing`};
              console.error(`Error: ${responseData.Error}`);
              response.send(event, context, response.FAILED, responseData);
              return;
            }
            const content = event.ResourceProperties.Content.replace(/ /g, '');
            if (! content && event.RequestType != 'Delete') {
              const responseData = {Error: `Content missing`};
              console.error(`Error: ${responseData.Error}`);
              response.send(event, context, response.FAILED, responseData);
              return;
            }

            let params = {};
            switch (event.RequestType) {
              case 'Create':
              case 'Update':
                console.info(`Calling: PublishLayerVersion...`);
                params = {
                  LayerName: layerName,
                  Content: {
                    ZipFile: Buffer.from(content, 'base64')
                  }
                };
                if (event.ResourceProperties.Description) params.Description = event.ResourceProperties.Description;
                if (event.ResourceProperties.LicenseInfo) params.LicenseInfo = event.ResourceProperties.LicenseInfo;
                if (event.ResourceProperties.CompatibleRuntimes) params.CompatibleRuntimes = event.ResourceProperties.CompatibleRuntimes;
                lambda.publishLayerVersion(params, (err, data) => {
                  if (err) {
                    const responseData = {Error: `PublishLayerVersion call failed`};
                    console.error(`Error: ${responseData.Error}:\n${err}`);
                    response.send(event, context, response.FAILED, responseData);
                  }
                  else {
                    const layerVersionArn = data.LayerVersionArn;
                    const codeSha256 = data.Content.CodeSha256;
                    const responseData = {CodeSha256: codeSha256};
                    console.info(`LayerVersion: ${layerVersionArn} created, Code SHA-256: ${codeSha256}`);
                    response.send(event, context, response.SUCCESS, responseData, layerVersionArn, false);
                  }
                });
                break;

              case 'Delete':
                console.info(`Calling: ListLayerVersions...`);
                  params = {
                    LayerName: layerName
                  };
                  lambda.listLayerVersions(params, function(err, data) {
                  if (err) {
                    const responseData = {Error: `ListLayerVersions call failed`};
                    console.error(`Error: ${responseData.Error}:\n${err}`);
                    response.send(event, context, response.FAILED, responseData);
                  }
                  else {
                    const layerVersions = data.LayerVersions.map(lv => lv.Version);
                    let deletePromises = [];
                    for (const layerVersion of layerVersions) {
                      params = {
                        LayerName: layerName,
                        VersionNumber: layerVersion
                      };
                      deletePromises.push(lambda.deleteLayerVersion(params).promise());
                    }
                    console.info(`Waiting for ${deletePromises.length} DeleteLayerVersion calls to finish...`);
                    Promise.all(deletePromises).then(results => {
                      console.info('LayerVersions deleted');
                      response.send(event, context, response.SUCCESS);
                    }).catch(err => {
                      const responseData = {Error: `Could not delete all LayerVersions`};
                      console.error(`Error: ${responseData.Error}:\n${err}`);
                      response.send(event, context, response.FAILED, responseData);
                    });
                  }
                });
            }
          };
  BaselineLayerVersion:
    Type: Custom::EncodedLayerVersion
    Properties:
      ServiceToken: !GetAtt EncodedLayerVersionFunction.Arn
      LayerName: !Ref BaselineLayerName
      Description: A Lambda layer version which contains the cfn-response-promise module, needed to write Lambda Functions
        which use the async/await coding style instead of callbacks.
      LicenseInfo: MIT
      CompatibleRuntimes:
        - nodejs8.10
        - nodejs10.x
      Content: !Ref BaselineLayerEncodedContent
  RandomPasswordRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AllowRandomPasswordGeneration
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetRandomPassword
                Resource: '*'
  RandomPasswordLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/RandomPassword
      RetentionInDays: !Ref RandomPasswordLogRetention
  RandomPasswordFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: RandomPassword
      Description: A Lambda function that generates a random password using the SecretsManager getRandomPassword method.
      Role: !GetAtt RandomPasswordRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Handler: index.handler
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          AWS.config.apiVersions = {
            secretsmanager: '2017-10-17'
          };

          const secretsmanager = new AWS.SecretsManager();

          const parseBoolean = (value) => {
            const re=/^(t(rue)?|1|on|y(es)?)$/i;
            return re.test(value);
          };

          const response = {};
          response.SUCCESS = "SUCCESS";
          response.FAILED = "FAILED";
          response.send = function(event, context, responseStatus, responseData, physicalResourceId, noEcho) {
            var responseBody = JSON.stringify({
              Status: responseStatus,
              Reason: "See the details in CloudWatch Log Stream: " + context.logStreamName,
              PhysicalResourceId: physicalResourceId || context.logStreamName,
              StackId: event.StackId,
              RequestId: event.RequestId,
              LogicalResourceId: event.LogicalResourceId,
              NoEcho: noEcho || false,
              Data: responseData
            });

            var https = require("https");
            var url = require("url");

            var parsedUrl = url.parse(event.ResponseURL);
            var options = {
              hostname: parsedUrl.hostname,
              port: 443,
              path: parsedUrl.path,
              method: "PUT",
              headers: {
                "content-type": "",
                "content-length": responseBody.length
              }
            };

            var request = https.request(options, function(response) {
              console.log("Status code: " + response.statusCode);
              console.log("Status message: " + response.statusMessage);
              context.done();
            });

            request.on("error", function(error) {
              console.log("send(..) failed executing https.request(..): " + error);
              context.done();
            });

            request.write(responseBody);
            request.end();
          };

          exports.handler = (event, context) => {
            console.info(`Request body:\n${JSON.stringify(event)}`);

            let params = {};
            switch (event.RequestType) {
              case 'Create':
              case 'Update':
                console.info(`Calling: GetRandomPassword...`);
                if (event.ResourceProperties.PasswordLength) params.PasswordLength = Math.max(parseInt(event.ResourceProperties.PasswordLength, 10), 8);
                if (event.ResourceProperties.ExcludeUppercase) params.ExcludeUppercase = parseBoolean(event.ResourceProperties.ExcludeUppercase);
                if (event.ResourceProperties.ExcludeLowercase) params.ExcludeLowercase = parseBoolean(event.ResourceProperties.ExcludeLowercase);
                if (event.ResourceProperties.ExcludeNumbers) params.ExcludeNumbers = parseBoolean(event.ResourceProperties.ExcludeNumbers);
                if (event.ResourceProperties.ExcludePunctuation) params.ExcludePunctuation = parseBoolean(event.ResourceProperties.ExcludePunctuation);
                if (event.ResourceProperties.IncludeSpace) params.IncludeSpace = parseBoolean(event.ResourceProperties.IncludeSpace);
                if (event.ResourceProperties.RequireEachIncludedType) params.RequireEachIncludedType = parseBoolean(event.ResourceProperties.RequireEachIncludedType);
                if (event.ResourceProperties.ExcludeCharacters) params.ExcludeCharacters = event.ResourceProperties.ExcludeCharacters;
                secretsmanager.getRandomPassword(params, (err, data) => {
                  if (err) {
                    const responseData = {Error: `GetRandomPassword call failed`};
                    console.error(`Error: ${responseData.Error}:\n${err}`);
                    response.send(event, context, response.FAILED, responseData);
                  }
                  else {
                    const password = data.RandomPassword;
                    const s = Math.max(Math.min(Math.floor(password.length/4), 4), 1);
                    const m = password.length - 2 * s;
                    const obfuscatedPassword = password.replace(password.substr(s,m), '*'.repeat(m));
                    const responseData = {Password: password};
                    console.info(`RandomPassword: ${obfuscatedPassword} created`);
                    response.send(event, context, response.SUCCESS, responseData, obfuscatedPassword, true);
                  }
                });
                break;

              case 'Delete':
                response.send(event, context, response.SUCCESS);
            }
          };
  SecureParameterRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ManageSSMParameter
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:DeleteParameter
                  - kms:Encrypt
                Resource: '*'
  SecureParameterLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/SecureParameter
      RetentionInDays: !Ref SecureParameterLogRetention
  SecureParameterFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SecureParameter
      Description: A Lambda function that handles an SSM SecureString Parameter as a CustomResource, as this parameter Type is not currently supported.
      Role: !GetAtt SecureParameterRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Handler: index.handler
      Code:
        ZipFile: |
          const response = require('cfn-response');

          const AWS = require('aws-sdk');
          AWS.config.apiVersions = {
            ssm: '2014-11-06'
          };

          const ssm = new AWS.SSM();

          exports.handler = (event, context) => {
            const obfuscatedEvent = {};
            Object.assign(obfuscatedEvent, event);
            obfuscatedEvent.ResourceProperties = {};
            Object.assign(obfuscatedEvent.ResourceProperties, event.ResourceProperties);
            obfuscatedEvent.ResourceProperties.Value = event.ResourceProperties.Value.replace(/./g, '*');

            console.info(`Request Body:\n${JSON.stringify(obfuscatedEvent)}`);

            const name = event.ResourceProperties.Name || `${event.StackId.split(':')[5].split('/')[1]}-${event.LogicalResourceId}`;
            if (! name) {
              const responseData = {Error: `Name missing`};
              console.error(`Error: ${responseData.Error}`);
              response.send(event, context, response.FAILED, responseData);
              return;
            }
            const value = event.ResourceProperties.Value;
            if (! value && event.RequestType != 'Delete') {
              const responseData = {Error: `Value missing`};
              console.error(`Error: ${responseData.Error}`);
              response.send(event, context, response.FAILED, responseData);
              return;
            }
            const allowedPattern = event.ResourceProperties.AllowedPattern;
            const description = event.ResourceProperties.Description;

            let params = {};
            switch (event.RequestType) {
              case 'Create':
              case 'Update':
                console.info(`Calling: PutParameter...`);
                params = {
                  Name: name,
                  Type: 'SecureString',
                  Value: value,
                  Overwrite: (event.RequestType == 'Create') ? false : true
                };
                if (allowedPattern) params.AllowedPattern = allowedPattern;
                if (description) params.Description = description;
                ssm.putParameter(params, (err, data) => {
                  if (err) {
                    const responseData = {Error: `PutParameter call failed`};
                    console.error(`Error: ${responseData.Error}:\n${err}`);
                    response.send(event, context, response.FAILED, responseData);
                  }
                  else {
                    console.info(`SecureParameter: ${name} created`);
                    response.send(event, context, response.SUCCESS, null, name);
                  }
                });
                break;

              case 'Delete':
                console.info(`Calling: DeleteParameter...`);
                params = {
                  Name: name
                };
                ssm.deleteParameter(params, (err, data) => {
                  if (err) {
                    const responseData = {Error: `DeleteParameter call failed`};
                    console.error(`Error: ${responseData.Error}:\n${err}`);
                    response.send(event, context, response.FAILED, responseData);
                  }
                  else {
                    console.info(`Parameter: deleted`);
                    response.send(event, context, response.SUCCESS);
                  }
                });
                break;

              default:
                const responseData = {Error: `Unknown operation: ${event.RequestType}`};
                console.error(`Error: ${responseData.Error}`);
                response.send(event, context, response.FAILED, responseData);
            }
          };
  MessageRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AllowPublish
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: '*'
  MessageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/Message
      RetentionInDays: !Ref MessageLogRetention
  MessageFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: Message
      Description: A Lambda function that publishes a message to an SNS Topic.
      Role: !GetAtt MessageRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Handler: index.handler
      Code:
        ZipFile: |
          const response = require('cfn-response');

          const AWS = require('aws-sdk');
          AWS.config.apiVersions = {
            sns: '2010-03-31'
          };

          const sns = new AWS.SNS();

          exports.handler = (event, context) => {
            console.info(`Request Body:\n${JSON.stringify(event)}`);

            let params = {};
            switch (event.RequestType) {
              case 'Create':
              case 'Update':
                const topicArn = event.ResourceProperties.TopicArn;
                if (! topicArn) {
                  const responseData = {Error: `TopicArn missing`};
                  console.error(`Error: ${responseData.Error}`);
                  response.send(event, context, response.FAILED, responseData);
                  return;
                }

                const message = event.ResourceProperties.Message;
                if (! message) {
                  const responseData = {Error: `Message missing`};
                  console.error(`Error: ${responseData.Error}`);
                  response.send(event, context, response.FAILED, responseData);
                  return;
                }

                console.info(`Calling: Publish...`);
                params = {
                  TopicArn: topicArn,
                  Message: message
                };
                sns.publish(params, (err, data) => {
                  if (err) {
                    const responseData = {Error: `Publish call failed`};
                    console.error(`Error: ${responseData.Error}:\n${err}`);
                    response.send(event, context, response.FAILED, responseData);
                  }
                  else {
                    const messageId = data.MessageId;
                    console.info(`Message: ${messageId} sent`);
                    response.send(event, context, response.SUCCESS, null, messageId);
                  }
                });
                break;

              case 'Delete':
                response.send(event, context, response.SUCCESS);
            }
          };
  KeyPairRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: KeyPairPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowManageKeyPairs
                Effect: Allow
                Action:
                  - ec2:DescribeKeyPairs
                  - ec2:ImportKeyPair
                  - ec2:DeleteKeyPair
                Resource: '*'
  KeyPairLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/KeyPair
      RetentionInDays: !Ref KeyPairLogRetention
  KeyPairFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: KeyPair
      Description: A Lambda function that uses an external SSH Public Key to import an EC2 KeyPair.
      Role: !GetAtt KeyPairRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Layers:
        - !Ref BaselineLayerVersion
      Handler: index.handler
      Code:
        ZipFile: |
          const response = require('cfn-response-promise');

          const AWS = require('aws-sdk');
          AWS.config.apiVersions = {
            ec2: '2016-11-15'
          };

          const ec2 = new AWS.EC2();

          const getKeyPair = async (keyName) => {
            console.info(`Calling: DescribeKeyPairs for Key ${keyName}...`);
            const params = {
              Filters: [{ Name: 'key-name', Values: [keyName] }]
            };
            return await ec2.describeKeyPairs(params).promise().then(data => data.KeyPairs[0]);
          };

          const importKeyPair = async (keyName, publicKeyMaterial) => {
            console.info(`Calling: ImportKeyPair for Key ${keyName}...`);
            const params = {
              KeyName: keyName,
              PublicKeyMaterial: publicKeyMaterial
            };
            return await ec2.importKeyPair(params).promise().then(data => data.KeyFingerprint);
          };

          const deleteKeyPair = async (keyName) => {
            console.info(`Calling: DeleteKeyPair for Key ${keyName}...`);
            const params = {
              KeyName: keyName
            };
            await ec2.deleteKeyPair(params).promise();
          };

          exports.handler = async (event, context) => {
            console.info(`Event:\n${JSON.stringify(event)}`);

            switch (event.RequestType) {
              case 'Create':
              case 'Update':
                try {
                  const keyName = event.ResourceProperties.KeyName;
                  if (! /^[a-z][a-z0-9]{3,63}$/.test(keyName)) {
                    throw new Error(`KeyName invalid: must be a 4 - 64-character string which starts with a lower-case letter and consists of lower-case letters and digits`);
                  }

                  const publicKey = event.ResourceProperties.PublicKey;
                  if (! /^ssh-rsa AAAAB3NzaC1yc2E[=/+A-Za-z0-9]{701}( .*)?$/.test(publicKey)) {
                    throw new Error(`PublicKey invalid: Key is not in valid OpenSSH public key format`);
                  }

                  console.info(`KeyName: ${keyName}`);
                  console.info(`PublicKey: ${publicKey}`);

                  const keyPair = await getKeyPair(keyName);

                  if (keyPair) {
                    await deleteKeyPair(keyName);
                  }

                  const fingerprint = await importKeyPair(keyName, publicKey);
                  const responseData = {Fingerprint: fingerprint};
                  console.info(`KeyPair: ${keyName} with fingerprint ${fingerprint} ${(keyPair) ? 'created' : 'updated'}`);
                  await response.send(event, context, response.SUCCESS, responseData, keyName);
                }
                catch (err) {
                  const responseData = {Error: `Could not ${(event.RequestType) ? 'create' : 'update'} KeyPair: See the details in CloudWatch Log Stream: ${context.logStreamName}`};
                  console.error(`Error: ${responseData.Error}:\n${err}`);
                  await response.send(event, context, response.FAILED, responseData);
                }
                break;

              case 'Delete':
                try {
                  const keyName = event.ResourceProperties.KeyName;
                  if (! /^[a-z][a-z0-9]{3,63}$/.test(keyName)) {
                    throw new Error(`KeyName invalid: must be a 4 - 64-character string which starts with a lower-case letter and consists of lower-case letters and digits`);
                  }

                  const keyPair = await getKeyPair(keyName);

                  if (keyPair) {
                    const fingerprint = keyPair.KeyFingerprint;
                    await deleteKeyPair(keyName);
                    console.info(`KeyPair: ${keyName} with fingerprint ${fingerprint} deleted`);
                  }
                  else {
                    console.info(`KeyPair: ${keyName} not found`);
                  }
                  await response.send(event, context, response.SUCCESS);
                }
                catch (err) {
                  const responseData = {Error: `Could not delete KeyPair: See the details in CloudWatch Log Stream: ${context.logStreamName}`};
                  console.error(`Error: ${responseData.Error}:\n${err}`);
                  await response.send(event, context, response.FAILED, responseData);
                }
            }
          };
Outputs:
  EncodedLayerVersionFunctionArn:
    Description: The EncodedLayerVersion Lambda Function ARN
    Value: !GetAtt EncodedLayerVersionFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-EncodedLayerVersionFunctionArn
  BaselineLayerVersionArn:
    Description: The BaselineLayerVersion ARN
    Value: !Ref BaselineLayerVersion
    Export:
      Name: !Sub ${AWS::StackName}-BaselineLayerVersionArn
  RandomPasswordFunctionArn:
    Description: The RandomPassword Lambda Function ARN
    Value: !GetAtt RandomPasswordFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-RandomPasswordFunctionArn
  SecureParameterFunctionArn:
    Description: The SecureParameter Lambda Function ARN
    Value: !GetAtt SecureParameterFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-SecureParameterFunctionArn
  MessageFunctionArn:
    Description: The Message Lambda Function ARN
    Value: !GetAtt MessageFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-MessageFunctionArn
  KeyPairFunctionArn:
    Description: The KeyPair Lambda Function ARN
    Value: !GetAtt KeyPairFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-KeyPairFunctionArn
