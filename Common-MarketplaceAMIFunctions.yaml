AWSTemplateFormatVersion: 2010-09-09
Description: Common-MarketplaceAMIFunctions Template.
  This creates Lambda Functions related to Marketplace AMIs.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - BucketsStackName
          - TopicsStackName
      - Label:
          default: Function Configuration
        Parameters:
          - LogRetention
    ParameterLabels:
      BucketsStackName:
        default: Buckets Stack Name
      TopicsStackName:
        default: Topics Stack Name
      LogRetention:
        default: Log Retention
Parameters:
  BucketsStackName:
    Description: Name of the CloudFormation Stack containing Buckets
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Buckets
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  TopicsStackName:
    Description: Name of the CloudFormation Stack containing Topics
    Type: String
    MinLength: 8
    MaxLength: 64
    Default: Topics
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  LogRetention:
    Description: Number of days to retain CloudWatch Log Events for all AMI Lookup Lambda Functions
    Type: Number
    Default: 30
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
    ConstraintDescription: 'must be: 1, 3, 5, 7, 14, 30, 60 or 90.'
Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DescribeImagesPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeImages
                Resource: '*'
  CISAmazonLinuxImageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/CISAmazonLinuxImage
      RetentionInDays: !Ref LogRetention
  CISAmazonLinuxImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CISAmazonLinuxImage
      Description: A Lambda function that looks up the latest Center for Internet Security Amazon Linux Image for a given OS Variant, CIS Baseline, CIS Level and Region.
      Role: !GetAtt Role.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Handler: index.handler
      Code:
        ZipFile: |
          const osNameToFilter = {
            'Amazon Linux' : 'CIS Amazon Linux' // List default first
          };

          const response = require('cfn-response');

          exports.handler = function(event, context) {
            console.log('Request body:\n' + JSON.stringify(event));

            let responseData = {};
            let params = {};

            let region = (event.ResourceProperties.Region) ? event.ResourceProperties.Region : process.env.AWS_REGION;
            let osName = (event.ResourceProperties.OSName) ? event.ResourceProperties.OSName : Object.keys(osNameToFilter)[0];
            let cisBenchmark = (event.ResourceProperties.CISBenchmark) ? event.ResourceProperties.CISBenchmark : '?.?.*';
            let cisLevel = (event.ResourceProperties.CISLevel) ? event.ResourceProperties.CISLevel : '1';

            let amiNameFilter = (! osNameToFilter[osName]) ? osNameToFilter[Object.keys(osNameToFilter)[0]] : osNameToFilter[osName];
            amiNameFilter += ' Benchmark v' + cisBenchmark + ' - Level ' + cisLevel + '-*';
            console.log('OS: ' + osName + ', Benchmark: ' + cisBenchmark + ', Level: ' + cisLevel);
            console.log('Filter: ' + amiNameFilter);

            const AWS = require('aws-sdk');
            AWS.config.update({region: region});
            AWS.config.apiVersions = {
              ec2: '2016-11-15'
            };

            const ec2 = new AWS.EC2();

            switch (event.RequestType) {
              case 'Create':
              case 'Update':
                console.log('Calling: DescribeImages...');
                params = {
                  Filters: [{ Name: 'name', Values: [amiNameFilter]}],
                  Owners: ['679593333241']
                };
                ec2.describeImages(params, function(err, data) {
                  if (err) {
                    responseData = {Error: 'DescribeImages call failed'};
                    console.error('Error: ' + responseData.Error + ':\n', err);
                    response.send(event, context, response.FAILED, responseData);
                  }
                  else {
                    if (data.Images.length > 0) {
                      let image = data.Images.sort((x, y) => y.CreationDate.localeCompare(x.CreationDate))[0];
                      responseData.Name = image.Name;
                      responseData.CreationDate = image.CreationDate;
                      console.log('Image: ' + image.Name + ' Image (' + image.ImageId + ')');
                      response.send(event, context, response.SUCCESS, responseData, image.ImageId);
                    }
                    else {
                      responseData = {Error: 'Could not find Image(s) matching pattern ' + amiNameFilter};
                      console.error('Error: ' + responseData.Error);
                      response.send(event, context, response.FAILED, responseData);
                    }
                  }
                });
                break;

              case 'Delete':
                response.send(event, context, response.SUCCESS);
                break;

              default:
                responseData = {Error: 'Unknown operation: ' + event.RequestType};
                console.error('Error: ' + responseData.Error);
                response.send(event, context, response.FAILED, responseData);
            }
          };
  CISWindowsImageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/CISWindowsImage
      RetentionInDays: !Ref LogRetention
  CISWindowsImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CISWindowsImage
      Description: A Lambda function that looks up the latest Center for Internet Security Windows Image for a given OS Variant, CIS Baseline, CIS Level and Region.
      Role: !GetAtt Role.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Handler: index.handler
      Code:
        ZipFile: |
          const osNameToFilter = {
            'Windows Server 2016'    : 'CIS Microsoft Windows Server 2016', // List default first
            'Windows Server 2012 R2' : 'CIS Microsoft Windows Server 2012 R2',
          };

          const response = require('cfn-response');

          exports.handler = function(event, context) {
            console.log('Request body:\n' + JSON.stringify(event));

            let responseData = {};
            let params = {};

            let region = (event.ResourceProperties.Region) ? event.ResourceProperties.Region : process.env.AWS_REGION;
            let osName = (event.ResourceProperties.OSName) ? event.ResourceProperties.OSName : Object.keys(osNameToFilter)[0];
            let cisBenchmark = (event.ResourceProperties.CISBenchmark) ? event.ResourceProperties.CISBenchmark : '?.?.*';
            let cisLevel = (event.ResourceProperties.CISLevel) ? event.ResourceProperties.CISLevel : '1';

            let amiNameFilter = (! osNameToFilter[osName]) ? osNameToFilter[Object.keys(osNameToFilter)[0]] : osNameToFilter[osName];
            if (amiNameFilter == 'CIS Microsoft Windows Server 2016') {
              amiNameFilter += ' Benchmark ' + cisBenchmark + ' Level ' + cisLevel + '-*';
            }
            else {
              amiNameFilter += ' Benchmark v' + cisBenchmark + ' Level ' + cisLevel + '-*';
            }
            console.log('OS: ' + osName + ', Benchmark: ' + cisBenchmark + ', Level: ' + cisLevel);
            console.log('Filter: ' + amiNameFilter);

            const AWS = require('aws-sdk');
            AWS.config.update({region: region});
            AWS.config.apiVersions = {
              ec2: '2016-11-15'
            };

            const ec2 = new AWS.EC2();

            switch (event.RequestType) {
              case 'Create':
              case 'Update':
                console.log('Calling: DescribeImages...');
                params = {
                  Filters: [{ Name: 'name', Values: [amiNameFilter]}],
                  Owners: ['679593333241']
                };
                ec2.describeImages(params, function(err, data) {
                  if (err) {
                    responseData = {Error: 'DescribeImages call failed'};
                    console.error('Error: ' + responseData.Error + ':\n', err);
                    response.send(event, context, response.FAILED, responseData);
                  }
                  else {
                    if (data.Images.length > 0) {
                      let image = data.Images.sort((x, y) => y.CreationDate.localeCompare(x.CreationDate))[0];
                      responseData.Name = image.Name;
                      responseData.CreationDate = image.CreationDate;
                      console.log('Image: ' + image.Name + ' Image (' + image.ImageId + ')');
                      response.send(event, context, response.SUCCESS, responseData, image.ImageId);
                    }
                    else {
                      responseData = {Error: 'Could not find Image(s) matching pattern ' + amiNameFilter};
                      console.error('Error: ' + responseData.Error);
                      response.send(event, context, response.FAILED, responseData);
                    }
                  }
                });
                break;

              case 'Delete':
                response.send(event, context, response.SUCCESS);
                break;

              default:
                responseData = {Error: 'Unknown operation: ' + event.RequestType};
                console.error('Error: ' + responseData.Error);
                response.send(event, context, response.FAILED, responseData);
            }
          };
  CISRHELImageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/CISRHELImage
      RetentionInDays: !Ref LogRetention
  CISRHELImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CISRHELImage
      Description: A Lambda function that looks up the latest Center for Internet Security RHEL Image for a given OS Variant, CIS Baseline, CIS Level and Region.
      Role: !GetAtt Role.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Handler: index.handler
      Code:
        ZipFile: |
          const osNameToFilter = {
            'RHEL 7'    : 'CIS Red Hat Enterprise Linux 7', // List default first
            'RHEL 6'    : 'CIS Red Hat Enterprise Linux 6'
          };

          const response = require('cfn-response');

          exports.handler = function(event, context) {
            console.log('Request body:\n' + JSON.stringify(event));

            let responseData = {};
            let params = {};

            let region = (event.ResourceProperties.Region) ? event.ResourceProperties.Region : process.env.AWS_REGION;
            let osName = (event.ResourceProperties.OSName) ? event.ResourceProperties.OSName : Object.keys(osNameToFilter)[0];
            let cisBenchmark = (event.ResourceProperties.CISBenchmark) ? event.ResourceProperties.CISBenchmark : '?.?.*';
            let cisLevel = (event.ResourceProperties.CISLevel) ? event.ResourceProperties.CISLevel : '1';

            let amiNameFilter = (! osNameToFilter[osName]) ? osNameToFilter[Object.keys(osNameToFilter)[0]] : osNameToFilter[osName];
            amiNameFilter += ' Benchmark v' + cisBenchmark + ' - Level ' + cisLevel + '-*';
            console.log('OS: ' + osName + ', Benchmark: ' + cisBenchmark + ', Level: ' + cisLevel);
            console.log('Filter: ' + amiNameFilter);

            const AWS = require('aws-sdk');
            AWS.config.update({region: region});
            AWS.config.apiVersions = {
              ec2: '2016-11-15'
            };

            const ec2 = new AWS.EC2();

            switch (event.RequestType) {
              case 'Create':
              case 'Update':
                console.log('Calling: DescribeImages...');
                params = {
                  Filters: [{ Name: 'name', Values: [amiNameFilter]}],
                  Owners: ['679593333241']
                };
                ec2.describeImages(params, function(err, data) {
                  if (err) {
                    responseData = {Error: 'DescribeImages call failed'};
                    console.error('Error: ' + responseData.Error + ':\n', err);
                    response.send(event, context, response.FAILED, responseData);
                  }
                  else {
                    if (data.Images.length > 0) {
                      let image = data.Images.sort((x, y) => y.CreationDate.localeCompare(x.CreationDate))[0];
                      responseData.Name = image.Name;
                      responseData.CreationDate = image.CreationDate;
                      console.log('Image: ' + image.Name + ' Image (' + image.ImageId + ')');
                      response.send(event, context, response.SUCCESS, responseData, image.ImageId);
                    }
                    else {
                      responseData = {Error: 'Could not find Image(s) matching pattern ' + amiNameFilter};
                      console.error('Error: ' + responseData.Error);
                      response.send(event, context, response.FAILED, responseData);
                    }
                  }
                });
                break;

              case 'Delete':
                response.send(event, context, response.SUCCESS);
                break;

              default:
                responseData = {Error: 'Unknown operation: ' + event.RequestType};
                console.error('Error: ' + responseData.Error);
                response.send(event, context, response.FAILED, responseData);
            }
          };
  CISCentosImageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/CISCentosImage
      RetentionInDays: !Ref LogRetention
  CISCentosImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CISCentosImage
      Description: A Lambda function that looks up the latest Center for Internet Security Centos Image for a given OS Variant, CIS Baseline, CIS Level and Region.
      Role: !GetAtt Role.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Handler: index.handler
      Code:
        ZipFile: |
          const osNameToFilter = {
            'Centos 7'    : 'CIS Cent?? Linux 7', // List default first
            'Centos 6'    : 'CIS Cent?? Linux 6'
          };

          const cisLevelToFilter = {
            '1' : 'Level 1'
          };

          const response = require('cfn-response');

          exports.handler = function(event, context) {
            console.log('Request body:\n' + JSON.stringify(event));

            let responseData = {};
            let params = {};

            let region = (event.ResourceProperties.Region) ? event.ResourceProperties.Region : process.env.AWS_REGION;
            let osName = (event.ResourceProperties.OSName) ? event.ResourceProperties.OSName : Object.keys(osNameToFilter)[0];
            let cisBenchmark = (event.ResourceProperties.CISBenchmark) ? event.ResourceProperties.CISBenchmark : '?.?.*';
            let cisLevel = (event.ResourceProperties.CISLevel) ? event.ResourceProperties.CISLevel : '1';

            let amiNameFilter = (! osNameToFilter[osName]) ? osNameToFilter[Object.keys(osNameToFilter)[0]] : osNameToFilter[osName];
            amiNameFilter += ' Benchmark v' + cisBenchmark + ' - Level ' + cisLevel + '-*';
            console.log('OS: ' + osName + ', Benchmark: ' + cisBenchmark + ', Level: ' + cisLevel);
            console.log('Filter: ' + amiNameFilter);

            const AWS = require('aws-sdk');
            AWS.config.update({region: region});
            AWS.config.apiVersions = {
              ec2: '2016-11-15'
            };

            const ec2 = new AWS.EC2();

            switch (event.RequestType) {
              case 'Create':
              case 'Update':
                console.log('Calling: DescribeImages...');
                params = {
                  Filters: [{ Name: 'name', Values: [amiNameFilter]}],
                  Owners: ['679593333241']
                };
                ec2.describeImages(params, function(err, data) {
                  if (err) {
                    responseData = {Error: 'DescribeImages call failed'};
                    console.error('Error: ' + responseData.Error + ':\n', err);
                    response.send(event, context, response.FAILED, responseData);
                  }
                  else {
                    if (data.Images.length > 0) {
                      let image = data.Images.sort((x, y) => y.CreationDate.localeCompare(x.CreationDate))[0];
                      responseData.Name = image.Name;
                      responseData.CreationDate = image.CreationDate;
                      console.log('Image: ' + image.Name + ' Image (' + image.ImageId + ')');
                      response.send(event, context, response.SUCCESS, responseData, image.ImageId);
                    }
                    else {
                      responseData = {Error: 'Could not find Image(s) matching pattern ' + amiNameFilter};
                      console.error('Error: ' + responseData.Error);
                      response.send(event, context, response.FAILED, responseData);
                    }
                  }
                });
                break;

              case 'Delete':
                response.send(event, context, response.SUCCESS);
                break;

              default:
                responseData = {Error: 'Unknown operation: ' + event.RequestType};
                console.error('Error: ' + responseData.Error);
                response.send(event, context, response.FAILED, responseData);
            }
          };
  CISUbuntuImageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/CISUbuntuImage
      RetentionInDays: !Ref LogRetention
  CISUbuntuImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CISUbuntuImage
      Description: A Lambda function that looks up the latest Center for Internet Security Ubuntu Image for a given Version and Region.
      Role: !GetAtt Role.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Handler: index.handler
      Code:
        ZipFile: |
          const osNameToFilter = {
            'Ubuntu Server 18.04 LTS' : 'CIS Ubuntu Linux 18.04 LTS', // List default first
            'Ubuntu Server 16.04 LTS' : 'CIS Ubuntu Linux 16.04 LTS',
            'Ubuntu Server 14.04 LTS' : 'CIS Ubuntu Linux 14.04 LTS'
          };

          const response = require('cfn-response');

          exports.handler = function(event, context) {
            console.log('Request body:\n' + JSON.stringify(event));

            let responseData = {};
            let params = {};

            let region = (event.ResourceProperties.Region) ? event.ResourceProperties.Region : process.env.AWS_REGION;
            let osName = (event.ResourceProperties.OSName) ? event.ResourceProperties.OSName : Object.keys(osNameToFilter)[0];
            let cisBenchmark = (event.ResourceProperties.CISBenchmark) ? event.ResourceProperties.CISBenchmark : '?.?.*';
            let cisLevel = (event.ResourceProperties.CISLevel) ? event.ResourceProperties.CISLevel : '1';

            let amiNameFilter = (! osNameToFilter[osName]) ? osNameToFilter[Object.keys(osNameToFilter)[0]] : osNameToFilter[osName];
            amiNameFilter += ' Benchmark v' + cisBenchmark + ' - Level ' + cisLevel + '-*';
            console.log('OS: ' + osName + ', Benchmark: ' + cisBenchmark + ', Level: ' + cisLevel);
            console.log('Filter: ' + amiNameFilter);

            const AWS = require('aws-sdk');
            AWS.config.update({region: region});
            AWS.config.apiVersions = {
              ec2: '2016-11-15'
            };

            const ec2 = new AWS.EC2();

            switch (event.RequestType) {
              case 'Create':
              case 'Update':
                console.log('Calling: DescribeImages...');
                params = {
                  Filters: [{ Name: 'name', Values: [amiNameFilter]}],
                  Owners: ['679593333241']
                };
                ec2.describeImages(params, function(err, data) {
                  if (err) {
                    responseData = {Error: 'DescribeImages call failed'};
                    console.error('Error: ' + responseData.Error + ':\n', err);
                    response.send(event, context, response.FAILED, responseData);
                  }
                  else {
                    if (data.Images.length > 0) {
                      let image = data.Images.sort((x, y) => y.CreationDate.localeCompare(x.CreationDate))[0];
                      responseData.Name = image.Name;
                      responseData.CreationDate = image.CreationDate;
                      console.log('Image: ' + image.Name + ' Image (' + image.ImageId + ')');
                      response.send(event, context, response.SUCCESS, responseData, image.ImageId);
                    }
                    else {
                      responseData = {Error: 'Could not find Image(s) matching pattern ' + amiNameFilter};
                      console.error('Error: ' + responseData.Error);
                      response.send(event, context, response.FAILED, responseData);
                    }
                  }
                });
                break;

              case 'Delete':
                response.send(event, context, response.SUCCESS);
                break;

              default:
                responseData = {Error: 'Unknown operation: ' + event.RequestType};
                console.error('Error: ' + responseData.Error);
                response.send(event, context, response.FAILED, responseData);
            }
          };
  OpenVPNASImageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/OpenVPNASImage
      RetentionInDays: !Ref LogRetention
  OpenVPNASImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: OpenVPNASImage
      Description: A Lambda function that looks up the latest OpenVPN Access Server Image for a given License, Version and Region.
      Role: !GetAtt Role.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Handler: index.handler
      Code:
        ZipFile: |
          const licenseToUUID = {
            'OpenVPNAS2'   : 'fe8020db-5343-4c43-9e65-5ed4a825c931', // List default first
            'OpenVPNAS5'   : '3b5882c4-551b-43fa-acfe-7f5cdb896ff1',
            'OpenVPNAS10'  : '8fbe3379-63b6-43e8-87bd-0e93fd7be8f3',
            'OpenVPNAS25'  : '23223b90-d61f-472a-b732-f2b98e6fa3fb',
            'OpenVPNAS50'  : 'bbff26cd-b407-44a2-a7ef-70b8971391f1',
            'OpenVPNAS100' : '7091ef09-bad5-4f1d-9596-0ddf93d97793'
          };

          const response = require('cfn-response');

          exports.handler = function(event, context) {
            console.log('Request body:\n' + JSON.stringify(event));

            let responseData = {};
            let params = {};

            let region = (event.ResourceProperties.Region) ? event.ResourceProperties.Region : process.env.AWS_REGION;
            let license = (event.ResourceProperties.License) ? event.ResourceProperties.License : Object.keys(licenseToUUID)[0];
            let version = (event.ResourceProperties.Version) ? event.ResourceProperties.Version : '?.?.*';

            let amiNameFilter = 'OpenVPN Access Server ' + version + '-';
            amiNameFilter += (! licenseToUUID[license]) ? licenseToUUID[Object.keys(licenseToUUID)[0]] : licenseToUUID[license];
            amiNameFilter += '-*';
            console.log('License: ' + license + ', version: ' + version);
            console.log('Filter: ' + amiNameFilter);

            const AWS = require('aws-sdk');
            AWS.config.update({region: region});
            AWS.config.apiVersions = {
              ec2: '2016-11-15'
            };

            const ec2 = new AWS.EC2();

            switch (event.RequestType) {
              case 'Create':
              case 'Update':
                console.log('Calling DescribeImages...');
                params = {
                  Filters: [{ Name: 'name', Values: [amiNameFilter]}],
                  Owners: ['679593333241']
                };
                ec2.describeImages(params, function(err, data) {
                  if (err) {
                    responseData = {Error: 'DescribeImages call failed'};
                    console.error('Error: ' + responseData.Error + ':\n', err);
                    response.send(event, context, response.FAILED, responseData);
                  }
                  else {
                    if (data.Images.length > 0) {
                      let image = data.Images.sort((x, y) => y.Name.localeCompare(x.Name))[0];
                      responseData.Name = image.Name;
                      responseData.CreationDate = image.CreationDate;
                      console.log('Image: ' + image.Name + ' Image (' + image.ImageId + ')');
                      response.send(event, context, response.SUCCESS, responseData, image.ImageId);
                    }
                    else {
                      responseData = {Error: 'Could not find Image(s) matching pattern ' + amiNameFilter};
                      console.error('Error: ' + responseData.Error);
                      response.send(event, context, response.FAILED, responseData);
                    }
                  }
                });
                break;

              case 'Delete':
                response.send(event, context, response.SUCCESS);
                break;

              default:
                responseData = {Error: 'Unknown operation: ' + event.RequestType};
                console.error('Error: ' + responseData.Error);
                response.send(event, context, response.FAILED, responseData);
            }
          };
  DeepSecurityImageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/DeepSecurityImage
      RetentionInDays: !Ref LogRetention
  DeepSecurityImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DeepSecurityImage
      Description: A Lambda function that looks up the latest Trend Micro Deep Security Image for a given License, Version and Region.
      Role: !GetAtt Role.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Handler: index.handler
      Code:
        ZipFile: |
          const licenseToUUID = {
            'PerHost'      : 'd70fb77f-c90c-40e9-8cba-2d257a7b01d2', // List default first
            'BYOL'         : 'a55109c6-2916-4d00-9886-1c5c28da085d'
          };

          const response = require('cfn-response');

          exports.handler = function(event, context) {
            console.log('Request body:\n' + JSON.stringify(event));

            let responseData = {};
            let params = {};

            let region = (event.ResourceProperties.Region) ? event.ResourceProperties.Region : process.env.AWS_REGION;
            let license = (event.ResourceProperties.License) ? event.ResourceProperties.License : Object.keys(licenseToUUID)[0];
            let version = (event.ResourceProperties.Version) ? event.ResourceProperties.Version : '*.*.*';

            let amiNameFilter = 'Deep Security ' + version + '-';
            amiNameFilter += (! licenseToUUID[license]) ? licenseToUUID[Object.keys(licenseToUUID)[0]] : licenseToUUID[license];
            amiNameFilter += '-*';
            console.log('License: ' + license + ', version: ' + version);
            console.log('Filter: ' + amiNameFilter);

            const AWS = require('aws-sdk');
            AWS.config.update({region: region});
            AWS.config.apiVersions = {
              ec2: '2016-11-15'
            };

            const ec2 = new AWS.EC2();

            switch (event.RequestType) {
              case 'Create':
              case 'Update':
                console.log('Calling: DescribeImages...');
                params = {
                  Filters: [{ Name: 'name', Values: [amiNameFilter]}],
                  Owners: ['679593333241']
                };
                ec2.describeImages(params, function(err, data) {
                  if (err) {
                    responseData = {Error: 'DescribeImages call failed'};
                    console.error('Error: ' + responseData.Error + ':\n', err);
                    response.send(event, context, response.FAILED, responseData);
                  }
                  else {
                    if (data.Images.length > 0) {
                      let image = data.Images.sort((x, y) => y.Name.localeCompare(x.Name))[0];
                      responseData.Name = image.Name;
                      responseData.CreationDate = image.CreationDate;
                      console.log('Image: ' + image.Name + ' Image (' + image.ImageId + ')');
                      response.send(event, context, response.SUCCESS, responseData, image.ImageId);
                    }
                    else {
                      responseData = {Error: 'Could not find Image(s) matching pattern ' + amiNameFilter};
                      console.error('Error: ' + responseData.Error);
                      response.send(event, context, response.FAILED, responseData);
                    }
                  }
                });
                break;

              case 'Delete':
                response.send(event, context, response.SUCCESS);
                break;

              default:
                responseData = {Error: 'Unknown operation: ' + event.RequestType};
                console.error('Error: ' + responseData.Error);
                response.send(event, context, response.FAILED, responseData);
            }
          };
Outputs:
  CISAmazonLinuxImageFunctionArn:
    Description: The CISAmazonLinuxImage Lambda Function ARN
    Value: !GetAtt CISAmazonLinuxImageFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-CISAmazonLinuxImageFunctionArn
  CISWindowsImageFunctionArn:
    Description: The CISWindowsImage Lambda Function ARN
    Value: !GetAtt CISWindowsImageFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-CISWindowsImageFunctionArn
  CISRHELImageFunctionArn:
    Description: The CISRHELImage Lambda Function ARN
    Value: !GetAtt CISRHELImageFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-CISRHELImageFunctionArn
  CISCentosImageFunctionArn:
    Description: The CISCentosImage Lambda Function ARN
    Value: !GetAtt CISCentosImageFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-CISCentosImageFunctionArn
  CISUbuntuImageFunctionArn:
    Description: The CISUbuntuImage Lambda Function ARN
    Value: !GetAtt CISUbuntuImageFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-CISUbuntuImageFunctionArn
  OpenVPNASImageFunctionArn:
    Description: The OpenVPNASImage Lambda Function ARN
    Value: !GetAtt OpenVPNASImageFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-OpenVPNASImageFunctionArn
  DeepSecurityImageFunctionArn:
    Description: The DeepSecurityImage Lambda Function ARN
    Value: !GetAtt DeepSecurityImageFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-DeepSecurityImageFunctionArn
